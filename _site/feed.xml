<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>包丁一本さらしに巻いて</title>
		<description>Python + Data</description>
		<link>http://achiku.github.io</link>
		<atom:link href="http://achiku.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Pythonライブラリを最新に保つ為に(hubot-piptools)</title>
				<description>&lt;p&gt;休みの日を使ってhubot-piptoolsというツールを作った。初OSSなので作った経緯やらを書く。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/achiku/hubot-piptools&quot;&gt;https://github.com/achiku/hubot-piptools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/hubot-piptools.png&quot; alt=&quot;hubot-piptools&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;提供しているサービスのバックエンドはPython&lt;/li&gt;
&lt;li&gt;開発チーム構成

&lt;ul&gt;
&lt;li&gt;企画(ideyuta)&lt;/li&gt;
&lt;li&gt;フロント/デザイン(moqada, ideyuta)&lt;/li&gt;
&lt;li&gt;バックエンド(moqada, achiku)&lt;/li&gt;
&lt;li&gt;インフラ/データ分析(achiku)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub使って開発してる&lt;/li&gt;
&lt;li&gt;CircleCI使ってCIまわしてる&lt;/li&gt;
&lt;li&gt;大体HipChat使ってコミュニケーションしてる&lt;/li&gt;
&lt;li&gt;社内のコミュニケーションでメールは使ってない&lt;/li&gt;
&lt;li&gt;サービスモニタリング、ノーティフィケーションの類もHipChatに集約されてる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;解決しようとした課題&quot;&gt;解決しようとした課題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;現在利用しているPythonのライブラリ更新確認、更新実施に使うコストがかかる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;集約すると上記になるが、もう少し背景を書く。外部のライブラリはどんどん新しくなり、安定していき、機能が磨かれていっている。サービスを提供する側としては、ユーザが受け取る直接的価値である新規機能や機能改善に掛ける時間を最大化した上で、なおかつ眼に触れない部分の安定性も確保していきたい。&lt;/p&gt;

&lt;p&gt;この「ユーザの眼に触れない部分の安定化/最新化」は、自分たちが作るサービスが直接ユーザに届けれる価値といったものからは若干の距離があり、コスト的に手をかけてやる事が難しい部分だ。前提に書いたように少人数で運営している場合などは特に難しいと感じる。とはいえ、中期的に、ふと気づいたら返済できないくらい溜まった負債を抱えない為に(大量且つ一度に実行されるライブラリアップデートはエラーの切り分けがダルい)、細かく簡単に返済していく何がしかの仕組みがあると便利だなと考えた。&lt;/p&gt;

&lt;h2 id=&quot;解決しようとした課題を分割した&quot;&gt;解決しようとした課題を分割した&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ライブラリ更新実施/コード修正/テスト修正のコスト&lt;/li&gt;
&lt;li&gt;ライブラリ更新確認のコスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ライブラリ更新実施/コード修正/テスト修正のコスト&quot;&gt;ライブラリ更新実施/コード修正/テスト修正のコスト&lt;/h3&gt;

&lt;p&gt;ライブラリを更新したらAPIが変更になってたり、新規に潜り込んだバグの為にこっちのコード修正したり、テスト直したりしなければならないコストは、正直不可避だなと思う。互換性は壊れる時は壊れるし、バグは無くならない。それをもってして余りあるメリットを外部ライブラリからは受けているので、この部分は受け入れるもんだと思ってる。寧ろ感謝の気持ちを込めて再現性のあるIssueを上げたりPR出したりしていきたい。&lt;/p&gt;

&lt;h3 id=&quot;ライブラリ更新確認のコスト&quot;&gt;ライブラリ更新確認のコスト&lt;/h3&gt;

&lt;p&gt;なので、達成すべきは「チームが簡単に更新を知って各自動き始める事」なのではないかと考えた。ポイントは「個人が簡単に更新を知って動き始める事」では無いところだと思う。チームメンバー内でも忙しさの波ってのは変わり得て、誰かが忙しいから更新が滞るってなってしまうと結局上手くいかない。&lt;/p&gt;

&lt;h2 id=&quot;課題に対する解決策&quot;&gt;課題に対する解決策&lt;/h2&gt;

&lt;h3 id=&quot;それ、pip-toolsで&quot;&gt;それ、pip-toolsで&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nvie/pip-tools&quot;&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ結構便利なんだけど、結局自分のローカルでしか動かせない。だから「チームが簡単に更新を知って動き始める事」ってのはちょっと達成できそうにないなと思った。これ実行してHipChatに毎日張るってのもありといえばありだけど俄然やりたくない。&lt;/p&gt;

&lt;h3 id=&quot;それ、外部サービスで&quot;&gt;それ、外部サービスで&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://requires.io/&quot;&gt;requires.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pypi-notifier.org/&quot;&gt;pypi-notifier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ使えば普通にイケそうだなって思った。特にrequires.ioは複数のrequirements.txtにも対応してるし、見栄えも良い上に、Security updateをちゃんと知らせてくれる。ただチームの状況には若干マッチしないのではないかと思った。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Privateリポジトリに対応させる時に課金する必要がある&lt;/li&gt;
&lt;li&gt;ノーティフィケーションはメール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;外部サービスに対してお金は全然払っても良いと思うしチームでは幾つかのサービスに課金もしている。ただ、これは別にちょっと落ちててもあまり大きな問題にはなんないんじゃないかと思いと、GitHubから指定ファイル取ってきてパースしてPyPiに問い合わせるだけっしょっていう思いから、いきなりお金払ってサービスを受けるのには若干抵抗があった。あと、極力社内の会話はチャットツールに寄せたいってのも大きく、一旦採用を見送った。&lt;/p&gt;

&lt;h3 id=&quot;それ、botで&quot;&gt;それ、Botで&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/achiku/hubot-piptools&quot;&gt;hubot-piptools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結局フィットするものが無かったので作った。弊社のチャットツールにはKanmukunというボットが住んでいる。コイツに以下の要件で機能を追加してみたら何となくいい感じになった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;毎朝決まった時間に指定リポジトリのrequirementsファイルをパースしてPyPiに問い合わせ&lt;/li&gt;
&lt;li&gt;問い合わせた結果、最新じゃないライブラリが分かるようにルームに通知&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;チャットツール内でライブラリのアップデートが通知されて、そこから自然発生的に「あーこれいつアップグレードする？」「ChangeLogどうなってんの？」「これは俺やっとくわ」とかの会話が発生し、何となく細々と時間空いてる時にアップグレードして行くことはできるんじゃないかなと。&lt;/p&gt;

&lt;p&gt;人間じゃないヤツから毎日通知されるのであれば嫌味も無いし、空いてる時に一つずつでもいいからサクッとアップグレードしてCI回せば良い。CI落ちたらChangeLog確認してテストとコード修正するなり、CI落ちてチャットツールに通知されて「やっぱ駄目だったから後回し」ってするなり、状況に合わせてチームで判断していけばいい。&lt;/p&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;もっとチーム人数増えたりしたらもちろんこの解決策が有効じゃなくなってくることはあると思うけど、そんときはそんときで最適な形を考えます。実装に使った技術は全く新しくもなんともないですが、サーバサイドのCoffeeScript初めて書いたし、node周辺技術よく分かってないし、正直目的達成最優先でクッソ雑に書いてるのでマサカリ歓迎。&lt;/p&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;kanmukunは色々できるいい子です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/achiku_kc.png&quot; alt=&quot;kusokora&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2015/02/02/hubot-piptools.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2015/02/02/hubot-piptools.html</guid>
			</item>
		
			<item>
				<title>AWS EMRでPrestoを動かしてshibからクエリ流してみる</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://qiita.com/advent-calendar/2014/distributedcomputing&quot;&gt;Spark, SQL on Hadoop etc. Advent Calendar 2014&lt;/a&gt;の最終日です。&lt;/p&gt;

&lt;h2 id=&quot;書くこと&quot;&gt;書くこと&lt;/h2&gt;

&lt;p&gt;AWS EMR/S3 + Hive + Presto + Hue + Shibの環境を構築し、簡単にトライアルしてみる。&lt;/p&gt;

&lt;h2 id=&quot;prestoについて&quot;&gt;Prestoについて&lt;/h2&gt;

&lt;p&gt;Facebookがオープンソースで開発しているMPP(Massively Parallel Processing)クエリエンジン。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本家: &lt;a href=&quot;http://prestodb.io/&quot;&gt;Presto - Distributed SQL Query Engine for Big Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TDさんのわかりやすい解説: &lt;a href=&quot;http://treasure-data.hateblo.jp/entry/2014/07/10/150250&quot;&gt;『Prestoとは何か，Prestoで何ができるか』&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ系統のクエリエンジン括りだとImpalaやApache DrillがOSSとして開発されている。MPPクエリエンジン/データベースの大まかな流れや種類、それぞれの使いドコロについてははコチラの記事が最高にまとまっていて参考になる。
&lt;a href=&quot;http://repeatedly.github.io/ja/2014/07/mpp-on-hadoop-redshift-bigquery/&quot;&gt;MPP on Hadoop, Redshift, BigQuery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Facebook以外にもNetfilixやTreasureData等、デカイデータ扱う企業がこぞって開発に参加している印象があり、開発のスピードが速く矢継ぎ早にリリースを繰り返し、リリース毎に便利になっていく。「商用DWHを置き換えっぞ」っていう気合の入った目標に見合うパフォーマンスに加え、SQL分析関数を早々に実装しANSI SQLを完コピしつつJSONも華麗に扱る上、既存Hadoopエコシステムとのつなぎ込み部分(HiveのDDL/メタストアを利用)や、RDBMSとのつなぎ込み部分(MySQL Connector等)含め、なんというか、本当にいつも大変お世話になっています。&lt;/p&gt;

&lt;h2 id=&quot;shibについて&quot;&gt;shibについて&lt;/h2&gt;

&lt;p&gt;PrestoとHiveにクエリを実行できるWebUI。最初はnodeで作られていて不思議だなーって思ったのですが、このエントリを読んでnodeを選んだ理由がわかり、かっこいいなーと思っております。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本家: &lt;a href=&quot;https://github.com/tagomoris/shib&quot;&gt;shib -WebUI for query engines: Hive and Presto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;なぜnodeか: &lt;a href=&quot;http://d.hatena.ne.jp/tagomoris/20110805/1312536706&quot;&gt;Node.jsなWebアプリでJobQueueなしにラクラク巨大処理を実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aws-emrについて&quot;&gt;AWS EMRについて&lt;/h2&gt;

&lt;p&gt;AWSが提供するAPIで操作できるマネージドHadoop環境。APIを利用してHadoopクラスタを作成し、監視等もよしなにやってくれる。要らなくなったら消しておける。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本家: &lt;a href=&quot;http://aws.amazon.com/jp/elasticmapreduce/&quot;&gt;AWS Elastic MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;知る限り最強のEMR資料: &lt;a href=&quot;https://media.amazonwebservices.com/AWS_Amazon_EMR_Best_Practices.pdf&quot;&gt;Best Practices for Amazon EMR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前置きが長くなるとアレなので早速awscliを利用し環境を構築。&lt;/p&gt;

&lt;h2 id=&quot;環境概要&quot;&gt;環境概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HadoopはEMRを使ってクラスタ起動&lt;/li&gt;
&lt;li&gt;AMI 3.3.1 (Hadoop Amazon 2.4.0, Hive 0.13.1)&lt;/li&gt;
&lt;li&gt;Hive/HueはEMRデフォルトの機能を使ってインストール&lt;/li&gt;
&lt;li&gt;Hiveメタストアは一旦ローカルで&lt;/li&gt;
&lt;li&gt;PrestoはEMRのBootstrap Actionを使ってインストール(v0.85)&lt;/li&gt;
&lt;li&gt;ShibはEMRのBootstrap Actionを使ってインストール(v0.3.8)&lt;/li&gt;
&lt;li&gt;S3上にあるファイルにPrestoからクエリを投げる&lt;/li&gt;
&lt;li&gt;S3からHDFS上にフラットファイルで持ってきてPrestoからクエリを投げる&lt;/li&gt;
&lt;li&gt;S3からHDFS上にORCファイルに変換して持ってきてPrestoからクエリを投げる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;構築方法&quot;&gt;構築方法&lt;/h2&gt;

&lt;h3 id=&quot;aws-cliの準備&quot;&gt;AWS CLIの準備&lt;/h3&gt;

&lt;p&gt;CUIからEMRのAPIを叩くためにawscliを利用します。Python若干古いけどとりあえず実行した環境は以下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.7.5&lt;/li&gt;
&lt;li&gt;virtualenv==1.10.1&lt;/li&gt;
&lt;li&gt;virtualenvwrapper==4.1.1&lt;/li&gt;
&lt;li&gt;awscli==1.6.10&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkvirtualenv emr
(emr)$ pip install awscli
(emr)$ pip freeze | grep awscli
awscli==1.6.10
(emr)$ mkdir ~/.awscli
(emr)$ cat &amp;lt;&amp;lt;-EOF &amp;gt;&amp;gt;  ~/.awscli/config
[profile development]
aws_access_key_id=&amp;lt;development_access_key&amp;gt;
aws_secret_access_key=&amp;lt;development_secret_key&amp;gt;
region=ap-northeast-1
EOF
(emr)$ cat &amp;lt;&amp;lt;-EOF &amp;gt;&amp;gt;  $VIRTUAL_ENV/bin/activate
export AWS_CONFIG_FILE=~/.awscli/config
export AWS_DEFAULT_PROFILE=development
source aws_zsh_completer.sh
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;s3に必要なプログラムを配置&quot;&gt;S3に必要なプログラムを配置&lt;/h3&gt;

&lt;p&gt;2014/12/25時点でPrestoの最新版は0.89ですが、0.86以降はJava8が必要で、EMRで立ち上げるAmazon Linuxに入っているJavaがJava7という都合上今回は0.85を利用して環境構築します。たぶんJava8入れて頑張ればできるはずですがサクッといきましょう。&lt;/p&gt;

&lt;p&gt;今回使ったソースは以下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.85/presto-server-0.85.tar.gz&quot;&gt;presto-server-0.85.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/0.85/presto-cli-0.85-executable.jar&quot;&gt;presto-cli-0.85-executable.jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tagomoris/shib/tree/v0.3.8&quot;&gt;shib v0.3.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記をダウンロードし、適当なS3キーに配置しておきます。以下例。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.85/presto-server-0.85.tar.gz
$ aws s3 cp presto-server-0.85.tar.gz s3://yourbucket/libs/
$ wget https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/0.85/presto-cli-0.85-executable.jar
$ aws s3 cp presto-cli-0.85-executable.jar s3://yourbucket/libs/
$ wget https://github.com/tagomoris/shib/archive/v0.3.8.zip
$ unzip v0.3.8.zip &amp;amp;&amp;amp; mv shib-0.3.8 shib
$ tar cvfz shib.tar.gz shib
$ aws s3 cp v0.3.8.zip s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;s3に必要な設定ファイルを配置&quot;&gt;S3に必要な設定ファイルを配置&lt;/h3&gt;

&lt;p&gt;shibがPrestoにクエリするための設定ファイル。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var servers = exports.servers = {
  listen: 3000,
  fetch_lines: 1000,   // lines per fetch in shib
  query_timeout: null, // shib waits queries forever
  setup_queries: [],
  storage: {
    datadir: &amp;#39;./var&amp;#39;
  },
  engines: [
    { label: &amp;#39;PrestoCluster&amp;#39;,
      executer: {
        name: &amp;#39;presto&amp;#39;,
        host: &amp;#39;localhost&amp;#39;,
        port: 8080,
        catalog: &amp;#39;hive&amp;#39;,  // required configuration argument
        support_database: true,
        default_database: &amp;#39;default&amp;#39;
      },
      monitor: null
    },
  ],
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ aws s3 cp shib-config.js s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;s3に必要なbootstrap-actionを配置&quot;&gt;S3に必要なBootstrap Actionを配置&lt;/h3&gt;

&lt;p&gt;Bootstrap ActionとはEMRが管理するHadoopクラスタ構築時に差し挟める任意の処理です。HiveやPig等はデフォルトでEMRのAPIからインストールを指定できるのですが、それ以外のソフトウェアに関してはBootstrap Actionで指定してインストール、設定を行う事になります。&lt;/p&gt;

&lt;h4 id=&quot;prestoのbootstrap-action&quot;&gt;PrestoのBootstrap Action&lt;/h4&gt;

&lt;p&gt;こちらのAWS Labリポジトリにあるので流用します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/emr-bootstrap-actions&quot;&gt;awslabs/emr-bootstrap-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/emr-bootstrap-actions/tree/master/presto&quot;&gt;Presto BootstrapAction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PrestoのBootstrap Actionはそんなオフィシャルにサポートしてはいないですが、READMEもちゃんと書いてあるし、そこまで複雑ではないので要件によっては自作も有りかなと思います。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget https://raw.githubusercontent.com/awslabs/emr-bootstrap-actions/master/presto/install-presto.rb
$ aws s3 cp install-presto.rb s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;shibのbootstrap-action&quot;&gt;shibのBootstrap Action&lt;/h4&gt;

&lt;p&gt;shibは公開されているBootstrap Actionが無いのでシェルを雑に書いた。プロセスの立ち上げ部分もnohupとバックグラウンド実行でペイっと起動してるだけなので本番運用に耐えれるしろものではないですが一旦これで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install-shib.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

shib_tarball_path=$1
config_file_path=$2

sudo yum -y update
sudo yum install -y git
sudo yum install -y nodejs npm --enablerepo=epel

aws s3 cp ${shib_tarball_path} /home/hadoop/shib.tar.gz
{
  cd /home/hadoop &amp;amp;&amp;amp; tar xvfz /home/hadoop/shib.tar.gz
  cd /home/hadoop/shib &amp;amp;&amp;amp; npm install
}
aws s3 cp ${config_file_path} /home/hadoop/shib/config.js
{
  cd /home/hadoop/shib &amp;amp;&amp;amp; nohup npm start &amp;amp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これも同様にS3にあげる。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ aws s3 cp install-shib.sh s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;aws-cliでクラスタ立ち上げ&quot;&gt;AWS CLIでクラスタ立ち上げ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;create-cluster.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

aws emr create-cluster --ami-version 3.3.1 \
    --name &amp;quot;$USER (AMI 3.3.1 Hive + Hue + Presto + shib) $( date &amp;#39;+%Y%m%d%H%M&amp;#39; )&amp;quot; \
    --tags Name=presto-on-emr environment=development \
    --ec2-attributes KeyName=yourkey \
    --applications Name=hive Name=hue \
    --instance-groups file://./large-instance-setup.json \
    --bootstrap-actions file://./bootstrap-presto.json \
    --log-uri &amp;#39;s3://yourbucket/jobflow_logs/&amp;#39; \
    --no-auto-terminate \
    --use-default-roles \
    --visible-to-all-users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※AWSアカウントによっては--use-default-rolesをつけているとPrestoからS3にクエリできない事があります。ご注意。&lt;/p&gt;

&lt;p&gt;instance-groupとbootstrap-actionsは長くなったのでJSONファイルに切り出しています。内容は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;large-instance-setup.json&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[
  {
     &amp;quot;Name&amp;quot;: &amp;quot;emr-master-production&amp;quot;,
     &amp;quot;InstanceGroupType&amp;quot;: &amp;quot;MASTER&amp;quot;,
     &amp;quot;InstanceCount&amp;quot;: 1,
     &amp;quot;InstanceType&amp;quot;: &amp;quot;m3.xlarge&amp;quot;
  },
  {
     &amp;quot;Name&amp;quot;: &amp;quot;emr-core-production&amp;quot;,
     &amp;quot;InstanceGroupType&amp;quot;: &amp;quot;CORE&amp;quot;,
     &amp;quot;InstanceCount&amp;quot;: 2 ,
     &amp;quot;InstanceType&amp;quot;: &amp;quot;m3.xlarge&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;bootstrap-presto.json&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[
  {
    &amp;quot;Name&amp;quot;: &amp;quot;Install/Setup Shib&amp;quot;,
    &amp;quot;Path&amp;quot;: &amp;quot;s3://yourbucket/libs/install-shib.sh&amp;quot;,
    &amp;quot;Args&amp;quot;: [
        &amp;quot;s3://yourbucket/libs/shib.tar.gz&amp;quot;,
        &amp;quot;s3://yourbucket/libs/shib-config.js&amp;quot;
    ]
  },
  {
    &amp;quot;Name&amp;quot;: &amp;quot;Install/Setup Presto&amp;quot;,
    &amp;quot;Path&amp;quot;: &amp;quot;s3://yourbucket/libs/install-presto.rb&amp;quot;,
    &amp;quot;Args&amp;quot;: [
        &amp;quot;--s3-path-to-presto-server-bin&amp;quot;,&amp;quot;s3://yourbucket/libs/presto-server-0.85.tar.gz&amp;quot;,
        &amp;quot;--s3-path-to-presto-cli&amp;quot;, &amp;quot;s3://yourbucket/libs/presto-cli-0.85-executable.jar&amp;quot;
    ]
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;shib/hueアクセス方法&quot;&gt;Shib/Hueアクセス方法&lt;/h2&gt;

&lt;h3 id=&quot;foxyproxyとsshトネリングを利用&quot;&gt;FoxyProxyとSSHトネリングを利用&lt;/h3&gt;

&lt;p&gt;FoxyProxyインストールしてXMLを設定。sshコマンドを使ってトネリング。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://getfoxyproxy.org/&quot;&gt;FoxyProxy - Firefox/Chrome&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sample-emr-proxy.xml&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;foxyproxy&amp;gt;
    &amp;lt;proxies&amp;gt;
        &amp;lt;proxy name=&amp;quot;emr-socks-proxy&amp;quot; id=&amp;quot;2322596116&amp;quot; notes=&amp;quot;&amp;quot; fromSubscription=&amp;quot;false&amp;quot; enabled=&amp;quot;true&amp;quot; mode=&amp;quot;manual&amp;quot; selectedTabIndex=&amp;quot;2&amp;quot; lastresort=&amp;quot;false&amp;quot; animatedIcons=&amp;quot;true&amp;quot; includeInCycle=&amp;quot;true&amp;quot; color=&amp;quot;#0055E5&amp;quot; proxyDNS=&amp;quot;true&amp;quot; noInternalIPs=&amp;quot;false&amp;quot; autoconfMode=&amp;quot;pac&amp;quot; clearCacheBeforeUse=&amp;quot;false&amp;quot; disableCache=&amp;quot;false&amp;quot; clearCookiesBeforeUse=&amp;quot;false&amp;quot; rejectCookies=&amp;quot;false&amp;quot;&amp;gt;
            &amp;lt;matches&amp;gt;
                &amp;lt;match enabled=&amp;quot;true&amp;quot; name=&amp;quot;*ec2*.amazonaws.com*&amp;quot; pattern=&amp;quot;*ec2*.amazonaws.com*&amp;quot; isRegEx=&amp;quot;false&amp;quot; isBlackList=&amp;quot;false&amp;quot; isMultiLine=&amp;quot;false&amp;quot; caseSensitive=&amp;quot;false&amp;quot; fromSubscription=&amp;quot;false&amp;quot; /&amp;gt;
                &amp;lt;match enabled=&amp;quot;true&amp;quot; name=&amp;quot;*ec2*.compute*&amp;quot; pattern=&amp;quot;*ec2*.compute*&amp;quot; isRegEx=&amp;quot;false&amp;quot; isBlackList=&amp;quot;false&amp;quot; isMultiLine=&amp;quot;false&amp;quot; caseSensitive=&amp;quot;false&amp;quot; fromSubscription=&amp;quot;false&amp;quot; /&amp;gt;
                &amp;lt;match enabled=&amp;quot;true&amp;quot; name=&amp;quot;10.*&amp;quot; pattern=&amp;quot;http://10.*&amp;quot; isRegEx=&amp;quot;false&amp;quot; isBlackList=&amp;quot;false&amp;quot; isMultiLine=&amp;quot;false&amp;quot; caseSensitive=&amp;quot;false&amp;quot; fromSubscription=&amp;quot;false&amp;quot; /&amp;gt;
            &amp;lt;/matches&amp;gt;
            &amp;lt;manualconf host=&amp;quot;localhost&amp;quot; port=&amp;quot;8157&amp;quot; socksversion=&amp;quot;5&amp;quot; isSocks=&amp;quot;true&amp;quot; username=&amp;quot;&amp;quot; password=&amp;quot;&amp;quot; domain=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;/proxy&amp;gt;
    &amp;lt;/proxies&amp;gt;
&amp;lt;/foxyproxy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ssh -i ~/yourkey.pem -ND 8157 hadoop@youremrhost.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでFoxyProxyがインストールされているブラウザを介すると、以下のURLにアクセスするとShibにアクセスできます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://youremrhost.compute.amazonaws.com:3000&quot;&gt;http://youremrhost.compute.amazonaws.com:3000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、以下のURLにアクセスするとHueにアクセスできます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://youremrhost.compute.amazonaws.com:8888&quot;&gt;http://youremrhost.compute.amazonaws.com:8888&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aws-securitygroupを変更&quot;&gt;AWS SecurityGroupを変更&lt;/h3&gt;

&lt;p&gt;EMRのMasterノードに付与されるSecurityGroupにオフィスのIPからの3000/8888を許可する。これはIPアドレスでのアクセス制限はできますが、通信自体は暗号化されずにHTTPでやりとりされるのであまりお勧めしません。&lt;/p&gt;

&lt;h2 id=&quot;パフォーマンス&quot;&gt;パフォーマンス&lt;/h2&gt;

&lt;p&gt;パフォーマンスもやりたかった。。S3とHDFS FlatFileとHDFS ORCでかなり差がでるのでたぶん後ほど追記します。&lt;/p&gt;

&lt;h2 id=&quot;終わりに&quot;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;いかがでしたでしょうか。
PrestoとEMRはまだそんなにビッグじゃないけど、大きくなりそうなデータに対して、インタラクティブクエリとスケールしやすさを与えてくれるいいコンビなんじゃないかなと思っております。
もうあと25日は2時間しか残ってませんがハッピーメリークリスマス！&lt;/p&gt;
</description>
				<pubDate>Thu, 25 Dec 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/12/25/presto-hue-shib-on-awsemr.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/12/25/presto-hue-shib-on-awsemr.html</guid>
			</item>
		
			<item>
				<title>それは機能です</title>
				<description>&lt;p&gt;もうすぐ今の会社に入って1年経つのでエモ文章を書く。&lt;/p&gt;

&lt;h2 id=&quot;tl;dr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;30歳1歩手前の自分の考えをまとめておく。35歳の自分へ。人間の機能編。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人間を機能の集合と捉える&lt;/li&gt;
&lt;li&gt;機能を研ぎ澄まし、発動スピード、マッチング精度を向上させる&lt;/li&gt;
&lt;li&gt;無意識に発動する機能に意識的になる&lt;/li&gt;
&lt;li&gt;人間の機能とその先&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;公開するにあたって&quot;&gt;公開するにあたって&lt;/h2&gt;

&lt;p&gt;以下書くことは自分が生きやすいように考えた体系なので自分以外には当てはまらない部分が沢山あると思う。しかも大概が2008年から2014年までのたった6年働いた経験を元にエモ要素多めにひねり出しているものなので、読むのであれば、これは真理とかの類じゃなくてこういう考え方もあると思って読んで頂けるといいんじゃないかと思う。&lt;/p&gt;

&lt;h2 id=&quot;人間を機能の集合と捉える&quot;&gt;人間を機能の集合と捉える&lt;/h2&gt;

&lt;p&gt;人間は機能の塊だ。機能とは例えば「スケジュールを上手く組んで予定通り事を進める」だったり、「突拍子も無い事を言ってみんなを笑わせる」であったり、「結構速く走れる」だったり、「鼻毛が出てる人に言葉を使わずに鼻毛が出てる事を気づかせてあげる」事だったりする。抽象的に言えば、意識的な反復と反復の中で経験される成功/失敗から成功の確率を上げていける行動全て、を機能と言う事にする。もちろん、成功と失敗の間はグラデーションになっているので一概には言えない部分もあるけど、「何が目指す先に合致する成功なのか、失敗なのか、グラデーションの中でも許容できる範囲を適切に決める」という事も、意識的な反復と学習によって精度は上げれるので、一種の機能という事ができると思う。&lt;/p&gt;

&lt;p&gt;ダラダラ書いたけど、人間の行動の大体を「反復と学習で精度を向上できる」ものだという位置づけにする、ってことだ。&lt;/p&gt;

&lt;p&gt;こういう定義をしたのは、それが真理だから、という類のものではなく、それが色々便利だから、という理由による。幾つかその理由を上げてみる。&lt;/p&gt;

&lt;h4 id=&quot;1.-苦手があんまり無くなる&quot;&gt;1. 苦手があんまり無くなる&lt;/h4&gt;

&lt;p&gt;こういう定義にしておくと、まず「何かが苦手」という意識が少なくなる。どういう事かというと、上記定義にもとれば、成功の確率が高く無い、うまくできない、というのは「反復した回数が少ない」と「学習速度が遅い」の二つに分離でき、どちらかに問題がある場合に発生する成功率の低さを言い表した事にすぎないからだ。&lt;/p&gt;

&lt;p&gt;ただし、これは好きや嫌いとは異なる。&lt;/p&gt;

&lt;p&gt;もちろん好きであった方が機能の精度向上スピードは段違いに速いし、嫌いな事をやってたらテンション下がる上に効率はよくない。自分は組織として価値を作って対価を貰う活動を5年くらいやって来て、色々な仕事に関わってきているけど、今のところ「絶対やりたくない」というレベルの仕事には出会ったことはない。ただ、上に書いたような理由で「好きだ、嫌いだ」は口に出して言うけど、「苦手」とはあまり言わなくなった。&lt;/p&gt;

&lt;h4 id=&quot;2.-名前を付けれる、再現性が有る&quot;&gt;2. 名前を付けれる、再現性が有る&lt;/h4&gt;

&lt;p&gt;機能として精度を上げていくと、同じような状況で、その機能を再度実行できるようになる。自分は特別な才能は持ちあわせておらず、反復と学習以上の結果を人生で出した事がない。運も無ければ閃きも無いし、大体結果は反復と学習に見合う結果か、その瞬間の体調によってはそれ以下だ。&lt;/p&gt;

&lt;p&gt;愚痴っぽくなったけど、機能という単位で自分ができる事を認識しておけば、それを再現させることも、組み合わせて使う事も、何も体系が無い場合よりも簡単になるような気がしている。&lt;/p&gt;

&lt;h4 id=&quot;3.-個人のアイデンティティと機能を分離できる&quot;&gt;3. 個人のアイデンティティと機能を分離できる&lt;/h4&gt;

&lt;p&gt;仕事をしていると、他の人の仕事を見てイマイチだなーと思う事が正直たまにある。ただ、その時も結局そういった機能を備えてない、つまり反復と学習が足りてないだけで、反復と学習すれば身につくものだから、その人自体にどうこう思わないようになる。前職時代に顕著だったけど、自分は何かを達成しようと動いている時、比較的頭に血が登りやすく、今思い出すだけでも結構痛い、個人攻撃とも取れるような行動をとっていたと思う。恥ずい。ただ機能の概念を脳味噌に染み込ませるにつけ、そういう時にも冷静に行動できるようになった気がする。この部分に関してはまだまだうまいことやれる気がしている。&lt;/p&gt;

&lt;p&gt;上記は他の人のアイデンティティとの関わり方の話しだけど、この考え方は自己のアイデンティティと機能も分けておけるので、誰かから何かしら指摘を受けた際に結構素直になれるっていうのもいいところだ。自己のアイデンティティと機能が密結合になっていると、指摘された人が持つ機能の否定を個人の否定だと受け取られるケースが多く、そういう人たちには良い指摘が集まらず、もったいないなと思う。&lt;/p&gt;

&lt;p&gt;個人のアイデンティティと機能を密結合させ、突き詰めていけば、もはや誰も手が及ばないくらい物凄い機能を発達させそうな気もしているけど、機能とアイデンティティの密結合は自分にはむいてねーなと思っているのが現状です。&lt;/p&gt;

&lt;h2 id=&quot;機能を研ぎ澄まし、発動速度、マッチング精度を向上させる&quot;&gt;機能を研ぎ澄まし、発動速度、マッチング精度を向上させる&lt;/h2&gt;

&lt;p&gt;機能は精度を向上させることができる。これはつまり、「反復回数」と「学習速度」という2つの要素を向上させ、現状を成功と定義した状態に持っていける可能性と速度を上げれるという事だ。この機能の精度に加えて、マッチング精度があるように思う。&lt;/p&gt;

&lt;p&gt;目の前にある前提条件を元に、どの機能を発動させれば良い結果が得られそうか、というのがマッチングの精度。機能の精度、現状と発動させる機能のマッチング精度、の2要素に分けておくことで、今回は機能の精度が足りなかったのか、それとも現状にそぐわない機能を発動させてしまったのか、何かが上手く行かなかった場合、後から分析する時に役に立つ気がしている。&lt;/p&gt;

&lt;h2 id=&quot;無意識に発動する機能に意識的になる&quot;&gt;無意識に発動する機能に意識的になる&lt;/h2&gt;

&lt;p&gt;上記のように、機能の精度、マッチング精度を上げていくと、比較的物事が上手く進むようになる。迷わない。何度も上手くいきはじめるとこの傾向はより一層強化される。特に、価値を作って対価を貰う人になってからしばらくすると、自分がいる状況、つまりは職場の状況に合わせてこの傾向がどんどん強化されていく。最初は意識して発動させていた機能も、やがて発動コストは下がり、マッチングスピードも上がり、なんならもはやほとんど意識しないで実行できるようになる。&lt;/p&gt;

&lt;p&gt;これはとても良いことだと思っている。自分は組織として価値を作って対価を貰う人になった瞬間、ただのゴミ同然だったので、機能が充実していき、結果が出てくる過程は当時大変嬉しかったのを覚えている。&lt;/p&gt;

&lt;p&gt;また、上記は意識してつけた機能の話に特化しているけども、意識しないでつけた機能もたくさんある。「特に意識してつけたわけではないけど、効率が良いが故に無意識的に発動している機能」、そのようなタイプのほうが、意識的に身につけた機能よりも多い印象がある。&lt;/p&gt;

&lt;p&gt;例えば、目を血走らせた友達に「今週金曜日は羊を捌いて太陽の神に捧げるからナタを用意しておいてくれ」と鬼気迫る感じで言われたら、「おい、大丈夫か」ってなる。でもこの「おい、大丈夫か」ってなる際に発動してる機能がある。20 - 21世紀という自分が生きる時間的制約、日本という地理的制約を前提に発達した、「やばそうなものを嗅ぎ分ける機能」。機能の名称からだいぶ適当な香りがしているけど、要は「自分が意識せずに発達してしまった機能」って事。誰も「太陽の神とか羊を捌くとか言ってるヤツに近寄ると危ない」と感じとる機能を意識して発達させたわけではないはずだ。&lt;/p&gt;

&lt;p&gt;上の2つのタイプの機能、無意識に身についた機能、意識的に身につけたけど発動に無意識になってしまっている機能を、出くわす度にちゃんと意識してやらねばいかんなー、というのが30歳目前にして最近特に思う事。&lt;/p&gt;

&lt;p&gt;「え、おかしくない？」って自動的に考えてしまう時、「あ、それ完璧だから速攻やろうよ！」って反射的に思う時、何をベースにそれらの判断が出てきているのか、蓄積もある程度あるだけに一つ一つ真摯に向かい合う時期な気がしている(ダラダラ考え続けるっていう意味ではない)。&lt;/p&gt;

&lt;p&gt;特に自分の場合は職場も職業も変わったので、ことさらこの課題感が大きくなってるってのもある。こういう風に考えておくと、「大企業からスタートアップに転職したから今までの考え方を捨てろ！」的な雑な議論ではなく、「今まで培ってきた機能はこういうコンテクストだったから効果を発揮していた。今のコンテクストはこのように変化しているので、既存機能を捨てるのではなく、脇に除けておいて新しく機能を作ろう。その際に脇にある機能から一部借りても良い。」とかって話ができる。&lt;/p&gt;

&lt;h2 id=&quot;人間の機能とその先&quot;&gt;人間の機能とその先&lt;/h2&gt;

&lt;p&gt;ダラダラ長ったらしく書いたことは全て、戦術レベルの話だ。目的は決まっており、達成すべき目標が有り、そこに効率的に向かう手段をどのように捉えるかという問に対する自分なりの答えが「人を機能の塊と捉える」だ。&lt;/p&gt;

&lt;p&gt;恐らく、機能だけを発達させていって、それに忠実に従うのであるなら、自分は職を変えてないし、今の職場にも転職してない。なかなか言語化しづらい部分ではあるんだけど、自分はソフトウェアを書くという行為自体がとても好きだし、今の会社がやっている事は先が見えないしよくわからん事で楽しそうだったから職業を変えて職場も変えた。&lt;/p&gt;

&lt;p&gt;なんとなく好きである、ワクワクする、っていうのに従う姿勢はたぶん中学生くらいからずっと持ってて、サッカーしに高校行ったのも、大学アメリカに行ったのも、バックパッカーしてたのも、炎舞のプロ目指したのも、怪しげな外資コンサルに入社したのも、また今の会社で働いているのも、この辺りの気持ちに正直でいたことが大きく作用しているんだろうと思う。&lt;/p&gt;

&lt;p&gt;そして経験上そういう気持ちに従って動いている時は、振り返った時大体いい選択してる。こういう選択の時、やっぱり機能という考え方は弱いのかもしれないと感じている部分はある。もしかしたら複数機能を無意識に総動員して選択しているのかもしれないけど、好きである、ワクワクする、っていうのを体系的に捉えるのは難しいなと思う。&lt;/p&gt;

&lt;p&gt;冷徹に自分を機能で割っていくと、余る部分がほんのすこしだけある。&lt;/p&gt;

&lt;p&gt;その理で割り切れない残りカスこそ、自分が自分である所以である「好き」や「嫌い」や「ワクワクする」なのかもしれないというのが今思うところ。そういった説明のつかない部分は定期的に引きこもって言語化を試みている。定量的に計測しにくい上に個人的で言語化しにくく、理由無く礼賛される部分に関しては思考停止しがちなので、諦めずに今後も言語化を試みようと思う。&lt;/p&gt;

&lt;h2 id=&quot;35歳の自分へ&quot;&gt;35歳の自分へ&lt;/h2&gt;

&lt;p&gt;進捗どうですか？&lt;/p&gt;

&lt;p&gt;どうなってるかあんましよくわからんけど、がんがんソフトウェア書いていこうぜ。&lt;/p&gt;
</description>
				<pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/10/31/functional-human.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/10/31/functional-human.html</guid>
			</item>
		
			<item>
				<title>PyCon 2014でPython+EMRについて発表してきた</title>
				<description>&lt;p&gt;今週末、PyCon JPに初参加し、初技術系発表してきた。&lt;/p&gt;

&lt;p&gt;YouTubeでの発表もみたんですが、噛みまくっててヤバメな表情してるタイミングがあるんですが、あれは発表してる時間を計測しているiPhoneの電池が切れた時と、後ろに「あと5分」をお知らせする紙が上がった時です。スーパー焦った。&lt;/p&gt;

&lt;p&gt;また、全般的にテンション高めだったのは単に元気になる飲み物をキメてたからです。&lt;/p&gt;

&lt;h3 id=&quot;謝辞&quot;&gt;謝辞&lt;/h3&gt;

&lt;p&gt;PyConの運営をしてくださったみなさん、本当にありがとうございました。あのような大規模なイベントをあれだけスムーズに運営されるスキル、本当に凄いです。&lt;/p&gt;

&lt;p&gt;tagomorisさんのData Analysis Flowの図をベースに前半は説明行いました。恐らくあの図がなかったら発表前日にあのような資料を作ることはできなかったと思います。ぼんやりしている概念を図に落としこんで公開して頂き、本当にありがとうございます。(ちょっと無断利用なので行儀は良くないなと思いつつ焦りまくっていて一言入れれなかったのは反省してます。。)&lt;/p&gt;

&lt;h3 id=&quot;発表資料&quot;&gt;発表資料&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;d93ef1101e17013278dc06e915146373&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;発表サマリ&quot;&gt;発表サマリ&lt;/h3&gt;

&lt;p&gt;大体こんな感じでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「なぜその構成なのか」に焦点を置いた事例の共有

&lt;ul&gt;
&lt;li&gt;会社の個別具体的な「リソース制約」、「実現したいこと」、を紹介&lt;/li&gt;
&lt;li&gt;上記の制約と要件を実現する構成の提示&lt;/li&gt;
&lt;li&gt;各構成の概念的要素内でのポイント&lt;/li&gt;
&lt;li&gt;逃げ場のある構成、大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「入門以上」を目指したPython + EMR活用方法の共有

&lt;ul&gt;
&lt;li&gt;aws-cli最高&lt;/li&gt;
&lt;li&gt;Hiveの設定もまあまあできる&lt;/li&gt;
&lt;li&gt;Pythonのスクリプトから起動するEMR&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;

&lt;p&gt;発表すること本当に大事だなーと思いました。以下大事だと思った理由。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表後話しかけてもらえる

&lt;ul&gt;
&lt;li&gt;これは完全に人に話しかけるの苦手な自分には助かる事でした&lt;/li&gt;
&lt;li&gt;自分はエンジニアと名乗るようになって1年目なのでエンジニア系の友人があまりおらず、知り合いが増えたのは大変うれしかったです&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仕事で考えていた事がまとまるし精度が上がる

&lt;ul&gt;
&lt;li&gt;誰かに効率的に何かを伝えなければいけない状態で資料を書くとやはりまとまります&lt;/li&gt;
&lt;li&gt;また、「あれ、俺なんでこうしたんだっけ」と問いなおすいい機会だなと思いました&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反省点は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;若干オーディエンスとトークがマッチしてない感あった

&lt;ul&gt;
&lt;li&gt;最初にログ集計に関わる方に挙手お願いしたのですが部屋の中の1割くらいでした&lt;/li&gt;
&lt;li&gt;そこからさらにHadoop, Hive, EMRと行くとドンドン人数が減って行きました&lt;/li&gt;
&lt;li&gt;入門的な話はしたくなかったので細かめの内容にしたのですが、ちょっと聞きたい話にマッチしてなかったかもしれないと思いました&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;読み上げる練習あんまりしてなかった

&lt;ul&gt;
&lt;li&gt;噛んでたし、言い回しをその場で考えるのって難しい&lt;/li&gt;
&lt;li&gt;次回はもっとスラスラできるようになろうと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やっぱりカンファレンスは発表する方が聞きに行くだけよりも得るもの大きいっていうのが実感として腑に落ちました。2日目のキーノートで西尾さんが言っていたCommunicationによって盲点に気づき、人間として強化されていいくっていうのが、経験として実感できた感じになります。なので今後も何か知見が溜まってきたらどのような領域でも可能な限り公開していきたいなと思います。&lt;/p&gt;

&lt;h3 id=&quot;広告&quot;&gt;広告&lt;/h3&gt;

&lt;p&gt;Kanmuでは引き続きエンジニア募集中です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kanmu.co.jp/jobs/engineer&quot;&gt;Kanmuエンジニア採用情報&lt;/a&gt;&lt;/p&gt;

&lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;height: 240px; width: 490px;&quot; src=&quot;https://widget.wantedly.com/projects/9282/widget_h&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;なんでギネスついでる社長がでてくんだよ。。。&lt;/p&gt;
</description>
				<pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/09/15/pyconjp-2014.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/09/15/pyconjp-2014.html</guid>
			</item>
		
			<item>
				<title>MQTT as a Service sango + paho-mqtt Python</title>
				<description>&lt;p&gt;本日のMQTT(もきゅっと)の会直前に時雨堂さんがMQTT as a Service, sangoをリリースしていたので触ってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sango.shiguredo.jp/&quot;&gt;sango&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubアカウントを利用して上記サイトから無料登録する。ログインするとユーザ名、パスワードが出てくるのでメモる。
次にMQTTのPythonクライアントライブラリである&lt;a href=&quot;https://pypi.python.org/pypi/paho-mqtt&quot;&gt;phao-mqtt&lt;/a&gt;を準備。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install phao-mqtt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでphao-mqttのPythonライブラリが入るので、サンプルを元に以下のような雑プログラムを作ってみた。&lt;/p&gt;

&lt;h3 id=&quot;sub.py&quot;&gt;sub.py&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho.mqtt.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mqtt&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Connected with result code &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;achiku@github/#&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;yourname@github&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;yourpass&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;free.mqtt.shiguredo.jp&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_pw_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keepalive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pub.py&quot;&gt;pub.py&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho.mqtt.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mqtt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;yourname@github&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;yourpass&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;free.mqtt.shiguredo.jp&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;achiku@github/test_topic&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_pw_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keepalive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;[{}] Sending message to sango.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;[{}] message from pub coming through sango!&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;0.5秒おきにsango MQTT brokerにメッセージをPublishするpub.pyと、sangoが受けているメッセージをSubscribeし続けるsub.pyという形。
まずはsub.pyを起動しておく。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python sub.py
Connected with result code 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上のような表示が出れば適切にサービスに繋がり、Subscribeできてる。
次にpub.pyでメッセージをsangoに送る。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python pub.py
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending message to sango.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;sub.py側で以下のような表示が確認できるはず。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; message from pub coming through sango!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;それでは新宿であいましょう！！(時間がやばい)&lt;/p&gt;
</description>
				<pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/08/29/mqtt-sango.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/08/29/mqtt-sango.html</guid>
			</item>
		
			<item>
				<title>Golangへの道 #1</title>
				<description>&lt;p&gt;ちょっと書いてみたくなった。&lt;/p&gt;

&lt;h2 id=&quot;目標&quot;&gt;目標&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;VimでGolang書けるように環境を設定する(一旦ライブラリ管理等のベストプラクティスは無視)&lt;/li&gt;
&lt;li&gt;Golangの基礎基本を覚える&lt;/li&gt;
&lt;li&gt;最終的にGETリクエストに対して何かJSON返すサーバーを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;環境はMac OS X 10.9.4。homebrewインストール済み&lt;/li&gt;
&lt;li&gt;学習者はPython歴9ヶ月、ポインタに関する理解はポインタ演算手前まで&lt;/li&gt;
&lt;li&gt;学習者は平行/並列処理の知識無し&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;インストール&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;既に入ってるのでアップグレード。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ brew upgrade go 
==&amp;gt; Upgrading 1 outdated package, with result:
go 1.2.2
==&amp;gt; Upgrading go
==&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/go-1.2.2.mavericks.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring go-1.2.2.mavericks.bottle.tar.gz
==&amp;gt; Caveats
As of go 1.2, a valid GOPATH is required to use the `go get` command:
  http://golang.org/doc/code.html#GOPATH

`go vet` and `go doc` are now part of the go.tools sub repo:
  http://golang.org/doc/go1.2#go_tools_godoc

To get `go vet` and `go doc` run:
  go get code.google.com/p/go.tools/cmd/godoc
  go get code.google.com/p/go.tools/cmd/vet

You may wish to add the GOROOT-based install location to your PATH:
  export PATH=$PATH:/usr/local/opt/go/libex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストール後の確認&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ go version
go version go1.2.2 darwin/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;vim-plugin&quot;&gt;Vim Plugin&lt;/h2&gt;

&lt;p&gt;ざっと見てコレが一番良さそうだったので入れる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fatih/vim-go&quot;&gt;https://github.com/fatih/vim-go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の設定を.zshrcに入れる&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#for golang&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.go
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; go env GOROOT &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.vimrcに以下を追加。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set rtp+=$GOROOT/misc/vim
exe &amp;quot;set rtp+=&amp;quot;.globpath($GOPATH, &amp;quot;src/github.com/nsf/gocode/vim”)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vim開くと色々インストールされる&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vim-go: gocode not found. Installing github.com/nsf/gocode to folder /Users/achiku/.vim-go/
vim-go: goimports not found. Installing code.google.com/p/go.tools/cmd/goimports to folder /Users/achiku/.vim-go/
vim-go: godef not found. Installing code.google.com/p/rog-go/exp/cmd/godef to folder /Users/achiku/.vim-go/
vim-go: oracle not found. Installing code.google.com/p/go.tools/cmd/oracle to folder /Users/achiku/.vim-go/
vim-go: golint not found. Installing github.com/golang/lint/golint to folder /Users/achiku/.vim-go/
vim-go: errcheck not found. Installing github.com/kisielk/errcheck to folder /Users/achiku/.vim-go/
vim-go: gotags not found. Installing github.com/jstemmer/gotags to folder /Users/achiku/.vim-go/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おなじみのHello, Worldからはじまる。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, World!\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vimで編集してて、import &amp;quot;fmt&amp;quot;書いた後に:wでファイル保存したらその部分だけ削除されて、なんじゃこりゃってなってたけど、どうやら先ほど入れたVimプラグインが使ってるパッケージを自動検出してソースをフォーマットしてくれているらしい。逆にimport文ナシで上のソースを書いて保存したらimport &amp;quot;fmt&amp;quot;の部分は自動で追記された。IDEみたい。&lt;/p&gt;

&lt;p&gt;書いた後に、:GoBuildでビルド。:GoRunでビルドして実行。便利。&lt;/p&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;Pythonに比べるとカッコが多い気がするので以下のVimプラグインを入れておく事をオススメ。設定はデフォルトでも十分。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jiangmiao/auto-pairs&quot;&gt;https://github.com/jiangmiao/auto-pairs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;と思ったけど、自分が常用しているKaoriya-vimの日本語入力(インサートモードから抜けた時のIMEモードを記録しておく設定)とかち合うので以下にした。数時間しか使っていないがauto-pairsの方が高機能なイメージ(関数書いた後に{}を書いて改行すると自動的にカーソルがいい感じの位置に来たり、等)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Raimondi/delimitMate&quot;&gt;https://github.com/Raimondi/delimitMate&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;基礎基本&quot;&gt;基礎基本&lt;/h2&gt;

&lt;p&gt;とりあえず以下を全部写経して覚える。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gobyexample.com/&quot;&gt;https://gobyexample.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだ全部は終わってないけど、channelまでは比較的サクサク進む。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/achiku/syakyou/tree/master/golang/gobyexample&quot;&gt;https://github.com/achiku/syakyou/tree/master/golang/gobyexample&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;golangっぽいところ1&quot;&gt;Golangっぽいところ1&lt;/h2&gt;

&lt;p&gt;先述のGo By Example、goroutine、channel、selectあたりからGolangっぽいところが出てくる気がする。自分自身平行/並列処理系はまったく分かってないので、多分この辺りを読んで実際書いていかないと難しい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jxck.hatenablog.com/entry/20130414/1365960707&quot;&gt;Go の並行処理&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとエラーの扱い方もJavaやPythonのExceptionに慣れている身からすると面白かった。Golangに関しての記述はなかったけど、「エラーハンドリング」という領域に関しては「コーディングを支える技術」で語られていたので再度読み直したいと思う。&lt;/p&gt;

&lt;h2 id=&quot;golangっぽいところ2&quot;&gt;Golangっぽいところ2&lt;/h2&gt;

&lt;p&gt;型、型推論が非常に便利な気がする。どこか小さく領域を見つけて実戦に投入してみようと決意した。&lt;/p&gt;

&lt;h2 id=&quot;新しい言語を学ぶということに関して&quot;&gt;新しい言語を学ぶということに関して&lt;/h2&gt;

&lt;p&gt;新しい言語を学ぶ際は、「やりたい事も挙動も確定している何か」ってのを題材に、ガッツリ作るのがやっぱりいい気がする。言語を使う事だけに集中できる。Vの方はRFCを何個か暗記してるからソレを実装するって言ってたし、「コーディングを支える技術」には新言語を学ぶときは特定のアルゴリズムを新しい言語で実装する、という事が書いてあった。&lt;/p&gt;

&lt;p&gt;まぁ、どちらもバケモノなので、自分は自分に合った何かを探そうと思います。&lt;/p&gt;
</description>
				<pubDate>Sun, 17 Aug 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/08/17/golang-01.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/08/17/golang-01.html</guid>
			</item>
		
			<item>
				<title>Hadoop Conference Japan 2014 に行ってきて感じた事まとめ</title>
				<description>&lt;p&gt;さる2014/07/08、Hadoop Conference Japan 2014が開催されました。1ヶ月以上もアウトプットできなかった理由はおいといて、基調講演には出れていないのだけれど、いくつか回ったセッションを総合して、感じた事をまとめておきたいと思います。前提として、自分はHadoopの素人且つエンジニア1年目なので、鋭いマサカリ投げられると失禁したまま気絶する事が予想されますが、事実と異なる事書いてしまっていたり、それちがうんじゃねーのか、的な指摘は是非コメントください！間違ってる事書いておくの嫌ですし、他の人達がどう考えているのか知りたいです。&lt;/p&gt;

&lt;h2 id=&quot;見て回ったセッション&quot;&gt;見て回ったセッション&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SQLによるバッチ処理とストリーム処理 &lt;a href=&quot;http://www.slideshare.net/tagomoris/hcj2014-sql&quot;&gt;資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Deeper Understanding of Spark Internals &lt;a href=&quot;http://www.slideshare.net/hadoopconf/japanese-spark-internalssummit20143&quot;&gt;資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spark1.0での動作検証 - Hadoopユーザ・デベロッパから見たSparkへの期待 &lt;a href=&quot;http://www.slideshare.net/hadoopxnttdata/apache-spark-nttdatahcj2014&quot;&gt;資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Evolution of Impala - Hadoop 上の高速SQLエンジン、最新情報 &lt;a href=&quot;http://www.slideshare.net/Cloudera_jp/evolution-of-impala-hcj2014&quot;&gt;資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;並列SQLエンジンPresto - 大規模データセットを高速にグラフ化する方法 &lt;a href=&quot;http://www.slideshare.net/frsyuki/presto-hadoop-conference-japan-2014&quot;&gt;資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;思ったこと&quot;&gt;思ったこと&lt;/h2&gt;

&lt;p&gt;このカンファレンスに出て思ったことが3つある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「大規模データ処理」という言葉の細分化&lt;/li&gt;
&lt;li&gt;SQL系のDSLが支配的になってきてる背景&lt;/li&gt;
&lt;li&gt;リアルタイムデータ処理の先にあるもの&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これら思ったことについて順にまとめていく。&lt;/p&gt;

&lt;h2 id=&quot;「大規模データ処理」という言葉の細分化&quot;&gt;「大規模データ処理」という言葉の細分化&lt;/h2&gt;

&lt;p&gt;今回一連のセッションを聞いていて一番深く感じ入ったのは、タゴモリさんの公演「SQLによるバッチ処理とストリーム処理」に出てきた分類表。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/36733256?startSlide=29&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/tagomoris/hcj2014-sql&quot; title=&quot;Batch processing and Stream processing by SQL&quot; target=&quot;_blank&quot;&gt;Batch processing and Stream processing by SQL&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/tagomoris&quot; target=&quot;_blank&quot;&gt;SATOSHI TAGOMORI&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;大規模なデータを処理している人たちにとってみたらもはやあたりまえの事なのかもしれないですが、自分の中でこのような分類がなされていなかったため、今後何をどこで使っていくのか、ということを考える際に凄い参考になりました。&lt;/p&gt;

&lt;h4 id=&quot;batch&quot;&gt;Batch&lt;/h4&gt;

&lt;p&gt;少し前の時代、大量のデータに対して実行される高いレイテンシを持つ処理(週単位、月単位とか)を、安全確実/自動リカバリ付きでコモディティHW上でも実行できるYARNベースの夜間バッチが「所謂大規模データ処理」のメインストリームだったように思えます。(YARNベース、ちょっと言葉おかしいかもしれないけど、リソース管理、スケジューリング、投機的実行を管理しているのがYARNなのでHiveもJavaやその他言語で書いたMapReduceも含む)。そこで集計されたサマリ値をRDBMSに投入し、日別の実績推移を確認できる。これで今までRDBMSで処理していたバッチ処理というものを、より速く確実にスケールする構成で実行できるようになっていった。これが表のBatch部分。&lt;/p&gt;

&lt;h4 id=&quot;short-batch-(interactive-query)&quot;&gt;Short Batch (Interactive Query)&lt;/h4&gt;

&lt;p&gt;次はShort Batch部分。時代は移り変わり「既存RDBMSで捌ききれなかったような大量データを安全確実に集計処理できる」から一歩進んで「既存RDBMSで捌ききれなかったような大量データを、軽快に、エンジニア以外の人が分析したい」という要望が発生してきている。至極当然な流れで、結局大量のデータを処理するのは、膨大なファクトから商売に対する示唆を得て実際の施策成功精度向上/仮説検証プロセスの高速化であり、事実から示唆を絞り出すのはエンジニアよりも現場で商売を回している人達の方がその商売独自の勘所もある。こういった要望に対して、Hadoopで集計してRDBMSに入れて、というプロセスで対応出来ないことも無い。対応出来ないことも無いけど、ちょっと想定と異なる軸で見ようとすると新規集計バッチを作らなければいけなくなったり、例えばささっと作ったHiveQLを作って流さないといけなかったりする(流石にアドホックにMapReduceを書く事はあまり無いような気がする)。そうなると、Hiveはもともと高いレイテンシ向けの処理用に作られており、JVMの起動、リソース確保、スケジューリング、MapReduceアルゴリズムへの変換、等の処理で起動/実行のオーバーヘッド大きいため、インタラクティブに示唆を！という要望にはあんまりマッチしなかったりするように思う。shibとかがこの領域で頑張っていた雰囲気。&lt;/p&gt;

&lt;p&gt;上記のような若干無茶な要望に対応するようにMPP(Massively Parallel Processing)系のクエリエンジンが勃興してきている。始祖はGoogleが2010年に出した&lt;a href=&quot;http://research.google.com/pubs/pub36632.html&quot;&gt;Dremel: Interactive Analysis of Web-Scale Datasets&lt;/a&gt;という論文。この辺りをオープンソースで実装したプロダクトで有名なのがImpala。なぜHiveではないのか、なぜImpalaを作ろうと思ったのか、その辺りの歴史の変遷はCouderaさんの&lt;a href=&quot;http://www.cloudera.co.jp/blog/20140107-impala-v-hive.html&quot;&gt;この記事&lt;/a&gt;に詳しく書いてあり大変勉強になりました。MapReduceを利用せず、Hadoopコンポーネントが提供するYARNを利用せず、だがしかし分散ストレージHDFSとHiveの既存DDLは有効活用し、よりインタラクティブなクエリを実行できるようなプロダクトになっている。その他にもMPP系エンジン括りでいくと、Presto、Apache Drill等が代表選手。特にPrestoはその出生の原因がこの、「エンジニアが頑張らなくてもインタラクティブに分析したい欲」をよく表しており、やっぱエンジニア以外がサクサク分析できてなんぼ感がある。&lt;a href=&quot;http://www.publickey1.jp/blog/13/facebooksqlprestomapreducehive10.html&quot;&gt;Facebook、分散SQLエンジン「Presto」公開。大規模データをMapReduce/Hiveの10倍効率よく処理すると&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ただ、高レイテンシ向けに設計されたHadoop上のHiveと低レイテンシを狙ったImpala/Presto/Drillを比較して10倍効率が良いって言うのには若干抵抗がある。みんなちがって、みんないい、と言いたい。)&lt;/p&gt;

&lt;p&gt;正直Short BatchよりもInteractive Queryingという言葉の方が自分的にはしっくりきている。MPPエンジンはrepeatedlyさんがまとめているこの記事が最高にまとまってて参考になる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://repeatedly.github.io/ja/2014/07/mpp-on-hadoop-redshift-bigquery/&quot;&gt;MPP on Hadoop, Redshift, BigQuery&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;stream-processing&quot;&gt;Stream Processing&lt;/h4&gt;

&lt;p&gt;最後に表のStream部分。これはInteractive Queryより更に踏み込んでおり、自分もまだ手元に環境作って試せていないのですが、Streamとして送られてくるデータをストレージに書き込む前に集計してしまう代物らしい。ニアリアルタイムとか、5分毎のバッチ、そういう甘い話ではなく、流れてくるデータがストレージに書き込まれる前に集計されて記録される。そしてタゴモリさんが作っているNorikraは、集計の記述にSQLライクな言語を利用できるという。&lt;/p&gt;

&lt;p&gt;すごい未来感(小並)。&lt;/p&gt;

&lt;p&gt;ただ、商売に直結するか否かに関しては、自分の中でまだ疑問も残っている(詳細後述)。LINEさんでは小さいバジェットで広告を配信した際でもリアルタイムで集計できていれば、追加で枠を買ったり等の判断を行える為便利だ、という話をされていた。&lt;/p&gt;

&lt;p&gt;あと印象に残った言葉は、「再実行が難しい」という部分。確かにリアルタイムで、データがPersistentな形になる前に集計しているので、コケた際に再度集計っていうのが難しそう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch&lt;/strong&gt;, &lt;strong&gt;Interactive Query&lt;/strong&gt;, &lt;strong&gt;Stream Processing&lt;/strong&gt;という、今まで「大規模データ処理」で一括りにされていた部分が細分化され、それぞれの領域で活躍できるソフトウェアがある、用途に合わせて選ぶべし、というのは多分今回のカンファレンスで一番響いた部分。&lt;/p&gt;

&lt;p&gt;次。&lt;/p&gt;

&lt;h2 id=&quot;sql系のdslが支配的になってきてる背景&quot;&gt;SQL系のDSLが支配的になってきてる背景&lt;/h2&gt;

&lt;p&gt;コレはやっぱり感じた。Norikraもそうだけど、ImpalaもPrestoもSQL。Sparkも今までのプログラミングモデル(メソッドチェーン的なヤツ)からSQL系のDSLに乗り換えていく、という話をされていた。&lt;a href=&quot;http://www.infoq.com/jp/news/2014/04/databricks-spark-sql&quot;&gt;DataBricks，Sparkで構造化データを操作するSpark SQLを発表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これはなんとなく、納得がいく気がしている。たぶん以下三点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;既存知識流用できる(次々出てくるDSLに脳味噌を対応させていくより、既に有る脳内のモデルを再利用できる方が客はつく気がする。客とはこの場合ソフトウェアのユーザを意味する。)&lt;/li&gt;
&lt;li&gt;宣言的記述のできる言語はとりあえず楽(データを取得する為の手続き/集計の最適化やEventual Consistentとか考えながらよりも、宣言的に欲しいデータの形だけ描いて、あとはオプティマイザに任せる、っていうのが楽。そこまで甘くはないけど、でも無いより全然楽。)&lt;/li&gt;
&lt;li&gt;ビジネスサイドももっとデータ弄りたい(なにげにコレが一番でかいのではないかという気がする。仮説を立てるのも、検証するのもビジネスサイドで実施することが多いし、彼らが自分たちで集計できれば、エンジニアサイドとのコミュニケーションコストも下がる。)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分はSQLかなり好きなのでこの流れは個人的に嬉しいです。&lt;/p&gt;

&lt;h2 id=&quot;リアルタイムデータ処理の先にあるもの&quot;&gt;リアルタイムデータ処理の先にあるもの&lt;/h2&gt;

&lt;p&gt;ココは本当に未来な感じだし、自分もまだよく考えが練れていない。&lt;/p&gt;

&lt;p&gt;システムの異常監視、とある条件を設定した閾値を超えた場合通知とかには多分凄いマッチする気がする。条件設定した以上のエラーが吐かれていたら通知、スケールアウトする、とか。&lt;/p&gt;

&lt;p&gt;ただ、若干抽象的になってしまうけど、「人間の意思決定」がどこかに挟まるとその力は途端に弱くなってしまうな、という印象。人間の意思決定、もう少し踏み込むと「会社の意思決定」というのはやはり時間がかかるため、5分に1回でいいのでは、という素朴な疑問が出てきてしまう。&lt;/p&gt;

&lt;p&gt;先ほどのシステム監視の例は自分がプログラムを書く側だからすっと思いつく例なのかもしれない。もしかしたらビジネスサイドの人々にこういう機構もあるよ、という話をしたらリアルタイムデータ処理が力を発揮する場所を思いつくのかも。&lt;/p&gt;

&lt;p&gt;今自分が会社で扱っている商売の範囲だと、「在庫(枠)と広告(CPM, CPC, CPM)の全体的なポートフォリオをリアルタイムで最適化していけるから最高の利益を出せるんです」的な領域では力を発揮しそう。いくらで買ったどの枠にどういう属性を持っている人が来た時にこの広告を出す、というのを決めるパラメタを、リアルタイムで実績を反映させて更新し続けていく仕組み。DSPでもリアルタイムに「どの広告をビットレスポンスとして返すのか」を決める内部的なパラメタにフィードバックを行っているのだろうか。DSPの仕組みはなんとなく把握しているけど、かの仕組みにリアルタイムに何かを集計して得になる部分をしっかりイメージできない。修行不足である。&lt;/p&gt;

&lt;p&gt;こういった仕組を、SQLライクなDSLを持ったStream Processing系ソフトウェアを使う事でより柔軟にできるのでは、という仮説はある。&lt;/p&gt;

&lt;p&gt;「人間の意思決定」を挟まないところには非常に有効だが、リアルタイムに集計されるグラフを見て人がその場で値千金の意思決定を秒速でする、というのは、どうもあまりしっくり来てない。しっくりきてないんだけど、この領域はまだ見ぬ応用方法が色々ありそうでとっても面白そうだなーー、と思いながら新橋から帰りました。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最後になりますが、一ヶ月も経ってなんだよ、という感じではありますが、会場の準備をしてくださった方々、公演してくださった方々、本当にありがとうございました！あの大規模なカンファレンスが無料という奇跡、本当に凄いです。&lt;/p&gt;
</description>
				<pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/08/11/hcj.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/08/11/hcj.html</guid>
			</item>
		
			<item>
				<title>PyCon US 2014 後で見るもの一覧</title>
				<description>&lt;p&gt;個人的に興味を持ったセッションを抜粋。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pyvideo.org/category/50/pycon-us-2014&quot;&gt;セッション一覧&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2660/advanced-techniques-for-web-functional-testing&quot;&gt;Advanced techniques for Web functional testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2630/designing-djangos-migrations&quot;&gt;Designing Django&amp;#39;s Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2657/diving-into-open-data-with-ipython-notebook-pan-0&quot;&gt;Diving into Open Data with IPython Notebook &amp;amp; Pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2652/django-the-good-parts&quot;&gt;Django: The good parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2674/getting-started-testing&quot;&gt;Getting Started Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2564/mrjob-snakes-on-a-hadoop&quot;&gt;mrjob: Snakes on a Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2580/tdd-for-web-applications-from-scratch&quot;&gt;TDD for web applications, from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2584/straightening-out-angularjs-with-python&quot;&gt;Straightening Out AngularJS with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2593/python-scraping-showdown-a-performance-and-accur&quot;&gt;Python Scraping Showdown: A performance and accuracy review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/2615/python-32-web-development-with-pyramid&quot;&gt;Python 3/2 Web Development with Pyramid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;カンファレンス行かなくても全然知識は得れる。カンファレンス行くのはやっぱ人に直接会ってお礼とか言う為なんだろうなぁ。
とにかくPyCon USはセッション沢山あって楽しげ。今週末は引きこもってビデオみよっと。USでも台北でもいいから行きたい(遊びに)。&lt;/p&gt;
</description>
				<pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/04/15/pycon-us-2014.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/04/15/pycon-us-2014.html</guid>
			</item>
		
			<item>
				<title>Django + py.test + WebTest</title>
				<description>&lt;p&gt;以前書いた&lt;a href=&quot;http://achiku.github.io/2014/04/04/road-to-django-best-practice.html&quot;&gt;Django Best Practice への道 #2&lt;/a&gt;の補足を書きます。&lt;/p&gt;

&lt;p&gt;以下の課題を解決するために実施したこととなります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django Webアプリの機能テストはpy.testとWebTestを同時に使いたいけどunittest形式は嫌&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;分解していきます。&lt;/p&gt;

&lt;h2 id=&quot;djangoのテストにpy.testを使う&quot;&gt;Djangoのテストにpy.testを使う&lt;/h2&gt;

&lt;p&gt;以下のライブラリを利用する。
(なぜpy.testを選択したかは&lt;a href=&quot;http://achiku.github.io/2014/04/04/road-to-django-best-practice.html&quot;&gt;コチラ&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pelme/pytest_django&quot;&gt;pelme/pytest_django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とにかくparameterizedテストで同一処理 x 別データパターンのテストを効率よく書きたかったので、py.testを選択。また、fixtureという仕組みを使い、テストデータやモックを効率よく各テストに注入できるのも嬉しいところ。&lt;/p&gt;

&lt;h2 id=&quot;djangoのテストにwebtestを使う&quot;&gt;DjangoのテストにWebTestを使う&lt;/h2&gt;

&lt;p&gt;以下のライブラリを利用する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kmike/django-webtest&quot;&gt;kmike/django-webtest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを利用する目的は前回のポストで書いた「機能テスト」で利用するためです。機能テストはレンダリングされたHTMLも含む形でテストをしたい。一般的に利用されるDjangoのテストクライアントは、どのテンプレートが使われたか、テンプレートに渡るcontext variablesが正しいか、をチェックするものなので、カンムで想定している機能テストに関してはそもそも出番じゃない。よって、機能テストを実施するにはWebTestを利用することとしています。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codeinthehole.com/writing/prefer-webtest-to-djangos-test-client-for-functional-tests/&quot;&gt;Prefer WebTest to Djangos test client for functional tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;unittest形式が嫌&quot;&gt;unittest形式が嫌&lt;/h2&gt;

&lt;p&gt;そんなに毛嫌いしているわけではないのですが、py.testの機能をフルに使おうと思うと、unittest.TestCaseを継承しているテストクラスでは色々具合がよくない(parameterizeアノテーションが使えなかったり、fixture使えなかったり)。&lt;/p&gt;

&lt;p&gt;そこでWebTestも含めて全てpy.test形式でつくろうと思ったのですが、django_webtestパッケージ内のWebTestは既にdjango.test.TestCaseを継承しており、unittest.TestCaseを継承しているので、そのままではpy.test形式で使えない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kmike/django-webtest/blob/master/django_webtest/__init__.py&quot;&gt;django-webtest/django_webtest/__init__.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっと悩んで諦めようかなとも思ったのですが、WebTestを使うために必要な部分はなんとdjango_webtest.WebTestMixinというクラスに切りだされ、django_webtest.WebTestは、django_webtest.WebTextMixinとdjango.test.TestCaseをmixinしたものだという事に気づきました。&lt;/p&gt;

&lt;p&gt;ということは、unittestを脱してDjangoでWebTestを簡単に使うには、このdjango_webtest.WebTestMixinだけ切り出して使えばいけるのでは、、という事でconftest.pyに以下のように設定してみたらすんなり使えました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django_webtest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestMixin&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_patch_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renew_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前回掲載したURLに対するGETのスモークテストのサンプルでいくと、&lt;/p&gt;

&lt;p&gt;&lt;em&gt;apps/appA/tests/conftest.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django_webtest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestMixin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tests.factories&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AdminUserFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalUserFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_patch_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renew_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdminUserFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalUserFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;apps/appA/tests/test_url.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hamcrest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@pytest.mark.django_db&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;login_user, url, message, status_code&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン詳細&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupon/add&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポンの登録&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/?status=3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupons/1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポン詳細&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/coupon/add&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;クーポンの登録&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_coupon_urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;シンプル！&lt;/p&gt;

&lt;p&gt;これを発見した時はライブラリのソースコードに潜り込んで何かを自分の思い通りに動かせた！しかもまだ誰も見つけてない！と非常にうれしかったのですが、より洗練されたやり方が以下に紹介されていました(フランス語読めないけどコードは読める)。世の中甘くないっす。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mathieu.agopian.info/presentations/2013_09_djangocong/&quot;&gt;PyTest et WebTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;django.test.TestCaseを継承しない、という選択をしたのですが、この選択の副作用として、Djangoにデフォルトで備わっている便利なassertionが使えなくなってしまう、という点があります。&lt;/p&gt;

&lt;p&gt;弊社ではPyHamcrestを利用することでなんとなく回避していますが、以下にDjangoデフォルトのassertionをpy.testの名前空間にぶっこむ事で回避するという実装があり、これはこれですごい便利だなぁと思ってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/pfctdayelise/funcargs-other-fun-with-pytest&quot;&gt;Funcargs &amp;amp; other fun with pytest&lt;/a&gt;
P12に記載あり&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;py.testとWebTestはDjangoとも組み合わせて使えますし、なんならテストを書くのが少し楽になる気がしています。&lt;/p&gt;
</description>
				<pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/04/14/django-pytest-webtest.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/04/14/django-pytest-webtest.html</guid>
			</item>
		
			<item>
				<title>Django Best Practice への道 #3</title>
				<description>&lt;p&gt;DjangoのWebアプリを開発している際、リファクタ/テスト拡充のために集めた情報をまとめます。本記事は三部作の三つ目となります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/01/road-to-django-best-practice.html&quot;&gt;#1 Djangoプロジェクト/アプリケーション/設定ファイル構成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/04/road-to-django-best-practice.html&quot;&gt;#2 Djangoテスト戦術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/14/django-pytest-webtest.html&quot;&gt;#2 補足編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/07/road-to-django-best-practice.html&quot;&gt;#3 Django Model/View/From/Template戦術&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;書くこと&quot;&gt;書くこと&lt;/h2&gt;

&lt;p&gt;Djangoの基本的な構成要素である、models.py, views.py, urls.py, forms.pyに関して、最初から知ってればよかったと思った事を書いていきます。だいぶ文章にもっさり感と字が多い感がでてますが、自分の言葉で説明することで理解を深めるという目的もあるのでご容赦ください。&lt;/p&gt;

&lt;p&gt;あと、是非意見が欲しいっす。Django使ってる人日本に沢山いるはずなのにこの類の情報ってあんまり無いイメージがあり、以下に書いてある事を考えている人たちとお話してみたいっす(当たり前過ぎてそんなもの書く価値ねぇよ、な場合はすみません)。&lt;/p&gt;

&lt;h1 id=&quot;前提&quot;&gt;前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;既に本番リリースされてる&lt;/li&gt;
&lt;li&gt;Django 1.5で作られてる&lt;/li&gt;
&lt;li&gt;中/小規模Webアプリケーション(テーブルサイズ10 - 20)&lt;/li&gt;
&lt;li&gt;開発/運用1人(achiku), アドバイザー/レビューアー1人(moquada)&lt;/li&gt;
&lt;li&gt;バックエンド処理ロジックは比較的シンプル&lt;/li&gt;
&lt;li&gt;Celeryを使った非同期タスクとして動く処理がある&lt;/li&gt;
&lt;li&gt;JSはクリティカルな処理では使ってない(表示整形くらい)&lt;/li&gt;
&lt;li&gt;トラフィックは少ない&lt;/li&gt;
&lt;li&gt;インフラはAWS(VPC + ELB + EC2 + RDS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;urls.py&quot;&gt;urls.py&lt;/h1&gt;

&lt;h2 id=&quot;役割&quot;&gt;役割&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;URLとViewの紐付け&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;urls.pyは本当にこれだけを担えば問題なし。逆にこの役割以外の事をやらないように現在開発をしている。urls.pyにQuerySetが書いてあったり、ロジックが書いてあったりするのは見通しが悪く、好みではない。楽に書けるからいいじゃなない！という意見もあるが、書く時楽になる(≒スピードアップ)と、その後の見通しの悪さを比べたら、あまり割のいいトレードオフではないと思う。なぜなら、この部分にロジック書くのも、views.pyにロジック書くのも労力的に大差無いから大してスピードアップしない。&lt;/p&gt;

&lt;p&gt;今後上記基本姿勢を変更した方が良いか否かは、その時のコンテクストに合わせて適切に判断したい。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/http/urls/&quot;&gt;URL dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/misc/design-philosophies/#url-design&quot;&gt;Django Design Philosophies: URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;urls.pyを書く際に一番悩むのは前からずっとURL設計の部分。&amp;quot;Cool URLs don&amp;#39;t change.&amp;quot;とはよく言ったもので、ここをしっかりやろうとするとそれなりに時間が必要であった。まだイマイチしっくり来ていない部分が多く、今はテンプレみたいなものが欲しい。こういう場合はこう、みたいな。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/Provider/Style/URI&quot;&gt;Cool URIs don&amp;#39;t change&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとはAPPEND_SLASHという仕組みに注意することと、ちゃんと名前をつけてreverseで引けるようにするってことぐらいな気がします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/settings/#append-slash&quot;&gt;APPEND_SLASH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なぜAPPEND_SLASHなのか。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Technically, foo.com/bar and foo.com/bar/ are two different URLs, and search-engine robots (and some Web traffic-analyzing tools) would treat them as separate pages. Django should make an effort to “normalize” URLs so that search-engine robots don’t get confused.  &lt;a href=&quot;https://docs.djangoproject.com/en/dev/misc/design-philosophies/#url-design&quot;&gt;Django Design Philosophies: URL&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;forms.py&quot;&gt;forms.py&lt;/h1&gt;

&lt;h2 id=&quot;役割&quot;&gt;役割&lt;/h2&gt;

&lt;p&gt;いくつかforms.pyを書いてみて、コイツの役割は大体以下の2点に集約されるように思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTMLのform用に「どの項目を、どのような色や形で、どの順序で」表示するかを司る&lt;/li&gt;
&lt;li&gt;ユーザ入力のバリデーションを行う(DBの制約で行える部分以外で)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下formsの役割ではない(少なくともformsに役割として課さないほうがいいなと思う)事。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;models側で制約をかけてるのに、forms側でも同じ制約をかける(e.g. 文字数制限、等)&lt;/li&gt;
&lt;li&gt;データ登録/編集のロジック(複数モデルを扱いながら)を記述する &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;担うべき役割&quot;&gt;担うべき役割&lt;/h2&gt;

&lt;p&gt;まず大前提としてformsの中に書くforms.Formを継承しているカスタムクラスは大きく2つに分類できる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;modelと密接に結びついているもの(e.g. Blogのエントリー, コメント、本の著者名、等)&lt;/li&gt;
&lt;li&gt;modelと密接に結びついていないもの(e.g. お問い合わせフォーム、オブジェクトのIDをhidden属性つけてサーバサイドにPOSTしたい時、等)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1つ目に関しては断固としてforms.ModelFormを使い、Metaクラス内のmodel属性で対象のmodelをバインドし、fields属性で表示する項目を指定、widgetsでスタイル用のclassを指定、という鉄板の流れで作るのがいいと思う。そして、models.py内で定義されるModelクラスのverbose_name, help_textをしっかり書く。こうすることで、「基礎的な制約と項目説明に関してはModel側で、複雑な制約と表示形式はForm側で」という役割分担が明確になる。一時期弊社内では、Model側で定義している制約を再度Form側で定義しており、Model側を修正したらForm側を修正し、そのFormが継承されているFormを修正し、という、まぁ、端的に言えば大変無駄な作業が発生していた。&lt;/p&gt;

&lt;p&gt;「基礎的な制約はModel側で」という事にしているが、じゃあ「複雑な制約」ってなんなんだという基準は以下3つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modelの制約(≒DBの制約)だけでは不十分な要件がある場合(e.g. 文字列を保存したいが、hoge_で始まる文字列は弾きたい場合、等)&lt;/li&gt;
&lt;li&gt;1モデルの複数項目に渡って検証する必要が有る場合(e.g. 開始日は終了日の前でなければならない、等)&lt;/li&gt;
&lt;li&gt;過去に登録されたレコードとの整合性を検証する必要が有る場合(e.g. 購入のリクエストで在庫数を確認する、等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もちろんmodelにもカスタムバリデーターを登録することは可能だけど、現時点ではしていない。理由は、DjangoのmodelはどちらかというとRDBMSにおけるテーブルのPython表現っぽい、という風にとらえているから。modelって名前、ややこしいね。もし本当にpersistent storageレベルで必要なバリデーションがあるのであれば、それはpersistent storageレベルで設定されるべきな気がしている(Oracleのcheck制約とか、MySQLのENUM型とか)。それはPython(Django ORM)以外からデータが扱われる事があったとしても適切にデータの整合性を守ってくれることとなる。&lt;/p&gt;

&lt;p&gt;上記をそれとなく守って現在は開発している。が、まだあまり納得はいってない。この部分の方針は随時更新していきたいです。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/forms/modelforms/&quot;&gt;Creating forms from models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2303268/djangos-forms-form-vs-forms-modelform&quot;&gt;Django forms.Form vs forms.ModelForm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3828025/django-advantage-forms-form-vs-forms-modelform&quot;&gt;Django Advantage forms.Form vs forms.ModelForm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2つ目の「modelと密接に結びついていないもの」はそこまで出番が無いように思える。これに関してはforms.Formを利用して素直に必要な項目と、項目に対する制約を記述すればいいと思う。大して言うことは無い。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/forms/&quot;&gt;Working with forms&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;担わない方がいいと思う役割&quot;&gt;担わない方がいいと思う役割&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;models側で制約をかけてるのに、forms側でも同じ制約をかける(e.g. 文字数制限、等)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上記は「担うべき役割」でも説明したように、やらない方が得する事が比較的明確だと思っている。問題は以下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;データ登録/編集のロジック(複数モデルを扱いながら)を記述する&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ココは賛否両論あり得ると思う。上記のような抽象的な話ではなく、forms.FormPreviewのdoneメソッドの話なのかもしれない(普通のModleFormやForm内でデータ変更を実装することはほぼ無いと思う)。上記でFormが担うべき役割をある程度明確にしたのに、いきなりここでデータの変更をされる、というすごい気持ち悪い状態になる。「データをどこで変更しているのか」を考える時に見なければいけない範囲が格段に広がるので、コードをたどるのが非常にダルくなる。が、Previewがどうしても必要なんだ！という場合もある。その場合は涙をのんでFormPreviewを使う(ちなみにデフォルトではFormPreviewではFileFieldはプレビューできない)。非常にダルい。ダルいのでそれをCBVにしようってのが以下のライブラリ。まだセキュリティー含めて検証中で実戦に投入はできていないが、CBVとしてPreview機能を実装しているので、Formの中にデータ変更処理が入る事なく、いい感じで書けそうな気がしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ryankask/django-cbv-formpreview&quot;&gt;django-cbv-formpreview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FileFieldもプレビューできるようにする実装のサンプル。これはそのまま実戦投入はできそうだけど、実装のコンセプトとして参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/razum2um/django-file-formpreview&quot;&gt;Django File FormPreview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DjangoのFormについては泣かされた部分も多いのでだいぶ長くなってしまいましたが、現状こんな感じです。&lt;/p&gt;

&lt;h2 id=&quot;form関連のオススメライブラリ&quot;&gt;Form関連のオススメライブラリ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/maraujop/django-crispy-forms&quot;&gt;django-crispy-forms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;form関連のオススメしないライブラリ&quot;&gt;Form関連のオススメしないライブラリ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/maraujop/django-crispy-forms&quot;&gt;django-bootstrap-toolkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パフォーマンス問題が発生するケースがある。おそらくfieldに直接bootstrap filterを適用する場合。弊社ではコレが発生したので利用を取りやめました。ライブラリの利用は必ずOpenなIssueを確認し、作者に改善に意志があるかを見てからにしようと心に誓った出来事です。
&lt;a href=&quot;https://github.com/dyve/django-bootstrap-toolkit/issues/103&quot;&gt;Performance issue : to many get_template&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;models.py&quot;&gt;models.py&lt;/h1&gt;

&lt;h2 id=&quot;役割&quot;&gt;役割&lt;/h2&gt;

&lt;p&gt;ここもまだまだしっくりきてる、とは言えない部分が多いのですが、以下のような感じだと思ってる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DjangoにおけるActiveRecordパターンを担う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デザインパターン便利。名前言うだけでなんか賢く見えるし。でも、これだとActiveRecordパターンを正確に理解できてないといけないし(自分はそこまで理解してない)、理解するまで何か書けないというのは辛いので以下、自分の言葉で表すとこうなります、というのをやってみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RDBMSにおけるテーブルのPython表現&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;参考&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.martinfowler.com/eaaCatalog/activeRecord.html&quot;&gt;Active Record by Martin Fowler&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;担うべき役割&quot;&gt;担うべき役割&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1モデルが表現する1テーブルの各属性について責任を持って更新管理する&lt;/li&gt;
&lt;li&gt;1モデルが表現する1テーブルへの問い合わせに責任を持つ&lt;/li&gt;
&lt;li&gt;1モデルが表現する1テーブル内にある属性から導出される、そのモデルの属性について責任を持つ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;順に解説していきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1モデルが表現する1テーブルの各属性について責任を持って更新管理する&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これはDjango ORMが勝手にってくれることなので特に言う事ないです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1モデルが表現する1テーブルへの問い合わせに責任を持つ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これもDjango ORMが勝手にってくれることなので特に言う事ないです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1モデルが表現する1テーブル内にある属性から導出される、そのモデルの属性について責任を持つ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大事だなと思ったのはこの3つ目の役割と、3つ以外の役割をmodelに任せないこと、だと思うのでちょっと解説。まずはこの3つ目の役割の具体例として、例えば、何かの記事を書く機能があったとして、その記事は著者と承認者が両方チェック完了したらオンライン上に公開可能になる、という要件を仮定します。その要件からざっくり以下のmodelを作成(verbose_name, help_text, Metaクラスは省略してます)。このmodelの属性である、author_checkとapprover_checkがTrueになれば公開可能な状態という意味とする。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_lenght&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;approver_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このモデルには著者と承認者がオッケーを出した事を表現する属性はない。あってもいいけど、要件が上のものだけなのであれば不要なのでシンプルに無い方を採用。「公開可能か否か」という属性はapprover_checkとauthor_checkから導出できる属性となる。それをDjango ORMでどのように表現するかというと、以下。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_lenght&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;approver_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_ready_to_publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author_check&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;approver_check&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;実際にis_ready_to_publishがTrueならば公開する(≒published属性をTrueに設定、date_publishedに現在の時間を登録)、という処理も、このmodelの属性に関わる事なので、modelのメソッドに実装する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_lenght&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;approver_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_ready_to_publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author_check&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;approver_check&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlreadyPublishedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_ready_to_publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotPublishableException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;色々いじってみて、Django ORMにおいては1モデル1テーブル、1インスタンス1レコードという概念を念頭に置いた方がいい気がしている。各レコード毎の属性はmodelに、各レコード毎に既存レコードから導出できる属性はmodelに、各レコード毎の属性の値によって処理が変わり、且つその処理がタッチするのが当該モデルに閉じる場合はmodelのメソッドに、といった感じ。&lt;/p&gt;

&lt;p&gt;以下の記事は複数モデルが絡み合うロジックを完全に無視して書いているので、あと一歩な感じなのですが、記事へのコメントがかなりいい感じに補完してくれているので全体として大変参考になる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redbeacon.github.io/2014/01/28/Fat-Models-a-Django-Code-Organization-Strategy/&quot;&gt;Fat Models - A Django Code Organization Strategy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;担わない方がいいと思う役割&quot;&gt;担わない方がいいと思う役割&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;複数モデルが絡み合うロジック&lt;/li&gt;
&lt;li&gt;処理が対象のモデルの中核をなすものでは無いロジック&lt;/li&gt;
&lt;li&gt;AWS等の外部サービスとやりとりするロジック&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはmodelのメソッド内で完結するのは難しいし、そもそもmodel全然関係無い場合もある。先にも述べたようにDjango ORM自体、1モデル1テーブルを基準にして作られているから。なので上記は別の部分に切り出して書くのがいい気がしている。やはりDjangoのmodelはRDBMSにおけるテーブルのPython表現、くらいのプリミティブなものだと捉えておいた方が何かといいのではないかと思う。&lt;/p&gt;

&lt;p&gt;以下の記事はRuby on Railsに関する記事だけど、考え方が非常に参考になった。(ちなみにRuby on Railsは全く触ったこと無い。っていうかDjango以外にWAFを真面目に触ったことが無いという雑魚っぷりです)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&quot;&gt;7 Patterns to Refactor Fat ActiveRecord Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://techracho.bpsinc.jp/hachi8833/2013_11_19/14738&quot;&gt;肥大化したActiveRecordモデルをリファクタリングする7つの方法(翻訳)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;views.py&quot;&gt;views.py&lt;/h1&gt;

&lt;h2 id=&quot;役割&quot;&gt;役割&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;何かリクエストを受けて、リクエストに対して何か処理をして、何かレスポンスを返す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;雑に書いているわけではなく、このレイヤーは抽象的な処理に徹するべきだと思う。そして、可能な限り見通しよく、薄く作るのが、最終的にメンテナンスしやすい気がする。&lt;/p&gt;

&lt;p&gt;「何か処理」の部分は1インスタンスに閉じる処理であればmodelのメソッドを使うし、バリデーションに関係する部分はformを使う。複数modelが絡み合う処理が必要な場合はmodelではなくutils.pyやservices.pyに処理を委譲。最終的に何をレスポンスとして返すか、という部分だけハンドリングする、といった感じ。&lt;/p&gt;

&lt;p&gt;CBVやFBVをどこでどうやって使うべきか、という話は、&lt;a href=&quot;http://pydanny.com/announcing-two-scoops-of-django-1.6.html&quot;&gt;Two Scoops of Django&lt;/a&gt;に非常に詳しく書いてあり、とても参考になった。この本は本当に素晴らしい。&lt;/p&gt;

&lt;h1 id=&quot;django全体通して&quot;&gt;Django全体通して&lt;/h1&gt;

&lt;p&gt;最後に、Django全体を通した思想っぽいものを紹介して、Djangoに対する感想など述べながら締めます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names&quot;&gt;MTV Framework?&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; Django modelの事。「データ」の部分を担当(?)。本文にあまり記述は無い。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt; Django Viewの事。「どのデータを」の部分を担当。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt; Django templateの事。「どのように表示するか」の部分を担当。&lt;/p&gt;

&lt;p&gt;Well, the standard names are debatable.&lt;/p&gt;

&lt;p&gt;In our interpretation of MVC, the “view” describes the data that gets presented to the user. It’s not necessarily how the data looks, but which data is presented. The view describes which data you see, not how you see it. It’s a subtle distinction.&lt;/p&gt;

&lt;p&gt;So, in our case, a “view” is the Python callback function for a particular URL, because that callback function describes which data is presented.&lt;/p&gt;

&lt;p&gt;Furthermore, it’s sensible to separate content from presentation – which is where templates come in. In Django, a “view” describes which data is presented, but a view normally delegates to a template, which describes how the data is presented.&lt;/p&gt;

&lt;p&gt;Where does the “controller” fit in, then? In Django’s case, it’s probably the framework itself: the machinery that sends a request to the appropriate view, according to the Django URL configuration.&lt;/p&gt;

&lt;p&gt;If you’re hungry for acronyms, you might say that Django is a “MTV” framework – that is, “model”, “template”, and “view.” That breakdown makes much more sense.&lt;/p&gt;

&lt;p&gt;At the end of the day, of course, it comes down to getting stuff done. And, regardless of how things are named, Django gets stuff done in a way that’s most logical to us.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という、DjangoはMTVなフレームワークだ！という主張。&lt;/p&gt;

&lt;p&gt;この文章、あまりmodelには触れてない。modelのMはMVCで言うところのモデル、つまりはビジネスロジックなのか、Django ORMによって定義されるmodelなのかはこの文章からだけではよくわからない。ただしばらく触ってみた感じだと、MTVのMがMVCのMと同じだとするならば、それはmodelインスタンス単体ではなく、存在するmodelインスタンスを組み合わせながら処理を行うどっか別の部分に定義される処理な気がする。デフォルトでは入ってないけどservices.pyとか作ってそこに処理を定義、みたいな。もしMTVのMがMVCのMではなく、ただのデータを永続化するだけの仕組み+ちょっとしたメソッドだとしたら、それはDjango ORM単体で事足りる。&lt;/p&gt;

&lt;p&gt;Djangoはもともとニュース系のサイトを管理する目的で開発されたらしい。その出自が影響しているのかどうか不明だけど、確かにニュースサイトで複数インスタンスが複雑に絡み合い、外部サービスと連携しながら特定の処理を行う事ってあんまり想像できない。Djangoそのままのmodels.py/views.py/urls.py/forms.pyだけを使って作る事を想定しているのは、そういった、データ+ちょっとした処理くらい、に最適化されてるんじゃないかなぁという印象を持った。&lt;/p&gt;

&lt;p&gt;もちろん工夫しだいで複雑にもできる作りになってる。&lt;/p&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;ここまで書いてなんですが、書いてきたことが本当にBest Practiceへ通じているのか、正直全くわからない。こちとらエンジニア4ヶ月目で、Djangoに関して真面目に取り組んで3ヶ月目で、だいたい毎日死にはぐってます。わからん部分はmoqada氏と話しながら発展させてきた考えをまとめてみたのですが、いざ文章にしてみるとイマイチな感じがする部分等でてきております(ちなみにmoqadaさんはかわいい奥さんとイタリアに新婚旅行中で幸せ満喫中らしい。羨ましい。)&lt;/p&gt;

&lt;p&gt;このまとめを書こうかなと思ったのは、大きなリリースが一段落ついた、という事もあるのですが、ずっと心に残っていた文章に対する自分なりの一つの答えでもあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/nishiohirokazu/20110309/1299598527&quot;&gt;西尾さんの2011新卒準備カレンダーの記事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回書いたDjango Best Practiceへの道の三本の記事には沢山のリンクが貼ってあります。これらのリンク、全てから自分は勉強させてもらっており、自分が学んでいるということはカンムという会社がクオリティー高いプロダクトをスピーディーに市場に届ける事に貢献しており、カンムが本当に市場に必要とされるプロダクトを作っている限り、世の中の便利さを向上させている事になります。そんな教材が、インターネットにアクセスするだけで死ぬほど手に入るという事に、今更ながら驚愕してます。&lt;/p&gt;

&lt;p&gt;そういう記事の末席に、このまとめも加われれば幸い。加わらなくても書くだけで自分の脳みそ整理できたので元は取れてる。&lt;/p&gt;

&lt;p&gt;勉強させてもらった記事を書いてくれた方々、ライブラリを公開してくれている方々に感謝。また、この記事を書くために時間ある程度使ってもいいよと言ってくれたシャチョーに感謝です。&lt;/p&gt;

&lt;p&gt;わからんことだらけでヤバイので、異論大歓迎です！尖すぎるマサカリは怖いですが、良いマサカリであれば泣きながら受け止めます！&lt;/p&gt;

&lt;p&gt;(追伸：Templateまで届きませんでした。)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/01/road-to-django-best-practice.html&quot;&gt;#1 Djangoプロジェクト/アプリケーション/設定ファイル構成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/04/road-to-django-best-practice.html&quot;&gt;#2 Djangoテスト戦術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/14/django-pytest-webtest.html&quot;&gt;#2 補足編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/07/road-to-django-best-practice.html&quot;&gt;#3 Django Model/View/From/Template戦術&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/04/07/road-to-django-best-practice.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/04/07/road-to-django-best-practice.html</guid>
			</item>
		
	</channel>
</rss>
