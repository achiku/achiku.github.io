<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>包丁一本さらしに巻いて</title>
		<description>Python + Data</description>
		<link>http://akirachiku.com</link>
		<atom:link href="http://akirachiku.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Go 1.6開発環境整備</title>
				<description>&lt;p&gt;しっくり来る所まで来たのでまとめ。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;前提&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OS X 10.11.3&lt;/li&gt;
  &lt;li&gt;homebrew&lt;/li&gt;
  &lt;li&gt;Go 1.6&lt;/li&gt;
  &lt;li&gt;zsh&lt;/li&gt;
  &lt;li&gt;neovim 1.3-dev&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;go&quot;&gt;Go自体の管理&lt;/h3&gt;

&lt;p&gt;homebrewでインストール。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install go
$ go version
go version go1.6 darwin/amd64
$ which go
/usr/local/bin/go
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;に以下の環境変数を設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# for golang&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOVERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.6
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.go/&lt;span class=&quot;nv&quot;&gt;$GOVERSION&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一応バージョンをGOPATHに入れて新しいバージョンのGoがリリースされても最初から綺麗にディレクトリ分けてビルドできるようにしてる。後方互換結構大事にしているように見受けられるのであまり心配してないけど念の為。&lt;/p&gt;

&lt;p&gt;若干ディレクトリが深いので良く使うディレクトリにはaliasを張ってる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;cd $GOPATH/src/github.com/achiku/&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;vendoring&quot;&gt;vendoring&lt;/h3&gt;

&lt;p&gt;Go 1.6からデフォルトでGo公式各コマンド(go buildとかgo testとか)が&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;ディレクトリを意識してくれるようになった。&lt;code class=&quot;highlighter-rouge&quot;&gt;gb&lt;/code&gt;も良いんだけど現在はGoのvendoringで結構満足してる。vendoring tool自体は色々ある。色々あるんだけど自分はgomが好きだ。好きな点は以下の2つ。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/bin&lt;/code&gt;にコマンドラインツールを入れる事ができる&lt;/li&gt;
  &lt;li&gt;設定ファイル1つで開発環境、その他環境でインストールするべきものを分けれる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この2点、意外にその他シンプルなvendoring toolは無視しがちだと思うんだけどグローバルに特定プロジェクトの開発にだけ使いたいツールいれるの嫌だなぁと思う人には嬉しい。&lt;/p&gt;

&lt;p&gt;gomにvendorディレクトリを意識させるには以下の設定が必要。Go 1.6でGO15VENDOREXPERIMENTがデフォルトでオンになっていてもgom自体は以下の環境変数見てるので設定しないといけない。(追記: この設定は不要になりました。Go 1.6以上であれば設定不要です。&lt;a href=&quot;https://github.com/mattn/gom/pull/74&quot;&gt;mattn/gom/pull/74&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GO15VENDOREXPERIMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1   &lt;span class=&quot;c&quot;&gt;# for gom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを設定しておくとgomが作るライブラリ入れるディレクトリが&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;になり、インストールするディレクトリもGo標準のvendoringを意識した形にしてくれる。&lt;/p&gt;

&lt;p&gt;Go標準のツール(go buildとかgo testとか)が&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;ディレクトリを意識してくれるので&lt;code class=&quot;highlighter-rouge&quot;&gt;gom build&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;gom test&lt;/code&gt;は使わなくなり、ほぼ&lt;code class=&quot;highlighter-rouge&quot;&gt;gom install&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;gom exec&lt;/code&gt;しか使ってない。この辺りの機能はGo 1.5以前から存在してるのでもはや役目を終えつつある。しかしながら考えぬかれた便利な道具だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mattn/gom&quot;&gt;github.com/mattn/gom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他新し目の(vendorディレクトリを意識する)vendoring toolでシンプルで良いなと思ったのは以下の二つ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/govend/govend&quot;&gt;github.com/govend/govend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FiloSottile/gvt&quot;&gt;github.com/FiloSottile/gvt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;エディタ(基礎)&lt;/h3&gt;

&lt;p&gt;現在エディタはneovimをメインで利用。この部分はvimでも良さそうな気がしてる。以下Goを書くための入れているプラグインと設定の抜粋。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NeoBundle &lt;span class=&quot;s1&quot;&gt;&#39;scrooloose/syntastic&#39;&lt;/span&gt;
NeoBundle &lt;span class=&quot;s1&quot;&gt;&#39;fatih/vim-go&#39;&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;(..&lt;/span&gt;snip&lt;span class=&quot;p&quot;&gt;..)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;&quot; syntastic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_go_checkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;golint&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;gotype&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;govet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;go&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&quot;&quot; vim-go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_fmt_command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;goimports&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_highlight_functions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_highlight_methods&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_highlight_structs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_highlight_operators&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_term_enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:go_highlight_build_constraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

augroup GolangSettings
  autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;gb &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;build&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;gt &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;test&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;def&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;split&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;dv &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;def&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;dt &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;def&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;gd &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;doc&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;gv &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;doc&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;highlight goErr cterm&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;214&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; goErr &lt;span class=&quot;sr&quot;&gt;/\&amp;lt;err\&amp;gt;/&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim-go&lt;/code&gt;を入れてからvimのコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;:GoInstallBinaries&lt;/code&gt;を実行すると、デフォルトでは&lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH/bin&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;goimports&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;golint&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gocode&lt;/code&gt;等のGoを書くときに便利なツールが一気に入る。全ツールアップデートしたい場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;:GoUpdateBinaries&lt;/code&gt;を実行するとアップデート可能。この二つのプラグインは本当に良く出来ていて、毎日大変お世話になってる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fatih/vim-go&quot;&gt;github.com/fatih/vim-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;github.com/scrooloose/syntastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;エディタ(コード補完)&lt;/h3&gt;

&lt;p&gt;エディタ上でのコード補完に関しては&lt;code class=&quot;highlighter-rouge&quot;&gt;gocode&lt;/code&gt;がデファクトになってる。neovimでは&lt;code class=&quot;highlighter-rouge&quot;&gt;deoplete&lt;/code&gt;というプラグインを使って一般的な補完をし、&lt;code class=&quot;highlighter-rouge&quot;&gt;deoplete-go&lt;/code&gt;というプラグインを利用してGo関連補完を補強してる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NeoBundle &lt;span class=&quot;s1&quot;&gt;&#39;Shougo/deoplete.nvim&#39;&lt;/span&gt;
NeoBundle &lt;span class=&quot;s1&quot;&gt;&#39;zchee/deoplete-go&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;build&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;unix&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;make&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;(..&lt;/span&gt;snip&lt;span class=&quot;p&quot;&gt;..)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;&quot;&quot; deoplete&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:deoplete&lt;/span&gt;#enable_at_startup &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:deoplete&lt;/span&gt;#enable_smart_case &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; deolete#mappings#smart_close_popup&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;C-h&amp;gt;&quot;&lt;/span&gt;
inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;BS&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; deoplete#mappings#smart_close_popup&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;C-h&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;&quot;&quot; deoplete-go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:deoplete&lt;/span&gt;#sources#&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;#align_class &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:deoplete&lt;/span&gt;#sources#&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;#sort_class &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;package&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;func&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;var&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;const&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:deoplete&lt;/span&gt;#sources#&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;#package_dot &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これだけの設定をするだけでGoの標準ライブラリ及び&lt;code class=&quot;highlighter-rouge&quot;&gt;go get/install&lt;/code&gt;したライブラリは補完できるようになる。問題なのは&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;ディレクトリに入れたプロジェクトの依存ライブラリだ。&lt;/p&gt;

&lt;p&gt;結論から言うと以下のコマンドを打って&lt;code class=&quot;highlighter-rouge&quot;&gt;gocode&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;autobuild&lt;/code&gt;機能を有効にすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;ディレクトリに入れたライブラリも便利に補完可能になる。(但し&lt;code class=&quot;highlighter-rouge&quot;&gt;gocode&lt;/code&gt;はこの機能をexperimentalと位置づけてるので動向には注意)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gocode set autobuild true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上記コマンドを打つと、gocodeの設定ファイルが以下の場所にできる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ll .config/gocode/config.json
-rw-r--r--  1 achiku  staff  108  2 27 17:54 .config/gocode/config.json
$ cat .config/gocode/config.json
{&quot;propose-builtins&quot;:false,&quot;lib-path&quot;:&quot;&quot;,&quot;autobuild&quot;:true,&quot;force-debug-output&quot;:&quot;&quot;,&quot;package-lookup-mode&quot;:&quot;go&quot;}% 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gocode&lt;/code&gt;は補完候補をソースコードからではなくビルド済みのバイナリから探すので、一度ビルドしないと補完が効かない。上記の設定はエディタで補完候補を探す際に&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt;ディレクトリ内のソースをビルドして&lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH&lt;/code&gt;の中に入れてくれる。実際にどの場所にバイナリが入るかというと、例えば自分が作っているwbsというツールの依存ライブラリは以下の場所にバイナリが入る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.go/1.6/pkg/darwin_amd64/github.com/achiku/wbs/vendor/github.com/BurntSushi/toml.a
~/.go/1.6/pkg/darwin_amd64/github.com/achiku/wbs/vendor/github.com/mattn/go-shellwords.a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;プロジェクト別に依存ライブラリのバイナリが配置されるので、自動でコンパイルされて配置されてもさして影響は無いかなと思ってる。初回補完時にビルドするのである程度ラグを感じるが、一度ビルドされたら次回以降高速に補完されるので現状問題は感じていない。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nsf/gocode&quot;&gt;github.com/nsf/gocode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Shougo/deoplete.nvim&quot;&gt;github.com/Shougo/deoplete.nvim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zchee/deoplete-go&quot;&gt;github.com/zchee/deoplete-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;エディタ(テスト)&lt;/h3&gt;

&lt;p&gt;エディタで書いてテストして、というサイクルを高速に回すために&lt;code class=&quot;highlighter-rouge&quot;&gt;vim-test&lt;/code&gt;というプラグインを入れている。これまた最高のプラグインのうちの一つだと思っててGoに限らずPythonを書くときにも多用している。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NeoBundle &lt;span class=&quot;s1&quot;&gt;&#39;janko-m/vim-test&#39;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(..&lt;/span&gt;snip&lt;span class=&quot;p&quot;&gt;..)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:test&lt;/span&gt;#strategy &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;neovim&#39;&lt;/span&gt;

nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TestNearest&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TestFile&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TestSuite&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TestLast&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TestVisit&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; test#python#pytest#&lt;span class=&quot;k&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;nearest&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;-v&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&#39;-v&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;suite&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;&#39;-v&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; test#&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;#gotest#&lt;span class=&quot;k&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;nearest&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;-v&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&#39;-v&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;suite&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;&#39;-v&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let g:test#strategy&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;neovim&lt;/code&gt;を指定してneovimの機能は使ってるけどvimでもこの部分の設定を変えれば普通にいける。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/janko-m/vim-test&quot;&gt;github.com/janko-m/vim-test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上現在のGo 1.6開発環境でした。&lt;/p&gt;
</description>
				<pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2016/03/01/go16-development.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2016/03/01/go16-development.html</guid>
			</item>
		
			<item>
				<title>syntasticとmypyでvimからPython型アノテーション確認</title>
				<description>&lt;p&gt;vim + syntastic + mypyを使ってPython 3.5から正式に入った型アノテーションを実感する。環境はOSX 10.10.5。&lt;/p&gt;

&lt;h3 id=&quot;python-35&quot;&gt;Python 3.5の準備&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew update
$ brew install python3
$ ls -l $(which python3)
lrwxr-xr-x  1 achiku  staff  35  6  9 17:10 /usr/local/bin/python3@ -&amp;gt; ../Cellar/python3/3.5.0/bin/python3
$ ls -l $(which pyvenv3.5)
lrwxr-xr-x  1 achiku  staff  38 10 19 01:35 /usr/local/bin/pyvenv3.5@ -&amp;gt; ../Cellar/python3/3.5.0/bin/pyvenv-3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;virtualenv&quot;&gt;virtualenv環境の作成&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pyvenv3.5 mypy
$ source ./mypy/bin/activate
$ python --version
Python 3.5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;必要なライブラリをインストール&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat requirements.txt
git+https://github.com/JukkaL/mypy.git@master
$ pip install -r requirements.txt
$ pip freeze
mypy-lang==0.2.0.dev0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;mypy-langをpip installで入れると0.2.0が入るのだけど、これはPython 3.5では上手く動かなかった。なので上の例ではリポジトリのmasterから入れてる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python --version
Python 3.5.0
$ pip install mypy-lang
$ pip freeze
mypy-lang==0.2.0
$ mypy
Traceback (most recent call last):
  File &quot;/Users/achiku/.virtualenvs/py3/bin/mypy&quot;, line 14, in &amp;lt;module&amp;gt;
    from mypy import build
  File &quot;/Users/achiku/.virtualenvs/py3/lib/python3.5/site-packages/mypy/build.py&quot;, line 19, in &amp;lt;module&amp;gt;
    from typing import Undefined, Dict, List, Tuple, cast, Set, Union
ImportError: cannot import name &#39;Undefined&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mypy&quot;&gt;mypyが動く事を確認&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mypy -h
usage: mypy [option ...] [-m mod | file]

Optional arguments:
  -h, --help         print this help message and exit
  --&amp;lt;fmt&amp;gt;-report dir generate a &amp;lt;fmt&amp;gt; report of type precision under dir/
                     &amp;lt;fmt&amp;gt; may be one of: html, old-html, xslt-html, xml, txt, xslt-txt
  -m mod             type check module
  -c string          type check program passed in as string
  --verbose          more verbose messages
  --use-python-path  search for modules in sys.path of running Python
  --version          show the current version information

Environment variables:
  MYPYPATH     additional module search path
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;syntastic&quot;&gt;syntasticの準備&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NeoBundle &lt;span class=&quot;s1&quot;&gt;&#39;scrooloose/syntastic&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_check_on_open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_python_checkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;flake8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;pep257&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;mypy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_python_flake8_args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;--max-line-length=120&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;python&quot;&gt;型アノテーション付きPythonのコードを書いてみる&lt;/h3&gt;

&lt;p&gt;さっき作ったmypyというvirtualenvをactivateした状態でvimを開き以下のコードを書く。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;greeting function&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Hello &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;moqada&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;achiku&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを書いて保存したタイミングで下の用に警告してくれる。これはgreeting関数が引数としてstr型を受け取るのにintを渡しているので警告してくれてるのと、greeting関数が返すstr型とint型を+演算子を使って処理しようとしているので出る警告。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://akirachiku.com/images/syntastic-vim.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;自分が使ってるツールには結構気軽に組み込めた。ただmypy自体まだ挙動が怪しい部分があったり、issueの処理速度があがらなかったりするので継続的にウォッチしていきたい。&lt;/p&gt;
</description>
				<pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2015/11/04/syntastic-mypy.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2015/11/04/syntastic-mypy.html</guid>
			</item>
		
			<item>
				<title>Golangへの道 #2</title>
				<description>&lt;p&gt;前回から大分時間が経ってしまったけど書く。もはやイマサラ感ありまくりだけど、今回は以前勉強したGolangの並行(concurrency)と並列(parallelism)について。&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;並行と並列は別物だよ&lt;/li&gt;
  &lt;li&gt;Golangは標準機能で処理に並行性を持たせるように組み、且つ並列で実行しやすいよ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;並行と並列は別物&lt;/h2&gt;

&lt;p&gt;とにかく以下の資料が最強に分かりやすい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.golang.org/concurrency-is-not-parallelism&quot;&gt;Concurrency is not parallelism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://talks.golang.org/2012/concurrency.slide#1&quot;&gt;Go Concurrency Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分で咀嚼できているか確認する為、以下簡単に説明をしてみる。間違ってるかもしれないのでコメント歓迎。&lt;/p&gt;

&lt;p&gt;「並行性がある」というのはどういう状態かというと、各々独立して実行できる処理群が互いにコミュニケーションしながら処理を実行可能な状態、と言える。以下資料の中で一番しっくりきた言葉。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;並行性とは、各処理を分割し独立に実行可能なプログラムの構造の事、とでも訳せば良いのか。大切なのは「プログラムの構造」の話であって、実際の処理が同時に行えているかどうか(並列性)とは異なるという事。以下のGopherが本を運んで炉で燃やすという処理の例がとてもわかりやすかった。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://talks.golang.org/2012/waza.slide#12&quot;&gt;Gopher moving obsolete language manuals to the incinerator p.12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1匹(?)のGopherがカートを使って本を炉に運んで燃やす、という処理にどうやったら「並行性」を持たせれるか、という観点で例が進んでいく。この例を辿って行くと確かに並行性というのは「問題をどうやって解くか」という事に近く、なんとなく同時に実行できるって事なんだろ的な雑い感じからは遠ざかる。そして上手い問題の解き方を構築することができれば(例えば複数のGopher達で役割分担すれば)、そしてそれらを独立してで実行できる計算リソースがあれば、本をカートで運んで炉で燃やすという処理をより早く行う事ができる。&lt;/p&gt;

&lt;p&gt;今回のGopherが本を処分していく例をWebのシステムに当てはめてみると、GopherがCPUで本の山がウェブコンテンツ、カートがマーシャリングやレンダリングもしくはネットワーキングで炉がプロキシやらブラウザやら他のコンシューマー、といった形。&lt;/p&gt;

&lt;p&gt;並行性を持たせるようにプログラムを構築することができたのならば、それぞれの処理を独立して並列に走らす事で目指す結果を素早く達成できる、って事らしい。以下の一文がとても良くサマリされていて、「並行と並列ってどっちがどっちだっけな」と迷った時に思い出す事にしている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concurrency is about structure, parallelism is about execution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意訳すると、「並行性とは構造/デザインであり、並列性とは実行の事である」的な感じか。英語だとconcurrencyとparallelismとなり、明確に単語が異なるので分かりやすいけど、日本語にすると平行と並列ってなるので覚えにくい。&lt;/p&gt;

&lt;h2 id=&quot;golang&quot;&gt;Golangで並行と並列を実現する仕組み&lt;/h2&gt;

&lt;p&gt;上は結構抽象的な話になってしまっているので、ここから具体的にコードを書きながらGolangのどのような機能が並行と並列を実現しやすくしているのか説明してみる。一番最初に並行性を持つということはどういうことか、という事を書いたけど以下再掲。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「並行性がある」というのはどういう状態かというと、各々独立して実行できる処理群が互いにコミュニケーションしながら処理を実行可能な状態、と言える。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、これらを行うためには少なくとも以下の機能が必要になる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;独立した処理を複数実行できる&lt;/li&gt;
  &lt;li&gt;独立した処理群が互いに連携できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれ、Golangが持っている&lt;code class=&quot;highlighter-rouge&quot;&gt;goroutine&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;という機能で実現できるようになっているので、以下それぞれ詳細について書く。&lt;/p&gt;

&lt;h3 id=&quot;goroutine&quot;&gt;独立して処理を動かす仕組み(Goroutine)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://talks.golang.org/2012/waza.slide#31&quot;&gt;Concurrency is not Parallelism p.31&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A goroutine is a function running independently in the same address space as other goroutines&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Goroutineはスレッドとは違う。リソースもそんなに食わずに1スレッドの中に数百から数千のGoroutineを走らせる事もできるとの事。詳細な内部構造についてはあまり理解していないのだけど、一旦コードを書きながら話を進める。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8maki&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moqada&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上のコードでは&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;という英語で軽く挨拶をしてくれるAPIのモックが定義されており、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;関数内で上から順番に実行する。&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;の中にはレスポンスタイムのブレを表現するためにランダムにsleepしてから文字列を返すようにしてある。実行結果は以下。確かに順番に挨拶してくれている。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello, 8maki!
Hello, moqada!
Hello, ide!
done!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;APIのコールは互いに独立なので並列(parallel)に実行したいのでここでgoroutineを使う。&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;を呼び出す前に&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;を付けるだけ。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8maki&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moqada&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下実行結果。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;done!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;なんかおかしいのもその通り、&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;を付けることで&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;はメインスレッドとは切り離されて実行されているので、&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;が結果を表示する前にメインスレッドが完了してしまっている。強引に&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;の結果を標準出力に出そうとするのならば&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;の中でsleepしてやるしかない。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8maki&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moqada&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実行結果は以下の通りで&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;の結果を出力できた。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello, 8maki!
Hello, moqada!
Hello, ide!
done!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このように&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;を関数の前に付けることで処理を独立に実行できる。&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;は関数だけじゃなくてコードのブロックや無名関数にも適用できる便利な道具だ。ただし、上で見たように「処理を独立して実行する」仕組みであるだけであり、雑に例えるならばシェルにアンパサンド付けて実行するのと同じような感じでしかない。&lt;/p&gt;

&lt;p&gt;見ての通り上のプログラムはあまりにもナイーブだ。&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;が過負荷でレスポンス返すのに時間がかかっていたらどうするのか、挨拶する対象のユーザが増えたらどうするのか、とにかく処理に1秒以上かかったら正しく動作しない。かと言って30秒待つのはあまりに非効率だし、そうなるとどこかで足切りの基準を設けてそれ以上時間がかかったらエラー通知して処理を進める、とかになるがまぁわかりにくい。&lt;/p&gt;

&lt;p&gt;そんなわけで、プログラムに並行性を持たせ独立な処理を組み合わせて処理を進めるには、独立した処理がお互いに(今回の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;)連携できる仕組みが必要になってくる。それが次に紹介する&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;という仕組み。&lt;/p&gt;

&lt;h3 id=&quot;channel&quot;&gt;独立して動く処理が互いに連携する仕組み(Channel)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;はGolangの中で「独立して動く処理が互いに連携する仕組み」という立ち位置だと認識している。どうやって独立した処理を連携させるかというと、イメージとしては処理同士がデータを受け渡しする経路を作ってやる、という感じ。ちょっと長いけどとりあえずコード。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8maki&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moqada&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You say: %q&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実行結果。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You say: &quot;Hello, 8maki!&quot;
You say: &quot;Hello, moqada!&quot;
You say: &quot;Hello, achiku!&quot;
You say: &quot;Hello, ide!&quot;
done!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;の中で&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;を作ってやる。Golangが提供する&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;はファーストクラスオブジェクトで型を持っている。メインはこのチャネルを使って独立実行する&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;とデータのやり取りをする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;x&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;肝は以下の部分。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;x&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You say: %q&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここでメインは&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;-c&lt;/code&gt;を使って&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;で独立実行した処理がchannelを経由してデータを渡してくれるのを待っている。&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;が処理を完了して文字列を自身が引数で受け取ったチャネルに渡した瞬間に上記コードの&lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println&lt;/code&gt;が実行される。今回のケースではユーザの数分&lt;code class=&quot;highlighter-rouge&quot;&gt;helloAPI&lt;/code&gt;を実行しているのでユーザの数分待ち合わせる事になる。チャネルは「データの受け渡し」と「処理の待ち合わせ」の両方の役割を担っている感じ。以下最強の資料から抜粋。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the main function executes &amp;lt;–c, it will wait for a value to be sent.
Similarly, when the boring function executes c &amp;lt;– value, it waits for a receiver to be ready.
A sender and receiver must both be ready to play their part in the communication. Otherwise we wait until they are.
Thus channels both communicate and synchronize.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://talks.golang.org/2012/concurrency.slide#21&quot;&gt;Go Concurrency Patterns p.21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;の仕組みを導入することで、メインスレッドと&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;で独立実行させた処理が「処理の待ち合わせ」と「データの受け渡し」ができるようになった。&lt;code class=&quot;highlighter-rouge&quot;&gt;goroutine&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;の仕組みを使うことで「独立した処理実行」と「独立した処理同士の連携」ができるようになっており、それらが言語にデフォルトで組み込まれてる且つリソース効率が良いっていう事実こそ、Golangが並行と並列を強く意識した言語だと言われる所以なのかなと思う。&lt;/p&gt;

&lt;p&gt;最強の資料には&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;のよくある使い方パターンも実際のコード含めて解説されているので本当に最強としか言いようがない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://talks.golang.org/2012/concurrency.slide#24&quot;&gt;Go Concurrency Patterns p.24&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;select&quot;&gt;独立して動く複数の処理同士の連携をコントロールする仕組み(Select)&lt;/h3&gt;

&lt;p&gt;Golangには更に便利な仕組みがある。&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt;文みたいなものだけど、値が同じだったらこの処理を実行、というのではなく、チャネルからデータが取得できたらこの処理を実行、という感じのもの。以下コード。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profileAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;s profile&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloChan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profChan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8maki&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moqada&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;achiku&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloChan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profileAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profChan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numAPI&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloChan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profChan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実行結果。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello, moqada!
Hello, 8maki!
ide&#39;s profile
Hello, achiku!
moqada&#39;s profile
achiku&#39;s profile
Hello, ide!
8maki&#39;s profile
done!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;肝は以下の部分。forループを何回回すかの部分が大分ナイーブだけど一旦説明の為に勘弁してほしい。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;x&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numAPI&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloChan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profChan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これはユーザの数xそのユーザに対して実行するAPIの数分&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;を実行している。&lt;code class=&quot;highlighter-rouge&quot;&gt;helloChan&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;profChan&lt;/code&gt;どちらに先にデータが届いても、届いたものから実行していく(同時に届いた場合はランダムに実行する処理を選択)。このように複数のチャネルを取り回して行く時&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;があると綺麗に書ける。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Golang楽しい。次回はもう少し&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;を使った処理パターンにも踏み込んで書く。&lt;/p&gt;
</description>
				<pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2015/11/03/golang-02.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2015/11/03/golang-02.html</guid>
			</item>
		
			<item>
				<title>チクメキメモリアル</title>
				<description>&lt;p&gt;万歩遅れてのエンジニア開始、約1年間の軌跡。&lt;/p&gt;

&lt;h2 id=&quot;haskell&quot;&gt;Haskellをやっておく&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/seizans&quot;&gt;@saizans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;言語自体は仕事で使わないかもしれないけど、Haskellの考え方が後々非常に参考になった。
「プログラミングHaskell」という本が非常に考え方の部分を重点的に書いていて参考になる。
「すごいHaskell、ゆかいに学ぼう」はどちらかというと実践形式。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;[2014-07-07]&lt;/h3&gt;
&lt;p&gt;プログラミングHaskellを購入して朝勉強会で読んでいる。
ただし、これやっぱり書かないとだめだなという事で読むと書くを毎日交互にやるスタイルに変更。
また、Preludeの写経も有効な気がしている。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;[2014-08-06]&lt;/h3&gt;
&lt;p&gt;まだプログラミングHaskell終わってないので1回全部読み切って終わらせる。
理解は2周目の俺に任せる。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;プログラミングHaskell読み終わった。第9章くらいから理解までせずに適当に読んだ。
書く事もはじめる為にLearn You Haskell for Great Goodを写経し始めた。&lt;/p&gt;

&lt;p&gt;次は&lt;a href=&quot;http://book.realworldhaskell.org/read/&quot;&gt;Real World Haskell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これは難しそう、&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1230000000929/index.html&quot;&gt;Parallel and Concurrent Programming in Haskell&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;実践関数型プログラミングの説明が非常にいい感じだと気づいた。
何かガツッと作らないとおぼえれない可能性が非常に濃厚。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;最近全く触ってない。もはや忘れつつある。30分勉強会がほぼ無くなった。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;[2015-03-08]&lt;/h3&gt;
&lt;p&gt;30分勉強会復活させようかな。どうしようか悩むな。なんかあの朝の時間、ダラダラとFeedを追う時間になってる。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;p&gt;ダメです。完全に割く時間がGolangにうつってしまった。
この&lt;a href=&quot;https://talks.golang.org/2012/waza.slide#1&quot;&gt;Concurrency and Parallelism&lt;/a&gt;というスライドとトークが最高にわかりやすかった。&lt;/p&gt;

&lt;p&gt;この辺の並行/並列の辺りは一度ブログに書いて自分の理解を定着させたい。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;[2015-07-13]&lt;/h3&gt;
&lt;p&gt;ERDツール使う時にちょっとだけHaskellしたが最早やってない。
あとこのツール導入する時にちょっとコード読んだ、くらい。
https://github.com/olivierverdier/zsh-git-prompt&lt;/p&gt;

&lt;h2 id=&quot;pr&quot;&gt;自分が興味を持ち続けれるプロジェクトにPRを出す&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/muddydixon&quot;&gt;@maddydickson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他の人々に教えてもらういい機会。コミュニティへの恩返しにもなる。
ただし、自分が使ってる、興味を持ってるところに出すのが大事。続けれないと面白くない。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;[2014-07-07]&lt;/h3&gt;
&lt;p&gt;未だできてない。やりたいのはluigiのS3対応が一番仕事にも近くていい気がしている。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;[2014-08-06]&lt;/h3&gt;
&lt;p&gt;未だできてない。luigiにはS3のTarget入ってる事に先日気づいた。
となるとどこに出そうかな。botoのImpalaセットアップのコード辺りか。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;できてません。興味あるプロジェクトなんだろう。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;ShibにtypoだけどPR出してマージしてもらえた。&lt;/p&gt;

&lt;p&gt;https://github.com/tagomoris/shib/graphs/contributors&lt;/p&gt;

&lt;p&gt;OSSへのPRはできそうなタイミングでやっていこうと思う。
正直今は上手く使わせてもらうだけで精一杯な部分が多く、
何か必要な機能があるのであればp-rよりも、別のサービスやOSSを探してしまう。&lt;/p&gt;

&lt;p&gt;どうしても無い、っていうケースは、本当にその分野の先端を走るか、
本当にニッチな領域に関してじゃないと無さそうだなという気がする。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;一旦自分もOSSを出してみた。使ってもらえるかどうかは知らん。&lt;/p&gt;

&lt;p&gt;https://github.com/achiku/hubot-piptools&lt;/p&gt;

&lt;p&gt;自分で書いた紹介記事&lt;/p&gt;

&lt;p&gt;http://achiku.github.io/2015/02/02/hubot-piptools.html&lt;/p&gt;

&lt;p&gt;あとshibはやっぱり便利なので継続的にコードベースを見て、何がしかのPR出せるようにしたい。
embulkがもしかしたらOSSで名を上げる為には結構いいのではないかという説がある。
黎明期のfluentdのような着眼点、かっけー。
https://github.com/embulk/embulk&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;[2015-03-08]&lt;/h3&gt;
&lt;p&gt;ついにshibに対してprを出した。これマージされたら嬉しい。&lt;/p&gt;

&lt;p&gt;https://github.com/tagomoris/shib/pull/30&lt;/p&gt;

&lt;p&gt;あとテストが落ちるのでその報告的なやつ。&lt;/p&gt;

&lt;p&gt;https://github.com/tagomoris/shib/issues/29&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;[2015-03-14]&lt;/h3&gt;
&lt;p&gt;マージされた！！&lt;/p&gt;

&lt;p&gt;https://github.com/tagomoris/shib/pull/30&lt;/p&gt;

&lt;p&gt;今後も継続的に色んなライブラリを見て行きたい。&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;[2015-05-14]&lt;/h3&gt;
&lt;p&gt;botoに対してpr&lt;/p&gt;

&lt;p&gt;https://github.com/boto/boto/pull/3156&lt;/p&gt;

&lt;p&gt;awsbootstrapactionに対してissue&lt;/p&gt;

&lt;p&gt;https://github.com/awslabs/emr-bootstrap-actions/issues/90&lt;/p&gt;

&lt;p&gt;PyHiveに対してissue&lt;/p&gt;

&lt;p&gt;https://github.com/dropbox/PyHive/issues/14&lt;/p&gt;

&lt;p&gt;motoに対してissue/pr&lt;/p&gt;

&lt;p&gt;https://github.com/spulec/moto/issues/347&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;[2015-07-13]&lt;/h3&gt;
&lt;p&gt;motoへのprがマージされた&lt;/p&gt;

&lt;p&gt;https://github.com/spulec/moto/pull/375&lt;/p&gt;

&lt;p&gt;django-s3-storageに対してprしてマージされた&lt;/p&gt;

&lt;p&gt;https://github.com/etianen/django-s3-storage/pull/1&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;[2015-07-29]&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/achiku/jungle&quot;&gt;jungle&lt;/a&gt;というAWSのYet Another CLI作った。そして初PyPI登録した。&lt;/p&gt;

&lt;p&gt;コンセプトとしては”Unix-linkなAWS CLI”という感じ。
aws-cliは本当に便利で最高なんだけど、全部載せ且つオプション長すぎてCLIとして普段使いするのは結構面倒。
その中でaws s3 lsとかはかなり直感的に扱えるなぁというのがこれを作った動機になってる気がする。
EC2やELBやASGとかだってCLIっぽく軽く扱えたらいいな、と。
あとclickっていうPython製CLIライブラリが結構良さそうだったので使ってみたかったってのもある。&lt;/p&gt;

&lt;p&gt;hotdogっていうDataDogとやりとりするCLIがあるんだけどコレも参考になる。&lt;/p&gt;

&lt;h2 id=&quot;section-18&quot;&gt;とにかく時間を投資する&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/voluntas&quot;&gt;@voluntas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;効率とかよりもまず費やす絶対時間を増やすこと。効率は二の次。&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;[2014-08-06]&lt;/h3&gt;
&lt;p&gt;できてない日もあるが、概ねできている。酒飲んで帰宅遅くなるとできてない。写経のやり方もう少し効率化できる気がしてきた。&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;最近帰ってからコードかけてない。けど、会社でコード書く時間がかなり増えた。&lt;/p&gt;

&lt;h3 id=&quot;section-21&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;会社でコード書く時間が格段に増えて、家では本読む時間になってる。&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;休日に書くコードが会社のコードではなく自分のプロジェクトのコード(CoffeeScript/Golang)になった。平日は相変わらずコード書く量を維持できてる気がする。&lt;/p&gt;

&lt;h3 id=&quot;section-23&quot;&gt;[2015-02-23]&lt;/h3&gt;
&lt;p&gt;プロダクトのコード書き中。自分のプロジェクトは一旦お休み。ただ、「何を解決すべきなのか」という部分により多くの時間をさくフェーズな気がするので、そこまでガツガツは書けていない。来月もっと書きたい。&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;p&gt;3月はガッツリプロダクトBのコードを書いた。ココで結構Presto + SQLAlchemyの知見溜まってる。4月はプロダクトの改善、購買履歴系ランキングのデータを作った。5月は購買履歴系ランキングのデータ改善。プロダクトCの数値棚卸し。4月以降ガッツリ時間を取って何かを開発する時間をとれていない。&lt;/p&gt;

&lt;h3 id=&quot;section-25&quot;&gt;[2015-07-13]&lt;/h3&gt;
&lt;p&gt;6月はAnsible化と既存AWSインフラの整備、プロダクトAのadminに時間を費やした。しっかり時間を取って開発は無いけど、既存のAWSインフラをAnsibleで整備するのは知見が溜まった気がする。あと、Obje-CとArduinoを休日プロジェクトとして開始した。月末にはある程度のものにしたい。&lt;/p&gt;

&lt;h2 id=&quot;section-26&quot;&gt;写経する&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/voluntas&quot;&gt;@voluntas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新しい言語覚える場合は写経有効。興味のある分野のOSSの写経の効果は抜群。&lt;/p&gt;

&lt;h3 id=&quot;section-27&quot;&gt;[2014-07-07]&lt;/h3&gt;
&lt;p&gt;現在django.http写経中だけど、非常にいい。知らない書き方や、知った気になってた部分結構ある事に気づける。なんといっても開始する際の心理的障壁が非常に低い。まだ新言語を学ぶ際の写経は取り入れた事ないけど、Erlangをやる時にはやってみよう。あとプログラミングHaskell一段落させて、何かHaskellのプロジェクトを写経してみる。&lt;/p&gt;

&lt;h3 id=&quot;section-28&quot;&gt;[2014-08-06]&lt;/h3&gt;
&lt;p&gt;今はMQTTのPythonクライアントを写経中。コードやコメント自体が非常に綺麗で参考になっている。ただし、全体の構造を把握する前段階から写経に入ってしまっているので、ここは次回以降効率化できる気がする。やっぱり全体の構造が分かってから写経したほうが良い。&lt;/p&gt;

&lt;h3 id=&quot;section-29&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;サイボウズ式のコサキさんのお話がとても良かった。&lt;/p&gt;

&lt;p&gt;http://d.hatena.ne.jp/nishiohirokazu/20140905/1409908066&lt;/p&gt;

&lt;p&gt;今はGolangのチュートリアル完了。&lt;/p&gt;

&lt;h3 id=&quot;section-30&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;Golangの写経もう少し進めないと。最近Golangに関しては全く時間がとれていない。新しいものジワジワやっていきたいけど、メインのPythonももう少し知りたい。&lt;/p&gt;

&lt;h3 id=&quot;section-31&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;GolangのWebAppの写経実施中。このチュートリアルは結構良い。&lt;/p&gt;

&lt;h3 id=&quot;section-32&quot;&gt;[2015-03-14]&lt;/h3&gt;
&lt;p&gt;最近はプロダクトのコードばかりで特に書けていない。&lt;/p&gt;

&lt;h3 id=&quot;section-33&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;p&gt;プロダクトコード書けてないので写経中の物が多い。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mackerel-agent&lt;/li&gt;
  &lt;li&gt;fluent-agent-hydra&lt;/li&gt;
  &lt;li&gt;fluent-forwarder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-34&quot;&gt;[2015-07-13]&lt;/h3&gt;
&lt;p&gt;プロダクトコード書けてないので写経中。今はObj-CのTutorialを書き写してるところ。iosアプリ開発は基礎整えるのにある程度時間かかる。ただ、明細アプリはこれ以上何か発見しようとすれば、どうしてもプロトタイプが必要なんだよな。「リアルタイム決済通知や予算方式は本当に人間の購買行動に影響を与えるのか」を検証したい。現状の環境ではarduino + BLE + iPhoneで検証する予定。もしかしたらスクレイピングするかも。&lt;/p&gt;

&lt;h2 id=&quot;section-35&quot;&gt;10分で今思い描ける最高のエンドプロダクト&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/ariyasu&quot;&gt;@ariyasu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10分じゃなくてもいいけど、とにかく短い時間を区切るの大事。真面目属性を持ってる人はずっと考え続けてしまうし、行動にうつらない。スタートアップはスピード無いとやっていけない。10分で思い描いたらそれその週にリリースな。&lt;/p&gt;

&lt;h3 id=&quot;section-36&quot;&gt;[2014-08-06]&lt;/h3&gt;
&lt;p&gt;これは良さそうな習慣。懸念点は10分で本当に本質に迫れるのか、というところ。ただし、10分間鼻血が出るほど考えて、とにかくエンドプロダクトまで行く。このエンドプロダクトがその時点で本質に迫っていないのであれば、ソレはもはや自身の実力の欠如と認める。上記サイクルを何回も回しながら「10分」のクオリティを上げ続けるというのはいい策かもしれない。&lt;/p&gt;

&lt;p&gt;難易度にもよるだろうけど、結果的に10分で本当に本質に迫れるような鋭い思考ができるようになるかもしれない。継続してやっていく。&lt;/p&gt;

&lt;h3 id=&quot;section-37&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;10分で解決できる問題を切り取る力が上がる。計測可能な制約を加えると新しい知見たまる事ってある。&lt;/p&gt;

&lt;h3 id=&quot;section-38&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;継続中。システム設計の部分に関しても応用できないか考える。制約は計測できれば時間じゃなくてもいい気がする。&lt;/p&gt;

&lt;h3 id=&quot;section-39&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;継続中。最近はコードについて考える時に使う事の方が多い。hubot-piptoolsもとりあえず細かい部分は実装せずにOSSにした。&lt;/p&gt;

&lt;h3 id=&quot;section-40&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;p&gt;継続中。だけど最近これに対する意識が弱い気がする。引き締める。特にプロダクトB、彼らに取って最高とは一体なんなのかを考えて財布がついてこなかった感はある。「本当に最高」であれば財布も自然とついてくるもんなのかな。ここで財布を気にする必要があるのかどうか、まだまだケース毎にどの地点でバランスを取るか考える必要がある。&lt;/p&gt;

&lt;h2 id=&quot;section-41&quot;&gt;会社のどの部分を伸ばすの？から始まるプロダクト設計&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/ariyasu&quot;&gt;@ariyasu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;読んで字のごとく。&lt;/p&gt;

&lt;h3 id=&quot;section-42&quot;&gt;[2014-08-06]&lt;/h3&gt;
&lt;p&gt;ものすごい当たり前なんだけど、なんか全然出来てない気がしている部分。&lt;/p&gt;

&lt;h3 id=&quot;section-43&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;できてない。&lt;/p&gt;

&lt;h3 id=&quot;section-44&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;データ系、ちょっとづつできてきている。&lt;/p&gt;

&lt;h3 id=&quot;section-45&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;CLOに関してはでっかい目標があり、今いい感じで達成出来て言ってると思う。
ここのデータ系部分もっとアクセル踏みきりたい。&lt;/p&gt;

&lt;h3 id=&quot;section-46&quot;&gt;[2015-03-08]&lt;/h3&gt;
&lt;p&gt;データ系、Dashboard作ることで少しづつ見えてきてる感がある&lt;/p&gt;

&lt;h2 id=&quot;section-47&quot;&gt;思考より試行&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/ariyasu&quot;&gt;@ariyasu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;読んで字の如く。&lt;/p&gt;

&lt;h3 id=&quot;section-48&quot;&gt;[2015-07-29]&lt;/h3&gt;
&lt;p&gt;デザイナ氏の提案で3時間に1回ハマり相談会をエンジニアチームで開催するようにした。コレもとりあえずヤル、駄目ならやめる、で即やろうってなったのは良い傾向な気がする。&lt;/p&gt;

&lt;h2 id=&quot;section-49&quot;&gt;100回書き直したら100回目が一番良いコード&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/voluntas&quot;&gt;@voluntas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;101回だったら101回目が最高だボケ。&lt;/p&gt;

&lt;h3 id=&quot;section-50&quot;&gt;[2014-10-22]&lt;/h3&gt;
&lt;p&gt;最近書き始めたコードベースを一回全部捨てた。意外に捨てれる。&lt;/p&gt;

&lt;h3 id=&quot;section-51&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;超雑に書いて捨てるのはいいかも。ただし、書くスピードが早くないと(WAFだったらそのWAFに慣れてないと)効果出にくい。&lt;/p&gt;

&lt;h3 id=&quot;section-52&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;それでも書いてると捨てにくいコードができてしまう。。捨て難いコードとそうじゃないコードの差、ちょっと考えて見る価値ありそう。&lt;/p&gt;

&lt;h3 id=&quot;section-53&quot;&gt;[2015-02-28]&lt;/h3&gt;
&lt;p&gt;この捨てるコードは「個人の中で完結する」事が大前提だな、って思う。 結局クソ雑に作ったプログラムの中身を知っているのはその人個人で、イケてない部分も改善点も、その人の中に溜まっていく。プロト作って文章化するコスト支払うくらいだったら、 書き直す時に同一人物がやるべき。そうでなければ捨てる用のコードを書く意味は、 コードの品質を上げるという意味において、半減から8割減な気がする。(とにかくプロダクトを出す、という意味はある。あるけど不健康だしそんなコード引き継ぎたくない。)(引き継ぐぐらいだったらちゃんと時間とって作り直し。そして流用によって開発時間短縮になるという考えを捨てる。)&lt;/p&gt;

&lt;h3 id=&quot;section-54&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;p&gt;プロダクトBは大分雑だけどCI/テスト/エラー通知/デプロイ/コードフォーマット/データモデルは揃ってる。基盤となるような部分だけ丁寧に作ってコードはTODOベースで開発していくの、有りだなと思う。 そもそも良くないコードはテストが無くて触れない、っていう不安が一番大きい。何が起こるかわからんから。CIがちゃんと回ってれば最悪壊れた事はわかるし、テストでカバーできてなくてもエラー通知があれば気づけるという安心感は大事だなぁと思った。&lt;/p&gt;

&lt;h2 id=&quot;section-55&quot;&gt;エンジニアのエゴとの向き合い方&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/_achiku&quot;&gt;@_achiku&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-56&quot;&gt;[2014-12-07]&lt;/h3&gt;
&lt;p&gt;自分で感じた部分だけど、真にシンプル且つスピード上げようと思ったら要らない部分がある。 具体的にはnginx + luaの部分。アレは結局不要だったので捨てた。 新しい技術使ってみる事と作り出す価値のバランス意識的だと思ってたけど案外だめだった。 けど、ちゃんと考えて、捨てて、期日までに作り直せたのは良い事だと思う。&lt;/p&gt;

&lt;h3 id=&quot;section-57&quot;&gt;[2015-02-01]&lt;/h3&gt;
&lt;p&gt;難しい。新しいモノを使いたい、っていうのはしょうが無い。 ただ、「ソレは本当に価値あるのか」って問い続けないと意味ないもの作ってしまうし、 「何を解決すべきか」という課題定義できずに作られたものは醜いと思う。 カッコいいエンジニアリングとは、ボトルネックになってる課題を言語化/構造化し、 シンプルに最小の手数で、狙った課題をぶっ潰す事だ。 ただコレも自分の中の宗教でしか無い部分だから、チームとしてどうするのかは引き続き考える必要がある。 例えばなんでも好きな技術をぶっ込めるSandBox的な社内サービスを作る、とか。&lt;/p&gt;

&lt;h3 id=&quot;section-58&quot;&gt;[2015-02-10]&lt;/h3&gt;
&lt;p&gt;新しいモノ/サービスに躊躇するのはやはり、「慣れ」の部分が大きい気がする。 凄いスピードで失敗できる環境があった方が良い。あと、違和感を持っても一旦実行してみる事が大事。 新しいライブラリの利点と欠点をいくら言語化してみようとも、結局触って実行してみないと見えない部分が沢山ある。 違和感を感じる領域が自分の限界なので、結局その先に行くべきか留まるべきかは踏み込んでみないとわからない。 個人でやれ、っていうのはある程度その通りなんだけど、チームとして上手くやってくには会社としてサポートしても良いのではないかと思う部分あり。会社が潰れない程度、というのを適切に調整してやっぱりSandboxt的サービスがあるといいかも。&lt;/p&gt;

&lt;h3 id=&quot;section-59&quot;&gt;[2015-02-23]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Slackでやりたい事/気になった事を共有&lt;/li&gt;
  &lt;li&gt;チームで話す時間の捻出&lt;/li&gt;
  &lt;li&gt;ただ自分の事をガーガー話していくのはなんとなくエゴい部分はある
    &lt;ul&gt;
      &lt;li&gt;http://www.slideshare.net/zigorou/ss-44864139&lt;/li&gt;
      &lt;li&gt;カッコいい技術とは課題を定義し、それを解決するもの、ってのはあるんだけど&lt;/li&gt;
      &lt;li&gt;でもそれだと定義しきれない課題は解決できないし見つけれない事になる&lt;/li&gt;
      &lt;li&gt;非常に難しい&lt;/li&gt;
      &lt;li&gt;でもまだそこまで高いレベルの事はやっていないから粛々と2015年の当たり前に近づける&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;もしかしたら自分はコンサル気取りのチャレンジできないコストカッターなだけなのかもしれないなと思った&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-60&quot;&gt;[2015-02-28]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;そうならないように毎週「モクモク会」を開催するようにしようと思う&lt;/li&gt;
  &lt;li&gt;単になんかのチュートリアルをやってみる会
    &lt;ul&gt;
      &lt;li&gt;裏目的は急進派が保守派に書き心地を共有し、お互いちゃんと書いて良い悪いを言い合えるようにしたい&lt;/li&gt;
      &lt;li&gt;ただ、本当にコレが最適な形なのかは不明&lt;/li&gt;
      &lt;li&gt;正直領域の責任者をひとり決めて全部丸投げる、の方が楽だし良い気もしている&lt;/li&gt;
      &lt;li&gt;チクが何か話したからといってフロントエンド側に対して適切な指摘ができる気がしない&lt;/li&gt;
      &lt;li&gt;逆もしかり&lt;/li&gt;
      &lt;li&gt;だけどとりあえずやってみる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;落ちないシステムではなく、落ちても障害が起きにくいシステムを作ろう
    &lt;ul&gt;
      &lt;li&gt;コレはモカさんにやってもらい中か&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-61&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;モクモク会、結局最近はやらなくなってしまった。&lt;/li&gt;
  &lt;li&gt;ISCON部的な活動するのがよいか。どうしても誰かがコスト払ってやらないと前に進まない気がする。&lt;/li&gt;
  &lt;li&gt;なのでもう勝手にしろこの時間は、とかでいい気もする。&lt;/li&gt;
  &lt;li&gt;悩ましい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-62&quot;&gt;[2015-07-29]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;結局仕事遂行上課題となってる部分を新しい考え方やフレームワークで解決する、という形にするのがベストか？&lt;/li&gt;
  &lt;li&gt;課題を定義、言語化する力&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-63&quot;&gt;「なんとなくできていない」のほとんどはそれを指摘する人の不在が原因です&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/voluntas&quot;&gt;@voluntas&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-64&quot;&gt;[2015-03-08]&lt;/h3&gt;
&lt;p&gt;この部分、確かにできてなかった。とりあえず自分がやいのやいの言う役をヤル事にする。KPTでは意識してできてない事を明確にする、解決できそうな工夫をする、という話は継続してできてる。&lt;/p&gt;

&lt;h3 id=&quot;section-65&quot;&gt;[2015-03-14]&lt;/h3&gt;
&lt;p&gt;結局約束を立てて、守る、くらいしか言えないのかもしれない。&lt;/p&gt;

&lt;h3 id=&quot;section-66&quot;&gt;[2015-05-27]&lt;/h3&gt;
&lt;p&gt;KPTで自分の事を棚に上げて理想論を振りかざすおじさん役が板についてきた。ツライ。ツライが、「じゃあ今から自分は理想論を振りかざします」って言うとキャラっぽくなってハードルさがってツラみ軽減される。&lt;/p&gt;

&lt;h3 id=&quot;section-67&quot;&gt;[2015-07-29]&lt;/h3&gt;
&lt;p&gt;KPTで継続中。現在は自分がリードなんだ、という気持ちを少しづつ抑えてる感ある。スケジュール切ったり基盤作ったりするモカさんが今はリードっていう形になってる。&lt;/p&gt;

&lt;h2 id=&quot;section-68&quot;&gt;好奇心を止めない事&lt;/h2&gt;

&lt;p&gt;by &lt;a href=&quot;https://twitter.com/mururururu&quot;&gt;@murururu&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-69&quot;&gt;[2015-06-18]&lt;/h3&gt;
&lt;p&gt;プログラミングうまくなる為に大事なことは好奇心を止めない事。あとパン屋やりたい。&lt;/p&gt;

&lt;h2 id=&quot;section-70&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;http://rokujyouhitoma.hatenablog.com/entries/2011/03/25&lt;/li&gt;
  &lt;li&gt;http://voluntas.hatenablog.com/entry/20110322/1300720173&lt;/li&gt;
  &lt;li&gt;http://d.hatena.ne.jp/mopemope/20110316/p1&lt;/li&gt;
  &lt;li&gt;http://d.hatena.ne.jp/gfx/20110314/1300118004&lt;/li&gt;
  &lt;li&gt;http://d.hatena.ne.jp/nishiohirokazu/20110309/1299598527&lt;/li&gt;
  &lt;li&gt;http://blog.madoro.org/mn/84&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2015/08/23/chiku-meki-memorial.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2015/08/23/chiku-meki-memorial.html</guid>
			</item>
		
			<item>
				<title>jungle: Simple UNIX-like AWS CLI</title>
				<description>&lt;p&gt;jungleというUNIX-likeにAWSを操作するCLIを作った。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/achiku/jungle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;利用方法抜粋&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/achiku/jungle/blob/master/README.md&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listing all EC2 instances&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jungle ec2 ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Filtering EC2 instances by Name tag using wildcard&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jungle ec2 ls *web*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Starting instance&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jungle ec2 up -i i-xxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Stopping instance&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jungle ec2 down -i i-xxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;SSH login to instance specified by instance id&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jungle ec2 ssh -i i-xxxxxx --key-file /path/to/key.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;SSH login to instance specified by Tag Name&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jungle ec2 ssh -n blog-web-server-01 --key-file /path/to/key.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;もっとUNIX-likeにAWSを操作するCLIが欲しかった&lt;/li&gt;
  &lt;li&gt;AWSのTag:Nameを起点にsshログイン/情報取得できる機構が欲しかった&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mitsuhiko/click&quot;&gt;Click&lt;/a&gt;というライブラリが良さそうだったから使ってみたかった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;既存の公式&lt;a href=&quot;https://github.com/aws/aws-cli&quot;&gt;awscli&lt;/a&gt;は最高にフレキシブルだし全AWSのサービスに対応しており、自分も大変お世話になっている。しかし、オプションがやたら長かったり、「それ要る？」っていう機能てんこ盛りだったりという特徴もある(これはawscliが「AWSサービスとの連携においてできないことは無い」ってのをたぶん目指して作られているのでしょうが無い)。その為、正直普段使いのCLIとしては、素のままに使いづらいと言わざるを得ない、と思った。&lt;/p&gt;

&lt;p&gt;また、今自分たちはAWSのTag:Nameを起点に色々なものを管理しており、サーバは作られては消えているので、IPやdomain等ではなくTag:Nameを使ってログイン/状態参照/ログ参照できるようにできたら便利だろう、というのがある。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解決策&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;それ&lt;a href=&quot;https://github.com/mirakui/ec2ssh&quot;&gt;ec2ssh&lt;/a&gt;でできない？
    &lt;ul&gt;
      &lt;li&gt;EC2にログインする部分は対応できそうだけど、bastionサーバ経由してssh proxyしたりとかできないっぽいし、これは結局IPとDomainを更新し続ける使い方だなと思った&lt;/li&gt;
      &lt;li&gt;追加で、ELBにぶら下がってるインスタンスのIDやらステータスやら確認したかった&lt;/li&gt;
      &lt;li&gt;追加で、ASGやLCもCLIから確認したかった&lt;/li&gt;
      &lt;li&gt;可能なら同じようなUIで&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;それawscliでインスタンスID指定してjqでpublic_ipを取得してsshにパイプで渡せばいいんじゃない？
    &lt;ul&gt;
      &lt;li&gt;EC2にログインする部分は対応できそうな気がする&lt;/li&gt;
      &lt;li&gt;ただ、その他微妙に他のAWSサービスでもやりたい事ある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;複雑なawscliのコマンドに分かりやすいaliasをつければよいのでは？
    &lt;ul&gt;
      &lt;li&gt;その通りそれでも可能だと思うけど、共有しづらくない？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;filterする部分とかは&lt;code class=&quot;highlighter-rouge&quot;&gt;--filters file://filters.json&lt;/code&gt;とかでJSONにまとめておけばよいのでは？
    &lt;ul&gt;
      &lt;li&gt;その通りそれでも可能だと思うけど、共有しづらくない？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;awscliは「不可能なことは無い」ように作られてるけど、もっとそぎ落として日々のオペレーションで良く使うものだけまとめてPyPIで公開してpip installしてもらった方が楽なのでは？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、色々書いてみたけど恐らく色んな代替案があるし、どれを実行してもなんとなくうまくできそうな気はしている。ただ、自分がよく実行するオペレーションを覚えやすい形で、ある程度の柔軟性だけ持たせて保存しておきたかった。あと、Click使いたかったしPyPIに何か登録してみたかったので書いた感もある。&lt;/p&gt;

&lt;p&gt;ちょっと誰か使ってみて感想きかせて欲しいっす！！！！初Python OSSっす！！！！&lt;/p&gt;
</description>
				<pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2015/08/23/amazon-with-jungle.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2015/08/23/amazon-with-jungle.html</guid>
			</item>
		
			<item>
				<title>Pythonライブラリを最新に保つ為に(hubot-piptools)</title>
				<description>&lt;p&gt;休みの日を使ってhubot-piptoolsというツールを作った。初OSSなので作った経緯やらを書く。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/achiku/hubot-piptools&quot;&gt;https://github.com/achiku/hubot-piptools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/hubot-piptools.png&quot; alt=&quot;hubot-piptools&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;提供しているサービスのバックエンドはPython&lt;/li&gt;
  &lt;li&gt;開発チーム構成
    &lt;ul&gt;
      &lt;li&gt;企画(ideyuta)&lt;/li&gt;
      &lt;li&gt;フロント/デザイン(moqada, ideyuta)&lt;/li&gt;
      &lt;li&gt;バックエンド(moqada, achiku)&lt;/li&gt;
      &lt;li&gt;インフラ/データ分析(achiku)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GitHub使って開発してる&lt;/li&gt;
  &lt;li&gt;CircleCI使ってCIまわしてる&lt;/li&gt;
  &lt;li&gt;大体HipChat使ってコミュニケーションしてる&lt;/li&gt;
  &lt;li&gt;社内のコミュニケーションでメールは使ってない&lt;/li&gt;
  &lt;li&gt;サービスモニタリング、ノーティフィケーションの類もHipChatに集約されてる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解決しようとした課題&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;現在利用しているPythonのライブラリ更新確認、更新実施に使うコストがかかる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;集約すると上記になるが、もう少し背景を書く。外部のライブラリはどんどん新しくなり、安定していき、機能が磨かれていっている。サービスを提供する側としては、ユーザが受け取る直接的価値である新規機能や機能改善に掛ける時間を最大化した上で、なおかつ眼に触れない部分の安定性も確保していきたい。&lt;/p&gt;

&lt;p&gt;この「ユーザの眼に触れない部分の安定化/最新化」は、自分たちが作るサービスが直接ユーザに届けれる価値といったものからは若干の距離があり、コスト的に手をかけてやる事が難しい部分だ。前提に書いたように少人数で運営している場合などは特に難しいと感じる。とはいえ、中期的に、ふと気づいたら返済できないくらい溜まった負債を抱えない為に(大量且つ一度に実行されるライブラリアップデートはエラーの切り分けがダルい)、細かく簡単に返済していく何がしかの仕組みがあると便利だなと考えた。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解決しようとした課題を分割した&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ライブラリ更新実施/コード修正/テスト修正のコスト&lt;/li&gt;
  &lt;li&gt;ライブラリ更新確認のコスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;ライブラリ更新実施/コード修正/テスト修正のコスト&lt;/h3&gt;

&lt;p&gt;ライブラリを更新したらAPIが変更になってたり、新規に潜り込んだバグの為にこっちのコード修正したり、テスト直したりしなければならないコストは、正直不可避だなと思う。互換性は壊れる時は壊れるし、バグは無くならない。それをもってして余りあるメリットを外部ライブラリからは受けているので、この部分は受け入れるもんだと思ってる。寧ろ感謝の気持ちを込めて再現性のあるIssueを上げたりPR出したりしていきたい。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;ライブラリ更新確認のコスト&lt;/h3&gt;

&lt;p&gt;なので、達成すべきは「チームが簡単に更新を知って各自動き始める事」なのではないかと考えた。ポイントは「個人が簡単に更新を知って動き始める事」では無いところだと思う。チームメンバー内でも忙しさの波ってのは変わり得て、誰かが忙しいから更新が滞るってなってしまうと結局上手くいかない。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;課題に対する解決策&lt;/h2&gt;

&lt;h3 id=&quot;pip-tools&quot;&gt;それ、pip-toolsで&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvie/pip-tools&quot;&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ結構便利なんだけど、結局自分のローカルでしか動かせない。だから「チームが簡単に更新を知って動き始める事」ってのはちょっと達成できそうにないなと思った。これ実行してHipChatに毎日張るってのもありといえばありだけど俄然やりたくない。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;それ、外部サービスで&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://requires.io/&quot;&gt;requires.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pypi-notifier.org/&quot;&gt;pypi-notifier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ使えば普通にイケそうだなって思った。特にrequires.ioは複数のrequirements.txtにも対応してるし、見栄えも良い上に、Security updateをちゃんと知らせてくれる。ただチームの状況には若干マッチしないのではないかと思った。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Privateリポジトリに対応させる時に課金する必要がある&lt;/li&gt;
  &lt;li&gt;ノーティフィケーションはメール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;外部サービスに対してお金は全然払っても良いと思うしチームでは幾つかのサービスに課金もしている。ただ、これは別にちょっと落ちててもあまり大きな問題にはなんないんじゃないかと思いと、GitHubから指定ファイル取ってきてパースしてPyPiに問い合わせるだけっしょっていう思いから、いきなりお金払ってサービスを受けるのには若干抵抗があった。あと、極力社内の会話はチャットツールに寄せたいってのも大きく、一旦採用を見送った。&lt;/p&gt;

&lt;h3 id=&quot;bot&quot;&gt;それ、Botで&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/achiku/hubot-piptools&quot;&gt;hubot-piptools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結局フィットするものが無かったので作った。弊社のチャットツールにはKanmukunというボットが住んでいる。コイツに以下の要件で機能を追加してみたら何となくいい感じになった。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;毎朝決まった時間に指定リポジトリのrequirementsファイルをパースしてPyPiに問い合わせ&lt;/li&gt;
  &lt;li&gt;問い合わせた結果、最新じゃないライブラリが分かるようにルームに通知&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;チャットツール内でライブラリのアップデートが通知されて、そこから自然発生的に「あーこれいつアップグレードする？」「ChangeLogどうなってんの？」「これは俺やっとくわ」とかの会話が発生し、何となく細々と時間空いてる時にアップグレードして行くことはできるんじゃないかなと。&lt;/p&gt;

&lt;p&gt;人間じゃないヤツから毎日通知されるのであれば嫌味も無いし、空いてる時に一つずつでもいいからサクッとアップグレードしてCI回せば良い。CI落ちたらChangeLog確認してテストとコード修正するなり、CI落ちてチャットツールに通知されて「やっぱ駄目だったから後回し」ってするなり、状況に合わせてチームで判断していけばいい。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;もっとチーム人数増えたりしたらもちろんこの解決策が有効じゃなくなってくることはあると思うけど、そんときはそんときで最適な形を考えます。実装に使った技術は全く新しくもなんともないですが、サーバサイドのCoffeeScript初めて書いたし、node周辺技術よく分かってないし、正直目的達成最優先でクッソ雑に書いてるのでマサカリ歓迎。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;kanmukunは色々できるいい子です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/achiku_kc.png&quot; alt=&quot;kusokora&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2015/02/02/hubot-piptools.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2015/02/02/hubot-piptools.html</guid>
			</item>
		
			<item>
				<title>AWS EMRでPrestoを動かしてshibからクエリ流してみる</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://qiita.com/advent-calendar/2014/distributedcomputing&quot;&gt;Spark, SQL on Hadoop etc. Advent Calendar 2014&lt;/a&gt;の最終日です。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;書くこと&lt;/h2&gt;
&lt;p&gt;AWS EMR/S3 + Hive + Presto + Hue + Shibの環境を構築し、簡単にトライアルしてみる。&lt;/p&gt;

&lt;h2 id=&quot;presto&quot;&gt;Prestoについて&lt;/h2&gt;
&lt;p&gt;Facebookがオープンソースで開発しているMPP(Massively Parallel Processing)クエリエンジン。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本家: &lt;a href=&quot;http://prestodb.io/&quot;&gt;Presto - Distributed SQL Query Engine for Big Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;TDさんのわかりやすい解説: &lt;a href=&quot;http://treasure-data.hateblo.jp/entry/2014/07/10/150250&quot;&gt;『Prestoとは何か，Prestoで何ができるか』&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ系統のクエリエンジン括りだとImpalaやApache DrillがOSSとして開発されている。MPPクエリエンジン/データベースの大まかな流れや種類、それぞれの使いドコロについてははコチラの記事が最高にまとまっていて参考になる。
&lt;a href=&quot;http://repeatedly.github.io/ja/2014/07/mpp-on-hadoop-redshift-bigquery/&quot;&gt;MPP on Hadoop, Redshift, BigQuery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Facebook以外にもNetfilixやTreasureData等、デカイデータ扱う企業がこぞって開発に参加している印象があり、開発のスピードが速く矢継ぎ早にリリースを繰り返し、リリース毎に便利になっていく。「商用DWHを置き換えっぞ」っていう気合の入った目標に見合うパフォーマンスに加え、SQL分析関数を早々に実装しANSI SQLを完コピしつつJSONも華麗に扱る上、既存Hadoopエコシステムとのつなぎ込み部分(HiveのDDL/メタストアを利用)や、RDBMSとのつなぎ込み部分(MySQL Connector等)含め、なんというか、本当にいつも大変お世話になっています。&lt;/p&gt;

&lt;h2 id=&quot;shib&quot;&gt;shibについて&lt;/h2&gt;
&lt;p&gt;PrestoとHiveにクエリを実行できるWebUI。最初はnodeで作られていて不思議だなーって思ったのですが、このエントリを読んでnodeを選んだ理由がわかり、かっこいいなーと思っております。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本家: &lt;a href=&quot;https://github.com/tagomoris/shib&quot;&gt;shib -WebUI for query engines: Hive and Presto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;なぜnodeか: &lt;a href=&quot;http://d.hatena.ne.jp/tagomoris/20110805/1312536706&quot;&gt;Node.jsなWebアプリでJobQueueなしにラクラク巨大処理を実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aws-emr&quot;&gt;AWS EMRについて&lt;/h2&gt;

&lt;p&gt;AWSが提供するAPIで操作できるマネージドHadoop環境。APIを利用してHadoopクラスタを作成し、監視等もよしなにやってくれる。要らなくなったら消しておける。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本家: &lt;a href=&quot;http://aws.amazon.com/jp/elasticmapreduce/&quot;&gt;AWS Elastic MapReduce&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;知る限り最強のEMR資料: &lt;a href=&quot;https://media.amazonwebservices.com/AWS_Amazon_EMR_Best_Practices.pdf&quot;&gt;Best Practices for Amazon EMR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前置きが長くなるとアレなので早速awscliを利用し環境を構築。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;環境概要&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HadoopはEMRを使ってクラスタ起動&lt;/li&gt;
  &lt;li&gt;AMI 3.3.1 (Hadoop Amazon 2.4.0, Hive 0.13.1)&lt;/li&gt;
  &lt;li&gt;Hive/HueはEMRデフォルトの機能を使ってインストール&lt;/li&gt;
  &lt;li&gt;Hiveメタストアは一旦ローカルで&lt;/li&gt;
  &lt;li&gt;PrestoはEMRのBootstrap Actionを使ってインストール(v0.85)&lt;/li&gt;
  &lt;li&gt;ShibはEMRのBootstrap Actionを使ってインストール(v0.3.8)&lt;/li&gt;
  &lt;li&gt;S3上にあるファイルにPrestoからクエリを投げる&lt;/li&gt;
  &lt;li&gt;S3からHDFS上にフラットファイルで持ってきてPrestoからクエリを投げる&lt;/li&gt;
  &lt;li&gt;S3からHDFS上にORCファイルに変換して持ってきてPrestoからクエリを投げる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;構築方法&lt;/h2&gt;

&lt;h3 id=&quot;aws-cli&quot;&gt;AWS CLIの準備&lt;/h3&gt;

&lt;p&gt;CUIからEMRのAPIを叩くためにawscliを利用します。Python若干古いけどとりあえず実行した環境は以下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python 2.7.5&lt;/li&gt;
  &lt;li&gt;virtualenv==1.10.1&lt;/li&gt;
  &lt;li&gt;virtualenvwrapper==4.1.1&lt;/li&gt;
  &lt;li&gt;awscli==1.6.10&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkvirtualenv emr
(emr)$ pip install awscli
(emr)$ pip freeze | grep awscli
awscli==1.6.10
(emr)$ mkdir ~/.awscli
(emr)$ cat &amp;lt;&amp;lt;-EOF &amp;gt;&amp;gt;  ~/.awscli/config
[profile development]
aws_access_key_id=&amp;lt;development_access_key&amp;gt;
aws_secret_access_key=&amp;lt;development_secret_key&amp;gt;
region=ap-northeast-1
EOF
(emr)$ cat &amp;lt;&amp;lt;-EOF &amp;gt;&amp;gt;  $VIRTUAL_ENV/bin/activate
export AWS_CONFIG_FILE=~/.awscli/config
export AWS_DEFAULT_PROFILE=development
source aws_zsh_completer.sh
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;s3&quot;&gt;S3に必要なプログラムを配置&lt;/h3&gt;

&lt;p&gt;2014/12/25時点でPrestoの最新版は0.89ですが、0.86以降はJava8が必要で、EMRで立ち上げるAmazon Linuxに入っているJavaがJava7という都合上今回は0.85を利用して環境構築します。たぶんJava8入れて頑張ればできるはずですがサクッといきましょう。&lt;/p&gt;

&lt;p&gt;今回使ったソースは以下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.85/presto-server-0.85.tar.gz&quot;&gt;presto-server-0.85.tar.gz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/0.85/presto-cli-0.85-executable.jar&quot;&gt;presto-cli-0.85-executable.jar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tagomoris/shib/tree/v0.3.8&quot;&gt;shib v0.3.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記をダウンロードし、適当なS3キーに配置しておきます。以下例。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.85/presto-server-0.85.tar.gz
$ aws s3 cp presto-server-0.85.tar.gz s3://yourbucket/libs/
$ wget https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/0.85/presto-cli-0.85-executable.jar
$ aws s3 cp presto-cli-0.85-executable.jar s3://yourbucket/libs/
$ wget https://github.com/tagomoris/shib/archive/v0.3.8.zip
$ unzip v0.3.8.zip &amp;amp;&amp;amp; mv shib-0.3.8 shib
$ tar cvfz shib.tar.gz shib
$ aws s3 cp v0.3.8.zip s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;s3-1&quot;&gt;S3に必要な設定ファイルを配置&lt;/h3&gt;

&lt;p&gt;shibがPrestoにクエリするための設定ファイル。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var servers = exports.servers = {
  listen: 3000,
  fetch_lines: 1000,   // lines per fetch in shib
  query_timeout: null, // shib waits queries forever
  setup_queries: [],
  storage: {
    datadir: &#39;./var&#39;
  },
  engines: [
    { label: &#39;PrestoCluster&#39;,
      executer: {
        name: &#39;presto&#39;,
        host: &#39;localhost&#39;,
        port: 8080,
        catalog: &#39;hive&#39;,  // required configuration argument
        support_database: true,
        default_database: &#39;default&#39;
      },
      monitor: null
    },
  ],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 cp shib-config.js s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;s3bootstrap-action&quot;&gt;S3に必要なBootstrap Actionを配置&lt;/h3&gt;

&lt;p&gt;Bootstrap ActionとはEMRが管理するHadoopクラスタ構築時に差し挟める任意の処理です。HiveやPig等はデフォルトでEMRのAPIからインストールを指定できるのですが、それ以外のソフトウェアに関してはBootstrap Actionで指定してインストール、設定を行う事になります。&lt;/p&gt;

&lt;h4 id=&quot;prestobootstrap-action&quot;&gt;PrestoのBootstrap Action&lt;/h4&gt;
&lt;p&gt;こちらのAWS Labリポジトリにあるので流用します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/emr-bootstrap-actions&quot;&gt;awslabs/emr-bootstrap-actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/emr-bootstrap-actions/tree/master/presto&quot;&gt;Presto BootstrapAction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PrestoのBootstrap Actionはそんなオフィシャルにサポートしてはいないですが、READMEもちゃんと書いてあるし、そこまで複雑ではないので要件によっては自作も有りかなと思います。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/awslabs/emr-bootstrap-actions/master/presto/install-presto.rb
$ aws s3 cp install-presto.rb s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;shibbootstrap-action&quot;&gt;shibのBootstrap Action&lt;/h4&gt;

&lt;p&gt;shibは公開されているBootstrap Actionが無いのでシェルを雑に書いた。プロセスの立ち上げ部分もnohupとバックグラウンド実行でペイっと起動してるだけなので本番運用に耐えれるしろものではないですが一旦これで。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install-shib.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;shib_tarball_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;config_file_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;

sudo yum -y update
sudo yum install -y git
sudo yum install -y nodejs npm --enablerepo&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epel

aws s3 cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shib_tarball_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /home/hadoop/shib.tar.gz
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/hadoop &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar xvfz /home/hadoop/shib.tar.gz
  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/hadoop/shib &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm install
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
aws s3 cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;config_file_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /home/hadoop/shib/config.js
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/hadoop/shib &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nohup npm start &amp;amp;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これも同様にS3にあげる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 cp install-shib.sh s3://yourbucket/libs/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aws-cli-1&quot;&gt;AWS CLIでクラスタ立ち上げ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;create-cluster.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

aws emr create-cluster --ami-version 3.3.1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --name &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (AMI 3.3.1 Hive + Hue + Presto + shib) &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; date &lt;span class=&quot;s1&quot;&gt;&#39;+%Y%m%d%H%M&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --tags &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;presto-on-emr &lt;span class=&quot;nv&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;development &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --ec2-attributes &lt;span class=&quot;nv&quot;&gt;KeyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yourkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --applications &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hive &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hue &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --instance-groups file://./large-instance-setup.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --bootstrap-actions file://./bootstrap-presto.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --log-uri &lt;span class=&quot;s1&quot;&gt;&#39;s3://yourbucket/jobflow_logs/&#39;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --no-auto-terminate &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --use-default-roles &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --visible-to-all-users
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;※AWSアカウントによっては–use-default-rolesをつけているとPrestoからS3にクエリできない事があります。ご注意。&lt;/p&gt;

&lt;p&gt;instance-groupとbootstrap-actionsは長くなったのでJSONファイルに切り出しています。内容は以下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;large-instance-setup.json&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
     &quot;Name&quot;: &quot;emr-master-production&quot;,
     &quot;InstanceGroupType&quot;: &quot;MASTER&quot;,
     &quot;InstanceCount&quot;: 1,
     &quot;InstanceType&quot;: &quot;m3.xlarge&quot;
  },
  {
     &quot;Name&quot;: &quot;emr-core-production&quot;,
     &quot;InstanceGroupType&quot;: &quot;CORE&quot;,
     &quot;InstanceCount&quot;: 2 ,
     &quot;InstanceType&quot;: &quot;m3.xlarge&quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;bootstrap-presto.json&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    &quot;Name&quot;: &quot;Install/Setup Shib&quot;,
    &quot;Path&quot;: &quot;s3://yourbucket/libs/install-shib.sh&quot;,
    &quot;Args&quot;: [
        &quot;s3://yourbucket/libs/shib.tar.gz&quot;,
        &quot;s3://yourbucket/libs/shib-config.js&quot;
    ]
  },
  {
    &quot;Name&quot;: &quot;Install/Setup Presto&quot;,
    &quot;Path&quot;: &quot;s3://yourbucket/libs/install-presto.rb&quot;,
    &quot;Args&quot;: [
        &quot;--s3-path-to-presto-server-bin&quot;,&quot;s3://yourbucket/libs/presto-server-0.85.tar.gz&quot;,
        &quot;--s3-path-to-presto-cli&quot;, &quot;s3://yourbucket/libs/presto-cli-0.85-executable.jar&quot;
    ]
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;shibhue&quot;&gt;Shib/Hueアクセス方法&lt;/h2&gt;

&lt;h3 id=&quot;foxyproxyssh&quot;&gt;FoxyProxyとSSHトネリングを利用&lt;/h3&gt;
&lt;p&gt;FoxyProxyインストールしてXMLを設定。sshコマンドを使ってトネリング。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://getfoxyproxy.org/&quot;&gt;FoxyProxy - Firefox/Chrome&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sample-emr-proxy.xml&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;foxyproxy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;proxies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;proxy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;emr-socks-proxy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2322596116&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;notes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fromSubscription=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manual&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selectedTabIndex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lastresort=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animatedIcons=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;includeInCycle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#0055E5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;proxyDNS=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;noInternalIPs=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoconfMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pac&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clearCacheBeforeUse=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disableCache=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clearCookiesBeforeUse=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rejectCookies=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;matches&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*ec2*.amazonaws.com*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*ec2*.amazonaws.com*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isRegEx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isBlackList=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isMultiLine=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;caseSensitive=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fromSubscription=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*ec2*.compute*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*ec2*.compute*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isRegEx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isBlackList=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isMultiLine=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;caseSensitive=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fromSubscription=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10.*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://10.*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isRegEx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isBlackList=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isMultiLine=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;caseSensitive=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fromSubscription=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/matches&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;manualconf&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8157&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;socksversion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isSocks=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/proxy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/proxies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/foxyproxy&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -i ~/yourkey.pem -ND 8157 hadoop@youremrhost.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでFoxyProxyがインストールされているブラウザを介すると、以下のURLにアクセスするとShibにアクセスできます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://youremrhost.compute.amazonaws.com:3000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、以下のURLにアクセスするとHueにアクセスできます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://youremrhost.compute.amazonaws.com:8888&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aws-securitygroup&quot;&gt;AWS SecurityGroupを変更&lt;/h3&gt;
&lt;p&gt;EMRのMasterノードに付与されるSecurityGroupにオフィスのIPからの3000/8888を許可する。これはIPアドレスでのアクセス制限はできますが、通信自体は暗号化されずにHTTPでやりとりされるのであまりお勧めしません。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;パフォーマンス&lt;/h2&gt;
&lt;p&gt;パフォーマンスもやりたかった。。S3とHDFS FlatFileとHDFS ORCでかなり差がでるのでたぶん後ほど追記します。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;いかがでしたでしょうか。
PrestoとEMRはまだそんなにビッグじゃないけど、大きくなりそうなデータに対して、インタラクティブクエリとスケールしやすさを与えてくれるいいコンビなんじゃないかなと思っております。
もうあと25日は2時間しか残ってませんがハッピーメリークリスマス！&lt;/p&gt;

</description>
				<pubDate>Thu, 25 Dec 2014 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2014/12/25/presto-hue-shib-on-awsemr.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2014/12/25/presto-hue-shib-on-awsemr.html</guid>
			</item>
		
			<item>
				<title>それは機能です</title>
				<description>&lt;p&gt;もうすぐ今の会社に入って1年経つのでエモ文章を書く。&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;30歳1歩手前の自分の考えをまとめておく。35歳の自分へ。人間の機能編。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人間を機能の集合と捉える&lt;/li&gt;
  &lt;li&gt;機能を研ぎ澄まし、発動スピード、マッチング精度を向上させる&lt;/li&gt;
  &lt;li&gt;無意識に発動する機能に意識的になる&lt;/li&gt;
  &lt;li&gt;人間の機能とその先&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;公開するにあたって&lt;/h2&gt;

&lt;p&gt;以下書くことは自分が生きやすいように考えた体系なので自分以外には当てはまらない部分が沢山あると思う。しかも大概が2008年から2014年までのたった6年働いた経験を元にエモ要素多めにひねり出しているものなので、読むのであれば、これは真理とかの類じゃなくてこういう考え方もあると思って読んで頂けるといいんじゃないかと思う。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;人間を機能の集合と捉える&lt;/h2&gt;

&lt;p&gt;人間は機能の塊だ。機能とは例えば「スケジュールを上手く組んで予定通り事を進める」だったり、「突拍子も無い事を言ってみんなを笑わせる」であったり、「結構速く走れる」だったり、「鼻毛が出てる人に言葉を使わずに鼻毛が出てる事を気づかせてあげる」事だったりする。抽象的に言えば、意識的な反復と反復の中で経験される成功/失敗から成功の確率を上げていける行動全て、を機能と言う事にする。もちろん、成功と失敗の間はグラデーションになっているので一概には言えない部分もあるけど、「何が目指す先に合致する成功なのか、失敗なのか、グラデーションの中でも許容できる範囲を適切に決める」という事も、意識的な反復と学習によって精度は上げれるので、一種の機能という事ができると思う。&lt;/p&gt;

&lt;p&gt;ダラダラ書いたけど、人間の行動の大体を「反復と学習で精度を向上できる」ものだという位置づけにする、ってことだ。&lt;/p&gt;

&lt;p&gt;こういう定義をしたのは、それが真理だから、という類のものではなく、それが色々便利だから、という理由による。幾つかその理由を上げてみる。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;1. 苦手があんまり無くなる&lt;/h4&gt;

&lt;p&gt;こういう定義にしておくと、まず「何かが苦手」という意識が少なくなる。どういう事かというと、上記定義にもとれば、成功の確率が高く無い、うまくできない、というのは「反復した回数が少ない」と「学習速度が遅い」の二つに分離でき、どちらかに問題がある場合に発生する成功率の低さを言い表した事にすぎないからだ。&lt;/p&gt;

&lt;p&gt;ただし、これは好きや嫌いとは異なる。&lt;/p&gt;

&lt;p&gt;もちろん好きであった方が機能の精度向上スピードは段違いに速いし、嫌いな事をやってたらテンション下がる上に効率はよくない。自分は組織として価値を作って対価を貰う活動を5年くらいやって来て、色々な仕事に関わってきているけど、今のところ「絶対やりたくない」というレベルの仕事には出会ったことはない。ただ、上に書いたような理由で「好きだ、嫌いだ」は口に出して言うけど、「苦手」とはあまり言わなくなった。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;2. 名前を付けれる、再現性が有る&lt;/h4&gt;

&lt;p&gt;機能として精度を上げていくと、同じような状況で、その機能を再度実行できるようになる。自分は特別な才能は持ちあわせておらず、反復と学習以上の結果を人生で出した事がない。運も無ければ閃きも無いし、大体結果は反復と学習に見合う結果か、その瞬間の体調によってはそれ以下だ。&lt;/p&gt;

&lt;p&gt;愚痴っぽくなったけど、機能という単位で自分ができる事を認識しておけば、それを再現させることも、組み合わせて使う事も、何も体系が無い場合よりも簡単になるような気がしている。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;3. 個人のアイデンティティと機能を分離できる&lt;/h4&gt;

&lt;p&gt;仕事をしていると、他の人の仕事を見てイマイチだなーと思う事が正直たまにある。ただ、その時も結局そういった機能を備えてない、つまり反復と学習が足りてないだけで、反復と学習すれば身につくものだから、その人自体にどうこう思わないようになる。前職時代に顕著だったけど、自分は何かを達成しようと動いている時、比較的頭に血が登りやすく、今思い出すだけでも結構痛い、個人攻撃とも取れるような行動をとっていたと思う。恥ずい。ただ機能の概念を脳味噌に染み込ませるにつけ、そういう時にも冷静に行動できるようになった気がする。この部分に関してはまだまだうまいことやれる気がしている。&lt;/p&gt;

&lt;p&gt;上記は他の人のアイデンティティとの関わり方の話しだけど、この考え方は自己のアイデンティティと機能も分けておけるので、誰かから何かしら指摘を受けた際に結構素直になれるっていうのもいいところだ。自己のアイデンティティと機能が密結合になっていると、指摘された人が持つ機能の否定を個人の否定だと受け取られるケースが多く、そういう人たちには良い指摘が集まらず、もったいないなと思う。&lt;/p&gt;

&lt;p&gt;個人のアイデンティティと機能を密結合させ、突き詰めていけば、もはや誰も手が及ばないくらい物凄い機能を発達させそうな気もしているけど、機能とアイデンティティの密結合は自分にはむいてねーなと思っているのが現状です。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;機能を研ぎ澄まし、発動速度、マッチング精度を向上させる&lt;/h2&gt;

&lt;p&gt;機能は精度を向上させることができる。これはつまり、「反復回数」と「学習速度」という2つの要素を向上させ、現状を成功と定義した状態に持っていける可能性と速度を上げれるという事だ。この機能の精度に加えて、マッチング精度があるように思う。&lt;/p&gt;

&lt;p&gt;目の前にある前提条件を元に、どの機能を発動させれば良い結果が得られそうか、というのがマッチングの精度。機能の精度、現状と発動させる機能のマッチング精度、の2要素に分けておくことで、今回は機能の精度が足りなかったのか、それとも現状にそぐわない機能を発動させてしまったのか、何かが上手く行かなかった場合、後から分析する時に役に立つ気がしている。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;無意識に発動する機能に意識的になる&lt;/h2&gt;

&lt;p&gt;上記のように、機能の精度、マッチング精度を上げていくと、比較的物事が上手く進むようになる。迷わない。何度も上手くいきはじめるとこの傾向はより一層強化される。特に、価値を作って対価を貰う人になってからしばらくすると、自分がいる状況、つまりは職場の状況に合わせてこの傾向がどんどん強化されていく。最初は意識して発動させていた機能も、やがて発動コストは下がり、マッチングスピードも上がり、なんならもはやほとんど意識しないで実行できるようになる。&lt;/p&gt;

&lt;p&gt;これはとても良いことだと思っている。自分は組織として価値を作って対価を貰う人になった瞬間、ただのゴミ同然だったので、機能が充実していき、結果が出てくる過程は当時大変嬉しかったのを覚えている。&lt;/p&gt;

&lt;p&gt;また、上記は意識してつけた機能の話に特化しているけども、意識しないでつけた機能もたくさんある。「特に意識してつけたわけではないけど、効率が良いが故に無意識的に発動している機能」、そのようなタイプのほうが、意識的に身につけた機能よりも多い印象がある。&lt;/p&gt;

&lt;p&gt;例えば、目を血走らせた友達に「今週金曜日は羊を捌いて太陽の神に捧げるからナタを用意しておいてくれ」と鬼気迫る感じで言われたら、「おい、大丈夫か」ってなる。でもこの「おい、大丈夫か」ってなる際に発動してる機能がある。20 - 21世紀という自分が生きる時間的制約、日本という地理的制約を前提に発達した、「やばそうなものを嗅ぎ分ける機能」。機能の名称からだいぶ適当な香りがしているけど、要は「自分が意識せずに発達してしまった機能」って事。誰も「太陽の神とか羊を捌くとか言ってるヤツに近寄ると危ない」と感じとる機能を意識して発達させたわけではないはずだ。&lt;/p&gt;

&lt;p&gt;上の2つのタイプの機能、無意識に身についた機能、意識的に身につけたけど発動に無意識になってしまっている機能を、出くわす度にちゃんと意識してやらねばいかんなー、というのが30歳目前にして最近特に思う事。&lt;/p&gt;

&lt;p&gt;「え、おかしくない？」って自動的に考えてしまう時、「あ、それ完璧だから速攻やろうよ！」って反射的に思う時、何をベースにそれらの判断が出てきているのか、蓄積もある程度あるだけに一つ一つ真摯に向かい合う時期な気がしている(ダラダラ考え続けるっていう意味ではない)。&lt;/p&gt;

&lt;p&gt;特に自分の場合は職場も職業も変わったので、ことさらこの課題感が大きくなってるってのもある。こういう風に考えておくと、「大企業からスタートアップに転職したから今までの考え方を捨てろ！」的な雑な議論ではなく、「今まで培ってきた機能はこういうコンテクストだったから効果を発揮していた。今のコンテクストはこのように変化しているので、既存機能を捨てるのではなく、脇に除けておいて新しく機能を作ろう。その際に脇にある機能から一部借りても良い。」とかって話ができる。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;人間の機能とその先&lt;/h2&gt;

&lt;p&gt;ダラダラ長ったらしく書いたことは全て、戦術レベルの話だ。目的は決まっており、達成すべき目標が有り、そこに効率的に向かう手段をどのように捉えるかという問に対する自分なりの答えが「人を機能の塊と捉える」だ。&lt;/p&gt;

&lt;p&gt;恐らく、機能だけを発達させていって、それに忠実に従うのであるなら、自分は職を変えてないし、今の職場にも転職してない。なかなか言語化しづらい部分ではあるんだけど、自分はソフトウェアを書くという行為自体がとても好きだし、今の会社がやっている事は先が見えないしよくわからん事で楽しそうだったから職業を変えて職場も変えた。&lt;/p&gt;

&lt;p&gt;なんとなく好きである、ワクワクする、っていうのに従う姿勢はたぶん中学生くらいからずっと持ってて、サッカーしに高校行ったのも、大学アメリカに行ったのも、バックパッカーしてたのも、炎舞のプロ目指したのも、怪しげな外資コンサルに入社したのも、また今の会社で働いているのも、この辺りの気持ちに正直でいたことが大きく作用しているんだろうと思う。&lt;/p&gt;

&lt;p&gt;そして経験上そういう気持ちに従って動いている時は、振り返った時大体いい選択してる。こういう選択の時、やっぱり機能という考え方は弱いのかもしれないと感じている部分はある。もしかしたら複数機能を無意識に総動員して選択しているのかもしれないけど、好きである、ワクワクする、っていうのを体系的に捉えるのは難しいなと思う。&lt;/p&gt;

&lt;p&gt;冷徹に自分を機能で割っていくと、余る部分がほんのすこしだけある。&lt;/p&gt;

&lt;p&gt;その理で割り切れない残りカスこそ、自分が自分である所以である「好き」や「嫌い」や「ワクワクする」なのかもしれないというのが今思うところ。そういった説明のつかない部分は定期的に引きこもって言語化を試みている。定量的に計測しにくい上に個人的で言語化しにくく、理由無く礼賛される部分に関しては思考停止しがちなので、諦めずに今後も言語化を試みようと思う。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;35歳の自分へ&lt;/h2&gt;

&lt;p&gt;進捗どうですか？&lt;/p&gt;

&lt;p&gt;どうなってるかあんましよくわからんけど、がんがんソフトウェア書いていこうぜ。&lt;/p&gt;

</description>
				<pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2014/10/31/functional-human.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2014/10/31/functional-human.html</guid>
			</item>
		
			<item>
				<title>PyCon 2014でPython+EMRについて発表してきた</title>
				<description>&lt;p&gt;今週末、PyCon JPに初参加し、初技術系発表してきた。&lt;/p&gt;

&lt;p&gt;YouTubeでの発表もみたんですが、噛みまくっててヤバメな表情してるタイミングがあるんですが、あれは発表してる時間を計測しているiPhoneの電池が切れた時と、後ろに「あと5分」をお知らせする紙が上がった時です。スーパー焦った。&lt;/p&gt;

&lt;p&gt;また、全般的にテンション高めだったのは単に元気になる飲み物をキメてたからです。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;謝辞&lt;/h3&gt;

&lt;p&gt;PyConの運営をしてくださったみなさん、本当にありがとうございました。あのような大規模なイベントをあれだけスムーズに運営されるスキル、本当に凄いです。&lt;/p&gt;

&lt;p&gt;tagomorisさんのData Analysis Flowの図をベースに前半は説明行いました。恐らくあの図がなかったら発表前日にあのような資料を作ることはできなかったと思います。ぼんやりしている概念を図に落としこんで公開して頂き、本当にありがとうございます。(ちょっと無断利用なので行儀は良くないなと思いつつ焦りまくっていて一言入れれなかったのは反省してます。。)&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;発表資料&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;d93ef1101e17013278dc06e915146373&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;section-2&quot;&gt;発表サマリ&lt;/h3&gt;
&lt;p&gt;大体こんな感じでした。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「なぜその構成なのか」に焦点を置いた事例の共有
    &lt;ul&gt;
      &lt;li&gt;会社の個別具体的な「リソース制約」、「実現したいこと」、を紹介&lt;/li&gt;
      &lt;li&gt;上記の制約と要件を実現する構成の提示&lt;/li&gt;
      &lt;li&gt;各構成の概念的要素内でのポイント&lt;/li&gt;
      &lt;li&gt;逃げ場のある構成、大事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;「入門以上」を目指したPython + EMR活用方法の共有
    &lt;ul&gt;
      &lt;li&gt;aws-cli最高&lt;/li&gt;
      &lt;li&gt;Hiveの設定もまあまあできる&lt;/li&gt;
      &lt;li&gt;Pythonのスクリプトから起動するEMR&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;感想&lt;/h3&gt;

&lt;p&gt;発表すること本当に大事だなーと思いました。以下大事だと思った理由。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;発表後話しかけてもらえる
    &lt;ul&gt;
      &lt;li&gt;これは完全に人に話しかけるの苦手な自分には助かる事でした&lt;/li&gt;
      &lt;li&gt;自分はエンジニアと名乗るようになって1年目なのでエンジニア系の友人があまりおらず、知り合いが増えたのは大変うれしかったです&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;仕事で考えていた事がまとまるし精度が上がる
    &lt;ul&gt;
      &lt;li&gt;誰かに効率的に何かを伝えなければいけない状態で資料を書くとやはりまとまります&lt;/li&gt;
      &lt;li&gt;また、「あれ、俺なんでこうしたんだっけ」と問いなおすいい機会だなと思いました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反省点は以下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;若干オーディエンスとトークがマッチしてない感あった
    &lt;ul&gt;
      &lt;li&gt;最初にログ集計に関わる方に挙手お願いしたのですが部屋の中の1割くらいでした&lt;/li&gt;
      &lt;li&gt;そこからさらにHadoop, Hive, EMRと行くとドンドン人数が減って行きました&lt;/li&gt;
      &lt;li&gt;入門的な話はしたくなかったので細かめの内容にしたのですが、ちょっと聞きたい話にマッチしてなかったかもしれないと思いました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;読み上げる練習あんまりしてなかった
    &lt;ul&gt;
      &lt;li&gt;噛んでたし、言い回しをその場で考えるのって難しい&lt;/li&gt;
      &lt;li&gt;次回はもっとスラスラできるようになろうと思う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やっぱりカンファレンスは発表する方が聞きに行くだけよりも得るもの大きいっていうのが実感として腑に落ちました。2日目のキーノートで西尾さんが言っていたCommunicationによって盲点に気づき、人間として強化されていいくっていうのが、経験として実感できた感じになります。なので今後も何か知見が溜まってきたらどのような領域でも可能な限り公開していきたいなと思います。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;広告&lt;/h3&gt;

&lt;p&gt;Kanmuでは引き続きエンジニア募集中です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kanmu.co.jp/jobs/engineer&quot;&gt;Kanmuエンジニア採用情報&lt;/a&gt;&lt;/p&gt;

&lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;height: 240px; width: 490px;&quot; src=&quot;https://widget.wantedly.com/projects/9282/widget_h&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;なんでギネスついでる社長がでてくんだよ。。。&lt;/p&gt;

</description>
				<pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2014/09/15/pyconjp-2014.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2014/09/15/pyconjp-2014.html</guid>
			</item>
		
			<item>
				<title>MQTT as a Service sango + paho-mqtt Python</title>
				<description>&lt;p&gt;本日のMQTT(もきゅっと)の会直前に時雨堂さんがMQTT as a Service, sangoをリリースしていたので触ってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sango.shiguredo.jp/&quot;&gt;sango&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubアカウントを利用して上記サイトから無料登録する。ログインするとユーザ名、パスワードが出てくるのでメモる。
次にMQTTのPythonクライアントライブラリである&lt;a href=&quot;https://pypi.python.org/pypi/paho-mqtt&quot;&gt;phao-mqtt&lt;/a&gt;を準備。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip install phao-mqtt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;これでphao-mqttのPythonライブラリが入るので、サンプルを元に以下のような雑プログラムを作ってみた。&lt;/p&gt;

&lt;h3 id=&quot;subpy&quot;&gt;sub.py&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho.mqtt.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mqtt&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Connected with result code &#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;achiku@github/#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;yourname@github&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;yourpass&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;free.mqtt.shiguredo.jp&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_pw_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keepalive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;pubpy&quot;&gt;pub.py&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho.mqtt.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mqtt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;yourname@github&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;yourpass&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;free.mqtt.shiguredo.jp&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;achiku@github/test_topic&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_pw_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keepalive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;[{}] Sending message to sango.&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;[{}] message from pub coming through sango!&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;0.5秒おきにsango MQTT brokerにメッセージをPublishするpub.pyと、sangoが受けているメッセージをSubscribeし続けるsub.pyという形。
まずはsub.pyを起動しておく。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python sub.py
Connected with result code 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上のような表示が出れば適切にサービスに繋がり、Subscribeできてる。
次にpub.pyでメッセージをsangoに送る。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python pub.py
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;7] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8] Sending message to sango.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9] Sending message to sango.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;sub.py側で以下のような表示が確認できるはず。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;7] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8] message from pub coming through sango!
achiku@github/test_topic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9] message from pub coming through sango!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;それでは新宿であいましょう！！(時間がやばい)&lt;/p&gt;

</description>
				<pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate>
				<link>http://akirachiku.com//2014/08/29/mqtt-sango.html</link>
				<guid isPermaLink="true">http://akirachiku.com//2014/08/29/mqtt-sango.html</guid>
			</item>
		
	</channel>
</rss>
