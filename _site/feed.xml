<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>包丁一本さらしに巻いて</title>
		<description>Python + Data</description>
		<link>http://achiku.github.io</link>
		<atom:link href="http://achiku.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Django Best Practice への道 #2</title>
				<description>&lt;p&gt;DjangoのWebアプリを開発している際、リファクタ/テスト拡充のために集めた情報をまとめます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://achiku.github.io/2014/04/01/road-to-django-best-practice.html&quot;&gt;Djangoプロジェクト/アプリケーション/設定ファイル構成&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;&quot;&gt;Djangoテスト戦術&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Django Model/View/From/Template戦術&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;&quot;&gt;書くこと&lt;/h2&gt;

&lt;p&gt;Django Best Practiceへの道の続きで、Djangoテスト戦術について書きます。Djangoでテストをする際に、どうしたら効率的に書けるか、メンテナンスしやすくなるか、ということに焦点を置いて書きます。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;書かないこと&lt;/h2&gt;

&lt;p&gt;テストをするべき、テストはいらない、どこまではするべき、といった類の話は書きません。する、しない、いまはしない、どこまではする、は各チームや開発者がその時置かれているコンテクストに非常に強く依存している為、閾値的なものや考え方を書くのは非常に難儀だなぁ、というのが素直なところです。それよりもテストするのが少しでも楽になり、どのようなコンテクストでも、取れる選択肢の幅が広がる方法を書きたいです。&lt;/p&gt;

&lt;h1 id=&quot;_3&quot;&gt;前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;既に本番リリースされてる&lt;/li&gt;

&lt;li&gt;Django 1.5で作られてる&lt;/li&gt;

&lt;li&gt;中/小規模Webアプリケーション(テーブルサイズ10 - 20)&lt;/li&gt;

&lt;li&gt;開発/運用1人(achiku), アドバイザー/レビューアー1人(moquada)&lt;/li&gt;

&lt;li&gt;バックエンド処理ロジックは比較的シンプル&lt;/li&gt;

&lt;li&gt;Celeryを使った非同期タスクとして動く処理がある&lt;/li&gt;

&lt;li&gt;JSはクリティカルな処理では使ってない(表示整形くらい)&lt;/li&gt;

&lt;li&gt;トラフィックは少ない&lt;/li&gt;

&lt;li&gt;インフラはAWS(VPC + ELB + EC2 + RDS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_4&quot;&gt;何をテストすべきか&lt;/h1&gt;

&lt;p&gt;作っているのはDjango前提のWebサービスという前提で、テストすべきものをいくつかのグループに分けて考えてみました。テスト対象を明確にすることで、「どこにテストを書けばいいのか」、「何をテストすればいいのか」と迷わずにテストに着手できるようになるかなと思います。テスト対象の構成が上の方ほど単純で下に行くほど複雑になります(下に行くほどテストするまでにリクエスト/レスポンスが通るレイヤーが多い)&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;関数レベル(Python)&lt;/h2&gt;

&lt;p&gt;可能な限り少ないブランチの関数レベルテスト。テストするのは各クラスのメソッドor関数内分岐レベル。最小粒度のテスト。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テスト用ファイル名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;test_models.py, test_forms.py, etc&lt;/p&gt;

&lt;h2 id=&quot;js&quot;&gt;関数レベル(JS)&lt;/h2&gt;

&lt;p&gt;JSの関数レベルテスト。自分が担当している範囲ではココをテストしなければならない部分は存在しないため、特に対応はしていないのであまり書ける事がない。moquada氏担当の部分はココがかなり肝になっているので、テストリファクタが終わったら何かまとめておいて貰う予定です。BusterJS、JsTestDriver利用か。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テスト用ファイル名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;未定&lt;/p&gt;

&lt;h2 id=&quot;url&quot;&gt;URLルーティングレベル&lt;/h2&gt;

&lt;p&gt;URLのルーティング、ステータスコード、HTTPレスポンス内の文字列をテスト。正直2軍感はあるけど一応書いとくか、くらい。業界ではsmoke testと呼ばれることもあるらしい。テスト書く時間がない場合に、一応動いてる事だけ保証する時に使ったりする。Djangoについてる権限モジュール(django.contrib.auth.decorators, django.contrib.admin.views.decorators)をそのまま使うと権限ない場合に403が返らずに、Adminのログイン画面にリダイレクトされるので注意が必要。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テスト用ファイル名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;test_urls.py&lt;/p&gt;

&lt;h2 id=&quot;_5&quot;&gt;機能レベル&lt;/h2&gt;

&lt;p&gt;複数の関数を集めて、URLでルーティングさせた先が機能、と考えてる。例えば、「ブログ記事編集」、「コメンツ追加」、みたいな粒度のもの。各機能別テストデータセット別のテストを書く。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テスト用ファイル名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;test_[app_name].py&lt;/p&gt;

&lt;h2 id=&quot;_6&quot;&gt;ブラウザレベル&lt;/h2&gt;

&lt;p&gt;JS経由でリクエストされる際の機能テスト。seleniumを利用して実際にブラウザからテストする。現在自分が担当している部分ではほぼ存在しない。moquada氏担当の部分はココがかなり肝になっているので、テストリファクタが終わったら何かまとめておいて貰う予定です(大事な事なので2度言いました)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テスト用ファイル名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;test_browser.py&lt;/p&gt;

&lt;p&gt;テストの種類の分類や定義や呼び方は色々ありすぎてよくわからない部分が正直多いです。unit testとソレ以外だ！っていう人もいるし、integration testとacceptance testは分かれてるべきだ！という人もいるし。なので上で分けた分類も、そういうのもあるよね、程度で。今カンムで利用しているDjangoアプリの特性的にはしっくり来ています。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;何をテストすべきか、その際に何を使うべきか、使う時にどういう方針で使うのがいいか、がハイパーまとまってる資料。この資料に一番影響されてると思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/699/testing-and-django&quot;&gt;YouTube: Testing and Django&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://carljm.github.io/django-testing-slides/#1&quot;&gt;Testing and Django&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://pycon-2012-notes.readthedocs.org/en/latest/testing_and_django.html&quot;&gt;Testing and Django Note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抜粋&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    What type of test to write?

    Write system tests for your views.
    Write Selenium tests for Ajax, other JS/server interactions.
    Write unit tests for everything else (not strict).
    Test each case (code branch) where it occurs.
    One assert/action per test case method.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のStackOverflowの記事も何を、どうテストしていくのかに関して実例交えながら語ってる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11543117/what-are-the-best-practices-for-testing-different-layers-in-django&quot;&gt;What are the best practices for testing “different layers” in Django?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下の資料はユニットテストを書く利点と注意点がわかりやすく整理されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pyvideo.org/video/631/fast-test-slow-test&quot;&gt;YouTube: Faste test, slow test&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://pycon-2012-notes.readthedocs.org/en/latest/fast_tests_slow_tests.html&quot;&gt;Faste test, slow test Note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_7&quot;&gt;どうテストするのか&lt;/h1&gt;

&lt;p&gt;「何を」テストするのか、が明確にした後、次は「どうやって」テストするのかの話をします。その為にまず、テストに求めるものを洗い出し、テストに利用するツールとテストの書き方が、それらの要件を満たすように設計していきました。&lt;/p&gt;

&lt;p&gt;一旦今Djangoアプリのツールとして何を利用しているか列挙。&lt;/p&gt;

&lt;h2 id=&quot;_8&quot;&gt;全レベル共通&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;py.test&lt;/li&gt;

&lt;li&gt;pytest-cov&lt;/li&gt;

&lt;li&gt;pytest-pep8&lt;/li&gt;

&lt;li&gt;pytest-xdist(検証中)&lt;/li&gt;

&lt;li&gt;pytest-django&lt;/li&gt;

&lt;li&gt;factory_boy&lt;/li&gt;

&lt;li&gt;PyHamcrest&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;_9&quot;&gt;機能レベル&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WebTest&lt;/li&gt;

&lt;li&gt;django-webtest&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;_10&quot;&gt;ブラウザレベル&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;selenium&lt;/li&gt;

&lt;li&gt;django-selenium&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_11&quot;&gt;テストに求めるもの&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;テスト実行スピードが速い&lt;/li&gt;

&lt;li&gt;同一処理別データパターンのテストを効率良く書ける&lt;/li&gt;

&lt;li&gt;プログラム本体のコードが変更された際にも追従しやすい&lt;/li&gt;

&lt;li&gt;debugしやすい&lt;/li&gt;

&lt;li&gt;テストカバレッジが見れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;順に解説していきます。&lt;/p&gt;

&lt;h2 id=&quot;_12&quot;&gt;テスト実行スピードが速い&lt;/h2&gt;

&lt;p&gt;細かくテストを実行する習慣をつけるには、テスト開始から終了までの時間が短ければ短い程いいです。1回ファイル編集して全てのテスト通すまでに数十分とかかかるのはやめたい。それだと誰もテスト実行しなくなってしまう。一応弊社ではGitHubにプッシュした際にCIサーバで全テストを流すようにしているので大きな問題にはならないはずですが、今後テストが増えてきた時のためにも、ローカルで全テストを流してもなるべく早く終わるようにしておきたい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;設定的工夫&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ローカルマシンでテスト実行する場合はローカルテスト専用設定を使うようにしています。 &lt;a href=&quot;http://achiku.github.io/2014/04/01/road-to-django-best-practice.html&quot;&gt;詳細はコチラ&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ローカルテスト用の設定はsqliteのインメモリDBを利用する。&lt;/li&gt;

&lt;li&gt;fixture(djangoのコンテクストでの)を撲滅してセットアップのスピードを上げる。&lt;/li&gt;

&lt;li&gt;southのmigrationテストをオフる。&lt;/li&gt;

&lt;li&gt;PASSWORD_HASHERSの変更。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tell-k.hatenablog.com/entry/2013/10/10/202208&quot;&gt;Django で unittest を高速化する(主にDBの話し)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.5/topics/testing/overview/#speeding-up-the-tests&quot;&gt;Speeding up the tests&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/yuheiomori0718/20130615/1371305730&quot;&gt;Djangoでテストを速くするためにいろいろやってみた&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://carljm.github.io/django-testing-slides/#1&quot;&gt;Testing and Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;コード的工夫&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;兎に角I/Oを避ける。DBに触れないcustom filters/forms/utils等のテストはDBを作らない。
&lt;ul&gt;
&lt;li&gt;django.test.TestCaseではなく、unittest.TestCaseを利用&lt;/li&gt;

&lt;li&gt;pytest-djangoを利用する場合は、DBを利用する場合にのみ@pytest.mark.django_dbデコレータを利用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;WAFのレイヤーを可能な限りまたがない。
&lt;ul&gt;
&lt;li&gt;レイヤー(view/forms/models)をまたぐ度に処理が走るしセットアップも時間がかかる。&lt;/li&gt;

&lt;li&gt;ロジックはDjangoのモジュールをかませないようにして、単独でテストできるようにしておく。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/pelme/testing-django-applications-with-py-dot-test-europython-2013&quot;&gt;Testing Django applications with py.test (EuroPython 2013)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://carljm.github.io/django-testing-slides/#1&quot;&gt;Testing and Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;_13&quot;&gt;同一処理別データパターンのテストを効率良く書ける&lt;/h2&gt;

&lt;p&gt;以下箇条書きでなぜコレを求めているのかを列挙します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;データだけ違って処理は同じなら同じ関数でテストしたい(同じもの書きたく無い)&lt;/li&gt;

&lt;li&gt;けどテストケースとしては分けたい&lt;/li&gt;

&lt;li&gt;便利なassertは使いたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結構データだけ変えて同じ処理を流したいというケースって多い気がします。例えばバッチのコミット件数の閾値や、UIからの入力項目、URLのルーティングで200が返ってくることを確認したいだけのテスト等。そんな時にはコピペで対応、という事もできますし、コンテクストによってはそれも許容する場合はあると思いますが、正直めんどくさくて嫌です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工夫&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;py.testのparametrizeアノテーションを利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同一処理別データパターンのテストを効率良く書く為、データ別にテストケースを生成するのがデフォルトの機能として備わっているpy.testを利用することとしました。他にも幾つか選択肢がありましたが、py.testの他の機能(fixtureやxdist)も利用したかったので、もともとunittest形式だったテストを全てpy.test形式に書き換えました。py.testはunittest形式のテストもpy.test形式が混ざった状態でテスト実行できるので順次移行できて助かりました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;以下StackOverflowから見つけたparametrized testを簡単にしてくれるライブラリ一覧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    Some of the tools available for doing parametrized tests in Python are:

    Nose test generators (only for function tests, not TestCase classes)
    nose-parametrized by by David Wolever (also for TestCase classes)
    Unittest template by Boris Feld
    Parametrized tests in py.test
    parametrized-testcase by Austin Bingham
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2798956/python-unittest-generate-multiple-tests-programmatically&quot;&gt;Python unittest: Generate multiple tests programmatically?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unittest形式でテストを生成する際に非常に参考になった記事。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/nullpobug/20091204/1259863417&quot;&gt;TestCaseを拡張しよう&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://feldboris.alwaysdata.net/blog/unittest-template.html&quot;&gt;Unittest template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;py.testに惚れるきっかけとなった記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pytest.org/latest-ja/&quot;&gt;Pytest本家&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://pythontesting.net/framework/pytest/pytest-fixtures-nuts-bolts/&quot;&gt;pytest fixtures nuts and bolts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two Scoops of Djangoの人の記事。本の中ではテストはコピペでもオッケー！という発言があったし正直そうだとも思うけど、それを回避する策に力注ぐほうが楽しいと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pydanny.com/pytest-no-boilerplate-testing.html&quot;&gt;pytest: no-boilerplate testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もうunittestには戻れない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/roothybrid7/items/9717137fbec2bedfd81d&quot;&gt;pytestを実戦投入してみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;サンプル&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;例えばURLのルーティングとちゃんとステータスコード200が返ってきて、所定の文字列がレスポンスに含まれている、という事をテストしたい場合、WebTestと組み合わせる事で以下のように書くことができます。&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;python&#39;&gt;&lt;span class=&#39;c&#39;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;pytest&lt;/span&gt;
&lt;span class=&#39;kn&#39;&gt;from&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;hamcrest&lt;/span&gt; &lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;assert_that&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;contains_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;equal_to&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;


&lt;span class=&#39;nd&#39;&gt;@pytest.mark.django_db&lt;/span&gt;
&lt;span class=&#39;nd&#39;&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;login_user, url, message, status_code&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=0&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=1&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=2&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=3&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/1&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン詳細&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupon/add&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポンの登録&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=0&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=1&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=2&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/?status=3&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン一覧&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupons/1&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポン詳細&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;/coupon/add&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;クーポンの登録&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;test_coupon_urls&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;app&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;login_user&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;message&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;status_code&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;):&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;resp&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;app&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;get&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;login_user&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;assert_that&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;resp&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;status_code&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;equal_to&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;status_code&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;assert_that&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;resp&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;content&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;contains_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;message&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;シンプル！&lt;/p&gt;

&lt;p&gt;ちゃんとpy.testのfixtureやその他の機能の詳細についても書きたい。実装レベルでの工夫等も後ほど書く。&lt;/p&gt;

&lt;h2 id=&quot;_14&quot;&gt;プログラム本体のコードが変更された際にも追従しやすい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;データセットアップの際にfixtureではなくfactory_boyを利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Djangoのfixture遅いしメンテナンスめんどくさいのでfactory_boyを利用して各テストケースに必要な分だけレコードを作成してテスト実行しています。この部分は正直まだまだ工夫の余地があるなぁという印象。もう少し時間がたったら書いてきたテストを見なおしてリファクタして行く際にまた工夫が生まれればいいなと思ってます。&lt;/p&gt;

&lt;h2 id=&quot;debug&quot;&gt;debugしやすい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;py.testを利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;py.testはnoseよりも細かくエラーを出してくれます。pytest.vimを使って何度でも素早くテストできるようにしてます。テストを先に書く事のメリットひしひしと感じ始める今日このごろ。特に関数レベルのテスト。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.restartr.com/2013/04/05/my-first-pytest/&quot;&gt;pythonのテストにpytestを使ってみた&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://blog.comutt.jp/entry/2013/12/03/230000&quot;&gt;TDD Advent Calendar 2013 3日目: vim と py.test で TDD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;_15&quot;&gt;テストカバレッジが見れる&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;py.testのカバレッジプラグインを利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;カバレッジ至上主義ではありませんが、あくまでも目安として、またちょっとしたゲーム感覚でテストを楽しめるようないい工夫だと思います。また、カバレッジレポートを見ることでまだ通っていないブランチが視覚的に分かるのも嬉しいところです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sakito.com/2012/09/pytest-pep8-coverage.html&quot;&gt;py.test で pep8 と coverage を同時にチェックする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_16&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;今回はだいぶ概念的な話がおおくなってしまいました。。本当はもっとゴリッとしたテストセットアップ方法の工夫や、WebTestとpy.testの連携や、conftest.pyの配置と役割、とかを書きたかったのですが、今回は一旦ココまでとします。&lt;/p&gt;

&lt;p&gt;次回はDjangoテスト戦術の第二弾でもっと実装よりの話をします。てかなげーな。このポスト。。&lt;/p&gt;</description>
				<pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/04/04/road-to-django-best-practice.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/04/04/road-to-django-best-practice.html</guid>
			</item>
		
			<item>
				<title>Django Best Practiceへの道 #1</title>
				<description>&lt;p&gt;DjangoのWebアプリを開発している際、リファクタ/テスト拡充のために集めた情報をまとめます。&lt;/p&gt;

&lt;p&gt;ベストプラクティスとか言っちゃってますが、まだまだ良くできるはずだし、現在前提としているものが変わればまったく別のアプローチが最適、ということもあり得るので、「ベストプラクティスへの道」って事で。エンジニア、と名乗るようになってまだ4ヶ月程なので、わからんことばかりです。是非皆様のご意見聞いてみたいです。大体以下の感じで書いていきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Djangoプロジェクト/アプリケーション/設定ファイル構成&lt;/li&gt;

&lt;li&gt;Djangoテスト戦術&lt;/li&gt;

&lt;li&gt;Django Model/View/From/Template戦術&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;戦略よりも、自分が入社した時既にあった前提に対応する為に考えた戦術を中心に書いていきます。また、自分の思考をダンプして記録しておくという目的もあるので、記述が冗長な部分もありますがご容赦ください。&lt;/p&gt;

&lt;h1 id=&quot;&quot;&gt;前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;既に本番リリースされてる&lt;/li&gt;

&lt;li&gt;Django 1.5で作られてる&lt;/li&gt;

&lt;li&gt;中/小規模Webアプリケーション(テーブルサイズ10 - 20)&lt;/li&gt;

&lt;li&gt;開発/運用1人(achiku), アドバイザー/レビューアー1人(moquada)&lt;/li&gt;

&lt;li&gt;バックエンド処理ロジックは比較的シンプル&lt;/li&gt;

&lt;li&gt;Celeryを使った非同期タスクとして動く処理がある&lt;/li&gt;

&lt;li&gt;JSはクリティカルな処理では使ってない(表示整形くらい)&lt;/li&gt;

&lt;li&gt;トラフィックは少ない&lt;/li&gt;

&lt;li&gt;インフラはAWS(VPC + ELB + EC2 + RDS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_2&quot;&gt;プロジェクト/アプリケーション構成&lt;/h1&gt;

&lt;h2 id=&quot;_3&quot;&gt;アプリケーション構成に何を求めるか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;巨大な1ファイルのコードが存在しえない&lt;/li&gt;

&lt;li&gt;コードの見通しが自然とよくなる&lt;/li&gt;

&lt;li&gt;各モジュールの依存関係が少ない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Djangoにはプロジェクトとアプリケーションという思想がある。Djangoが生まれた時からある概念で、1つのプロジェクトの中に、複数のアプリケーションを入れ、各アプリケーションの依存は可能な限り少なくし、取替え可能な形にする事を目指している。では実戦レベルでどのように分割するのが良いのか、という指針を実例を交えながら語ってくれているのが以下の資料。2008年の資料だけど、Djangoの根本的な思想は変わっていないので未だ有効だと思う。あと、”Do one thing, and one thing well”って本当にすごいかっこいいし、この思想を実装しているGNUやUNIX的なものはさらにかっこいいと思う。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DjangoCon 2008: Reusable Apps&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=A-S0tqpPga4&quot;&gt;YouTube: DjangoCon 2008: Reusable Apps&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://media.b-list.org/presentations/2008/pycon/reusable_apps.pdf&quot;&gt;Developing reusable apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の資料を参考に設計する利点は主に2つ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;メンテナンスしやすくなる&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このアプリケーション分割をすることで、「巨大な1ファイルのコード」が存在し得ない構成となる。誰かが意識してメンテしにくい巨大な1ファイルを作らないようにする、ではなく、そもそもそんなものが発生し得ない構成にすることが肝要だと思った。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;各モジュールの再利用可能性向上&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;普通の単独自社サービスであれば、そこまで再利用性を高める為に時間をかける必要はない気がするけど、Djangoを使った自社サービスが複数ある中でのライブラリ作成や、個別のお客さんによってカスタマイズが必要なパッケージ、というシチュエーションであればある程度時間をかけて設計する価値はあると思う。実際上の資料内でJamesさんが自社パッケージを各お客さん用にカスタマイズする際に、プラガブルに設計してて助かったぜ、という話がある。&lt;/p&gt;

&lt;h2 id=&quot;_4&quot;&gt;プロジェクト構成に何を求めるか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;共通な部分と固有な部分を直感的に分けたい&lt;/li&gt;

&lt;li&gt;何かを作る時にどのディレクトリに入れるべきか可能な限り迷いたくない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;_5&quot;&gt;実装&lt;/h2&gt;

&lt;p&gt;他の流派もあるのですが、一旦現在は以下のような形に落ち着いています。まだまだ継続改善中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    project
    ├── apps
    │   ├── appA
    │   ├── appB
    │   └── appC
    ├── core
    │   └── settings
    ├── docs
    │   ├── files
    │   └── styleguide
    ├── fixtures
    ├── libs
    │   └── management
    │       └── commands
    ├── requirements
    ├── server-config
    ├── static
    ├── templates
    └── tests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順に概要を説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Djangoアプリケーションを格納。&lt;/li&gt;

&lt;li&gt;アプリケーションを何単位で作るのかは先述の資料を参考に要議論。&lt;/li&gt;

&lt;li&gt;apps内のディレクトリ構成は、”‘tests”’, ”‘migrations”’, ”‘templates”‘が基本。(South利用前提)&lt;/li&gt;

&lt;li&gt;“Do one thing, and one thing well.”の原則。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;core&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;設定ファイル群を格納。各環境用の設定ファイルを&lt;code&gt;settings&lt;/code&gt;ディレクトリに格納しておく。(詳細後述)&lt;/li&gt;

&lt;li&gt;wsgiファイルを格納。&lt;/li&gt;

&lt;li&gt;ROOT_URLを格納し、必ずここから各アプリケーションにルーティング。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;docs&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクトのドキュメントを格納(仕様等)&lt;/li&gt;

&lt;li&gt;README.rstをリポジトリのトップにおいておき、そこから参照させる形で。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;fixtures&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Djangoのコンテクストでのfixtureは極力使わないけど、マスタデータセットアップで必要な場合は使う(住所コード等)。&lt;/li&gt;

&lt;li&gt;テスト時に利用するアップロード用ファイルを置いておく。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;libs&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;各Djangoアプリケーションから利用される共通的な処理を格納、定数を格納。&lt;/li&gt;

&lt;li&gt;カスタムで作成するmanage.pyのコマンドもここに入れていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;requirements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクトに必要なライブラリを記載したrequirements.txtを入れる。&lt;/li&gt;

&lt;li&gt;各環境用 x テスト+開発に必須なrequirementsを分け、同じライブラリが複数ファイルに入るのを防ぐ。&lt;/li&gt;

&lt;li&gt;requirements/common.txt, test.txt, development.txt等(詳細は後で)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;server-config&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サーバ(OS)レベルで必要なファイルの格納(e.g. bash_profile, ssh_config)。&lt;/li&gt;

&lt;li&gt;ミドルウェア(e.g. uwsgi, nginx, celery, supervisor)を動かす為に必要なファイルの格納。&lt;/li&gt;

&lt;li&gt;本当はこの辺Ansibleで統一したい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;static&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS, JS, Image等を入れる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;templates&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリ全体で使いまわすテンプレ(ナビゲーションとか)を格納。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;tests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;各Djangoアプリケーション内のテストで共通的に利用するものを格納。&lt;/li&gt;

&lt;li&gt;具体例でいうと、”‘factories.py”’, ”‘conftest.py”‘。(factory_boy, py.test利用前提)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この辺りはDjangoのテンプレート系ライブラリをかなり参考にしました。 有名なものになると、色々な知見が凝縮されており、読んでいるだけで楽しくなれます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rdegges/django-skel&quot;&gt;django-skel&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/amccloud/django-project-skel&quot;&gt;django-project-skel&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/theduke/django-kickstart&quot;&gt;django-kickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考になるライブラリ群&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.djangopackages.com/grids/g/project-templates/&quot;&gt;Django Packages - Project Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_6&quot;&gt;設定ファイル構成&lt;/h1&gt;

&lt;h2 id=&quot;_7&quot;&gt;設定ファイル構成に何を求めるか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;各環境別に異なる設定が明確&lt;/li&gt;

&lt;li&gt;全環境で共通な設定が明確&lt;/li&gt;

&lt;li&gt;各環境別に柔軟な設定変更が可能&lt;/li&gt;

&lt;li&gt;ローカルでは自分だけの設定も入れれる柔軟性が必要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1番目と2番めが非常に重要だと思っていて、何かの変数を追加したら他のファイルにも追加する必要がある、とか、変数は複数ファイルに追加したけど、値は各ファイル別にしなければいけないとか本当に良くない。そういった類のものを撲滅する、という指針で以下のようにしました。&lt;/p&gt;

&lt;h2 id=&quot;_8&quot;&gt;設定ファイル実装&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;common.pyに各環境共通の設定を入れる (大事なのは「本当に共通で使う」ものだけ入れる。DBの設定は後のimportで上書きされるから一応いれる、とかやらない。)&lt;/li&gt;

&lt;li&gt;各環境用の設定ファイルを作成し、最初にcommon.pyから設定を全てimport
&lt;ul&gt;
&lt;li&gt;development.py&lt;/li&gt;

&lt;li&gt;staging.py&lt;/li&gt;

&lt;li&gt;production.py&lt;/li&gt;

&lt;li&gt;local_test.py&lt;/li&gt;

&lt;li&gt;ci.py&lt;/li&gt;

&lt;li&gt;local.sample.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;各環境用設定ファイルの最後でlocal.pyから設定をimportする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;common.py以外は大体以下のような形になってます。&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;python&#39;&gt;&lt;span class=&#39;c&#39;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#39;kn&#39;&gt;from&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;core.settings.common&lt;/span&gt; &lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;  &lt;span class=&#39;c&#39;&gt;# NOQA&lt;/span&gt;

&lt;span class=&#39;n&#39;&gt;DEBUG&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;bp&#39;&gt;True&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;bp&#39;&gt;True&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;ENVIRONMENT&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;staging&amp;#39;&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;DATABASES&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;s&#39;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;s&#39;&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;s&#39;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;django2&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;s&#39;&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;hoge_user&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;s&#39;&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;hoge_password&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;s&#39;&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;hogehost&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
        &lt;span class=&#39;s&#39;&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;try&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;
    &lt;span class=&#39;kn&#39;&gt;from&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;core.settings.local&lt;/span&gt; &lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;  &lt;span class=&#39;c&#39;&gt;# NOQA&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;except&lt;/span&gt; &lt;span class=&#39;ne&#39;&gt;ImportError&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下若干わかりにくそうな部分を解説します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;local.sample.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;各開発者がローカルで開発/テストする際に独自で入れる設定用ファイル。 local.sample.py内には特に何も設定されておらず、以下のようなコメントがあるのみ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# -*- coding: utf-8 -*-
# ローカル環境用設定ファイル。以下のようにコピーして利用すること。
# cp local.sample.py local.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;core/settings/local.py&lt;/code&gt;は&lt;code&gt;.gitignore&lt;/code&gt;に記載しておき、リポジトリからは無視しておく。この&lt;code&gt;local.py&lt;/code&gt;に各開発者用の独自設定を入れていきます。&lt;a href=&quot;http://www.amazon.com/Two-Scoops-Django-Best-Practices/dp/098146730X&quot;&gt;Two Scoops of Django&lt;/a&gt;では各開発チームメンバーの独自設定もVCSに入れる事を推奨しています。理由としてあげているのは、「有害な設定を入れていたら指摘できる」「便利な設定を入れていたら共有できる」という事でしたが、正直独自設定を入れなくとも上記2点は達成可能なのであまりしっくり来ていませんので弊社では採用していません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;local_test.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ローカルでテストを実行する時に利用する設定で、PASSWORD_HASHERSとかを変更、DBをsqliteのインメモリにしたり、テストを高速化するための工夫が施してある。この中身についてはテスト戦術で詳細に書きます。&lt;/p&gt;

&lt;p&gt;その他の設定ファイルは大体名前の通りの内容が入ってます。&lt;/p&gt;

&lt;h2 id=&quot;_9&quot;&gt;設定ファイル切り替え実装&lt;/h2&gt;

&lt;p&gt;manage.pyにはcore.developmentを直書きで指定し、開発用サーバ(manage.py runserver)は開発用設定がデフォルトで動くようにしています。これでローカルには特に環境変数設定せずともシンプルにmanage.py runserverすれば開発用サーバを起動できるようになってます。&lt;a href=&quot;https://gist.github.com/voluntas/6855579&quot;&gt;Djangoトラノマキ&lt;/a&gt;参照&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;python&#39;&gt;&lt;span class=&#39;c&#39;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;os&lt;/span&gt;
&lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;sys&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;__name__&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;os&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;environ&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setdefault&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;core.settings.development&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;

    &lt;span class=&#39;kn&#39;&gt;from&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;django.core.management&lt;/span&gt; &lt;span class=&#39;kn&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;execute_from_command_line&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;execute_from_command_line&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;sys&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各環境(CI、ステージング、本番)用に作成したファイルは、アプリケーション実行ユーザの環境変数にDJANGO_SETTINGS_MODULEを設定して切り替える方式としています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
export DJANGO_SETTINGS_MODULE=core.config.staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;参考文献&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/nullpobug/20131015/1381763671&quot;&gt;Djangoのsettingsの分割と構造化について –偏った言語信者の垂れ流し&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://gist.github.com/voluntas/6855579&quot;&gt;Django トラノマキ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://surgo.jp/2010/02/django.html&quot;&gt;パーフェクトな Django の設定ファイル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次回はDjangoにおけるテスト戦術について書きます。&lt;/p&gt;</description>
				<pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/04/01/road-to-django-best-practice.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/04/01/road-to-django-best-practice.html</guid>
			</item>
		
			<item>
				<title>カンムを支える技術</title>
				<description>&lt;p&gt;入社して4ヶ月くらいたったので一旦まとめておきます。 フォーマットはどこかで見たことがある形ですが、その通りです。 &lt;a href=&quot;https://gist.github.com/voluntas/6308998&quot;&gt;完全に参考にさせて頂いてます。&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;&quot;&gt;仕事&lt;/h1&gt;

&lt;p&gt;クレジットカード会社様と協力し、オンラインカード明細にクーポンを出してます。&lt;/p&gt;

&lt;p&gt;サービスの詳細は以下から。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kanmu.co.jp/advertisers&quot;&gt;Kanmu Card Linked Offer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;_2&quot;&gt;組織&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;社長&lt;/li&gt;

&lt;li&gt;デザイナー&lt;/li&gt;

&lt;li&gt;営業&lt;/li&gt;

&lt;li&gt;総務&lt;/li&gt;

&lt;li&gt;エンジニアA&lt;/li&gt;

&lt;li&gt;エンジニアB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;計6名&lt;/p&gt;

&lt;p&gt;achikuはエンジニアBです。エンジニア絶賛募集中です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kanmu.co.jp/jobs/engineer&quot;&gt;https://kanmu.co.jp/jobs/engineer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;_3&quot;&gt;言語&lt;/h1&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;カンムが提供するプロダクト全てに利用されています。特に強制しているわけではないのですが、今のところ全てPythonでまかなえているため、 今後もPythonで行けるところまで行く予定です。3.xへは利用しているWeb Application Frameworkが対応するタイミングで移行を考えています。(Django 1.7から)&lt;/p&gt;

&lt;p&gt;エンジニア3人(社長含む)は全員Python好きです。&lt;/p&gt;

&lt;h2 id=&quot;coffeescript&quot;&gt;CoffeeScript&lt;/h2&gt;

&lt;p&gt;フロント側はCoffeeScriptで書かれています。JavaScriptで書かれていた部分も最近置き換えました。正直自分はまだしっかりCoffeeScriptを把握できてないので今後じっとり触っていきたいです。&lt;/p&gt;

&lt;h2 id=&quot;sass&quot;&gt;Sass&lt;/h2&gt;

&lt;p&gt;フロント側のマークアップは全てSassに移行しました。デザイナーが主に利用してます。バックエンドの人でも学習コストそんなに高くなく利用できて重宝してます。 CoffeeScriptと合わせてgruntを使ってコンパイルするスタンダードな使い方。最近はカンム独自CSSフレームワークを作成中で近日公開予定です。&lt;/p&gt;

&lt;h2 id=&quot;hiveql&quot;&gt;HiveQL&lt;/h2&gt;

&lt;p&gt;ログはAmazon EMR上にHadoop + Hiveを立ち上げて集計し、S3に格納後、DBに入れる方式をとっています。現在絶賛リファクタ中で、ログ集計基盤の設計方針ベストプラクティスを研究中。&lt;/p&gt;

&lt;h2 id=&quot;scheme&quot;&gt;Scheme&lt;/h2&gt;

&lt;p&gt;SICPの勉強用に利用。&lt;/p&gt;

&lt;h2 id=&quot;restructuredtext&quot;&gt;reStructuredText&lt;/h2&gt;

&lt;p&gt;主にプロジェクトのドキュメント用に利用しています。GitHubの自動レンダリングにお任せしており、Sphinxは現在利用していません。お客さん用のマニュアルの類が必要になった際は使う予定。&lt;/p&gt;

&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;/h2&gt;

&lt;p&gt;GitHubとTrello使う時は大抵Markdownにお世話になってます。&lt;/p&gt;

&lt;h1 id=&quot;_4&quot;&gt;環境&lt;/h1&gt;

&lt;h2 id=&quot;os&quot;&gt;OS&lt;/h2&gt;

&lt;p&gt;Ubuntuの最新版をメインで利用しています。&lt;/p&gt;

&lt;h2 id=&quot;packer&quot;&gt;Packer&lt;/h2&gt;

&lt;p&gt;ローカルで使うBoxファイル生成に利用しています。時雨堂さんのPacker Templateを利用中。 &lt;a href=&quot;https://github.com/shiguredo/packer-templates&quot;&gt;shiguredo/packer-templates&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;VirtualBoxと組み合わせて、ローカルに環境を作成する際に利用しています。VMWareは使ってみたいですが、まだ未検証のステータスです。&lt;/p&gt;

&lt;h2 id=&quot;virtualbox&quot;&gt;VirtualBox&lt;/h2&gt;

&lt;p&gt;Vagrantで仮想環境を作るために利用。&lt;/p&gt;

&lt;h2 id=&quot;fabric&quot;&gt;Fabric&lt;/h2&gt;

&lt;p&gt;まだ管理すべきサーバ台数 x 種類が小さい為、プロビジョニングもデプロイもFabricを利用しています。fabtoolsと併用することで、スタンダードなインストール/設定は非常に簡潔に書けて気に入っています。また、トランザクションが多い部分はAWS Elastic Beanstalkを利用しており、デプロイの度にAMIからサーバを作りなおしているので冪等性があんまり関係ないってのもあります。&lt;/p&gt;

&lt;p&gt;ただし、今後サービスが拡大し、管理するサーバの種類と台数が増えた際には、インストールするパッケージの種類やサーバの役割等を細かくモジュール化して管理していく為の別の選択肢作っておきたいため、Ansibleを少しずつ触り始めています。&lt;/p&gt;

&lt;h1 id=&quot;_5&quot;&gt;サービス&lt;/h1&gt;

&lt;h2 id=&quot;google_apps&quot;&gt;Google Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gmail&lt;/li&gt;

&lt;li&gt;Google Calendar&lt;/li&gt;

&lt;li&gt;Google Drive&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;trello&quot;&gt;Trello&lt;/h2&gt;

&lt;p&gt;今年に入ったくらいから導入し、まだ運用方法に関しては試行錯誤中の部分もありますが、だいぶ軌道に乗ってきました。UserVoiceという会社の使い方の中から、”Current Development Board”の部分を抜粋して利用してます。3人で約2週間に一度機能追加、デザインA/Bテストをリリースし続けている現在の開発スタイルにはマッチしてますが、今後もずっとこのスタイルを続けるかどうかは引き続き検討中です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://community.uservoice.com/blog/trello-google-docs-product-management/&quot;&gt;How we use Trello &amp;amp; Google Docs to make UserVoice better every day&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trelloを採用した際の要件抜粋&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人軸で何をやっているのか、タスク総量がどれくらいなのかがすぐわかる(メンバーをアサインしてフィルタ)&lt;/li&gt;

&lt;li&gt;次のリリースまでに何が完了していないといけないのかすぐわかる(NextUpボード参照)&lt;/li&gt;

&lt;li&gt;今何が終わってて何が終わってないのかがすぐわかる(In Progress, QAボード参照)&lt;/li&gt;

&lt;li&gt;バグ、新機能、リファクタのタスクがすぐわかる(ラベルを使って対応)&lt;/li&gt;

&lt;li&gt;安い(今はお金があんまり無い)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タスクの進捗だけではなく、機能追加時のディスカッションや、各リリース毎の振り返り(KPT)にも利用できて重宝してます。コードに直接関係しない部分は、後述するGitHub Issueよりもこちらで議論する事が多いです。&lt;/p&gt;

&lt;h2 id=&quot;scrum_for_trello&quot;&gt;Scrum for Trello&lt;/h2&gt;

&lt;p&gt;ChromeのエクステンションとしてScrum for Trelloを入れています。これを入れるとTrelloの各カードに対して予定と実績が入力できるようになります。予実の差分を毎週チェックし、クオリティーとスピードのバランスがとれたリリースができるようにチーム内で話し合ってます。&lt;/p&gt;

&lt;h2 id=&quot;hipchat&quot;&gt;HipChat&lt;/h2&gt;

&lt;p&gt;非常に重宝しているチャットサービス。営業からエンジニア勢への相談事項、お知らせ、エンジニア間のコミュニケーションは込み入ったものでなければ全てこの中で完結させています。また、後述のdrone.ioからビルドの通知を、GitHubからはPush時/コメント時/PR作成時にノーティフィケーションを流すようにしています。&lt;/p&gt;

&lt;p&gt;原則ココさえ見ておけばエンジニアは生活できるように、あらゆるサービスのノーティフィケーションを流すようにしてく予定です。&lt;/p&gt;

&lt;h2 id=&quot;droneio&quot;&gt;drone.io&lt;/h2&gt;

&lt;p&gt;CIサーバとして利用しています。非常にシンプルに設定を記述できる、且つ廉価なのでセットアップは楽なのですが、いかんせんノーティフィケーションの方法がメールだけなのが痛い。一応ビルド成功時にHipChat側に通知を送るように仕込んでいるのですが、知りたいのはむしろビルド失敗時だったりして、そうするとHipChatのAPIを叩けなかったりと色々難儀です。&lt;/p&gt;

&lt;p&gt;現在乗り換えを検討中。&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;GitHub&lt;/h2&gt;

&lt;p&gt;ほぼ全てのリポジトリはGitHub上においてあります。技術的な相談、指摘、質問は全てプルリクエスト内で実施。新機能追加時には、設計の内容認識合わせをした後にWIP(work in progress)のPRを作成して、そこでの議論をベースに改善していく形をとっています。また、ChromeのMISAWA:MDを利用させて頂いており、殺伐とした議論にイラつきと若干の和みを同時に投入する習慣がついています。&lt;/p&gt;

&lt;p&gt;GitHub Issueはアサインされている人軸で絞り込めず、誰が何をやっているのかの把握とタスク分配がやりにくいので、バグ、機能追加の仕様等は全てTrelloに集約しています。&lt;/p&gt;

&lt;h2 id=&quot;amazon_web_services&quot;&gt;Amazon Web Services&lt;/h2&gt;

&lt;p&gt;大変お世話になってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPC&lt;/li&gt;

&lt;li&gt;EC2&lt;/li&gt;

&lt;li&gt;S3&lt;/li&gt;

&lt;li&gt;Elastic Beanstalk&lt;/li&gt;

&lt;li&gt;Elastic MapReduce&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sentry&quot;&gt;Sentry&lt;/h2&gt;

&lt;p&gt;現在試験的に利用中。&lt;/p&gt;

&lt;h2 id=&quot;new_relic&quot;&gt;New Relic&lt;/h2&gt;

&lt;p&gt;現在試験的に利用中。 すごいいいんですけどお高いんですよね。ちなみにこの前アメリカのNew Relicから電話かかってきてmoquada氏がテンパッてました。&lt;/p&gt;</description>
				<pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/03/31/kanmu-tech.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/03/31/kanmu-tech.html</guid>
			</item>
		
			<item>
				<title>Mac 10.9 Mervericsでpip install PILが失敗する</title>
				<description>&lt;p&gt;Mac OSX 10.9.1、Python 2.7.5でpipを利用したPILのインストールが失敗する。 OSアップグレード前はうまくいっていた。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;エラー詳細&lt;/h2&gt;

&lt;p&gt;どうやらヘッダファイルが無いらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;building &amp;#39;_imagingft&amp;#39; extension

cc -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -I/usr/local/opt/sqlite/include -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/System/Library/Frameworks/Tcl.framework/Headers -I/System/Library/Frameworks/Tk.framework/Headers -I/usr/local/include/freetype2 -IlibImaging -I/Users/achiku/.virtualenvs/pil/include -I/usr/local/include -I/usr/include -I/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c _imagingft.c -o build/temp.macosx-10.7-x86_64-2.7/_imagingft.o

_imagingft.c:73:10: fatal error: &amp;#39;freetype/fterrors.h&amp;#39; file not found

#include &amp;lt;freetype/fterrors.h&amp;gt;

         ^

1 error generated.

error: command &amp;#39;cc&amp;#39; failed with exit status 1&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;_2&quot;&gt;対応&lt;/h2&gt;

&lt;p&gt;結論から言うと、イメージ上のフォントを弄るfreetypeをbrew経由でインストールし、PILコンパイル時に見える位置にシンボリックリンクを貼って再度pip installすることで解決。&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;brew install freetype
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;ln -s /usr/local/Cellar/freetype/2.5.1/include/freetype2 /usr/local/include/freetype
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;pip install PIL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_3&quot;&gt;参考/こんなになった経緯等&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/20325473/error-installing-python-image-library-using-pip-on-mac-os-x-10-9&quot;&gt;Error installing Python Image Library using pip on Mac OS X 10.9&lt;/a&gt;&lt;/p&gt;</description>
				<pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2014/01/27/mac-109-mervericpippil.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2014/01/27/mac-109-mervericpippil.html</guid>
			</item>
		
			<item>
				<title>今日のVimキーマップ</title>
				<description>&lt;p&gt;MacVimで長い文章を書く際に劇的に役立つキーマップ。これを入れておく事で1行なのにGUI上改行されている改行も、通常のj,kで移動できる！ @seizans の.vimrcから拝借しました。&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;vim&#39;&gt;&lt;span class=&#39;nb&#39;&gt;nnoremap&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;j&lt;/span&gt; gj
&lt;span class=&#39;nb&#39;&gt;nnoremap&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;k&lt;/span&gt; gk 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2013/11/19/todays-vim-keymap.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2013/11/19/todays-vim-keymap.html</guid>
			</item>
		
			<item>
				<title>転職しました</title>
				<description>&lt;p&gt;5年間お世話になったアクセンチュアを卒業し、本日より株式会社カンムで働きます。&lt;/p&gt;

&lt;p&gt;思い返せばゴミ虫のごとく無能なのに、「俺が日本で適当に大学生活送ってきた輩どもに負けるわけねー。どいつもこいつも雑魚ばっかだ。」とか比較的本気で信じてた22歳でした。恥ずかし過ぎて鼻血がでますが、そんな無邪気な万能感は、ファーストアサインで木っ端微塵に吹っ飛び、ちょっと仕事を覚えては新しいジョブにアサインされ、懲りずに調子に乗り、調子に乗ったまま守備範囲を広げ、自分から広げたくせにボコボコになり、鼻っ柱というか脊椎の辺りからバックリ折られて呆然とする、という事を繰り返してここまできました。&lt;/p&gt;

&lt;p&gt;この5年間、自分の目指すスーパーな姿と実際のミジンコクラスの実力の断絶に、何度も嫌気がさし、嫌気が差しては飲んだくれ、歌を歌い、ちょっと泣き、また次の仕事に取り組んできました。そうやって振り返った時思い出すのは、やはりお世話になりまくった上司、チームは全然違うのに飲むときはやたら一緒にいる先輩や後輩、事ある毎に飲み会を開く同期達です。&lt;/p&gt;

&lt;p&gt;皆さんと働けて、自分の5年間は本当に幸せでした。&lt;/p&gt;

&lt;p&gt;本当にありがとうございました。&lt;/p&gt;

&lt;p&gt;アクセンチュアで働き続ける事もきっとすごく面白い事なのでしょうが、ただ、もっと作りたくなってしまいました。自分の頭で考えたものを自分の手で実装する。自分の中でサービスやプロダクトを作るということは、各人がもっている「世はかくあれかし」という精神を実装する事だと思っています。カンムはまだ小さい会社ですが「世はかくあれかし」を持っています。ただ持っているだけではなく、作る、ということがどういうことが知っている会社だと思います。いいものを作るという事は、綺麗に整理整頓された思想や精神性だけで行える事ではなく、底なし沼ばりにドロドロしたトレードオフ、血の滴るような戦術レベルの意思決定、ヒリヒリするような関係各所の利害関係調整など、時に目をそむけたくなるようなものも沢山あるのです。&lt;/p&gt;

&lt;p&gt;そんな鉄火場で、自分の核にある技術を使い、尊敬できるチームと一緒に「いいものを！」と叫びながら働きまくる。そういうことを新しい場所で全力でやってみたいと感じ、最終的な転職を決めました。&lt;/p&gt;

&lt;p&gt;お世話になった皆様方。&lt;/p&gt;

&lt;p&gt;知久は今後もバチバチに仕事とどつきあってきます。&lt;/p&gt;

&lt;p&gt;へこんでたら、酒とレッドブルを注入してください。&lt;/p&gt;

&lt;p&gt;あとミスチル。&lt;/p&gt;

&lt;p&gt;5年間、本当にありがとうございました！！&lt;/p&gt;

&lt;p&gt;今後ともよろしくお願いします！！&lt;/p&gt;</description>
				<pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2013/11/18/job.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2013/11/18/job.html</guid>
			</item>
		
			<item>
				<title>AWS: EIP + VPC + NAT + ELB + EC2 + RDS #1</title>
				<description>&lt;p&gt;Amazonの提供するクラウド系サービスを利用してひと通りの環境を構築してみる。作りたいのはパブリックなサブネットとプライベートなサブネットに分割し、Public側にNAT Instance + ELB + 踏み台サーバを配置、Private側にWeb/APサーバ + RDSを置く、という構成。DMZとDC内部、的な構成でやってみようと思います。本当はDC内部はVPNつないでみたいけど、今回は踏み台サーバを用意してプライベート側のEC2にログインして作業する構成とする。&lt;/p&gt;

&lt;p&gt;キャプチャは取らない方式でまとめます。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;アカウント作成&lt;/h2&gt;

&lt;p&gt;まずはAWS用のアカウントを作成する。既にAmazonのアカウント持っている人はそのアカウントにAWSアカウントをひもづける事が可能。アカウント作成時に必要なものは住所、電話（アカウント作成時に電話で認証をとっている）、クレジットカード情報。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/jp/&quot;&gt;Amazon Web Service&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;vpc&quot;&gt;VPC&lt;/h2&gt;

&lt;p&gt;Amazon Virtual Private Cloudの略。要はいつもオンプレミスでやっているようなNWレイヤでのセキュリティコントロールや、ルーティングやサブネットの分割がAWS上でもできるということ。設定したVPC上にEC2等のAWSオブジェクトを作成していく。また、今回はやらないけど、既存のデータセンターとの間にHardware VPN(IPsec VPN)を使って接続することもできる。うーむ。便利。以下VPCのサイトから引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Amazon VPC のネットワーク設定は容易にカスタマイズすることができます。例えば、インターネットとのアクセスが可能なウェブサーバーのパブリック サブネットを作成し、データベースやアプリケーションサーバーなどのバックエンドシステムをインターネットとのアクセスを許可していないプライベート サブネットに配置できます。セキュリティグループやネットワークアクセスコントロールリストなどの複数のセキュリティレイヤーを活用し、各サブネットの Amazon EC2 インスタンスへのアクセスをコントロールすることができます。&lt;a href=&quot;http://aws.amazon.com/jp/vpc/&quot;&gt;Amazon VPC公式サイトから引用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;VPCのコントロールパネルを開く。Start VPC Wizardをクリックしてウィザード開始。 VPC with Public and Private Subnetsを選択。デフォルトの選択のまま、Create VPCを実行。&lt;/p&gt;

&lt;p&gt;そうすると作成されるものが以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPC x 1&lt;/li&gt;

&lt;li&gt;Subnet x 2&lt;/li&gt;

&lt;li&gt;Route Table x 2&lt;/li&gt;

&lt;li&gt;Internet Gate Way x 1&lt;/li&gt;

&lt;li&gt;Elastic IP x 1&lt;/li&gt;

&lt;li&gt;EC2 NAT Instance x 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NAT Instanceは普通にEC2のインスタンス作成時にNATインスタンス用にAMIを選択したやつっぽい。最初NATのサービスを探してた。AMI IDは、amzn-ami-vpc-nat-pv-2013.03.1.x86_64-ebs。&lt;/p&gt;

&lt;p&gt;NATは外部と通信するためGlobal IPが必要なので、VPCウィザード先輩が自動的にElastic IPを振り出しNATインスタンスに割り当てている模様。先輩はいい感じにやってくれる。&lt;/p&gt;

&lt;p&gt;更に先輩は、2つ作ったサブネットの内、一つのデフォゲをInternet Gateway、もう一つのサブネットのデフォゲを自動的に作成したNATに設定してくれる。これでInternet Gatewayがデフォゲに指定されている方がパブリックサブネット、いわゆるDMZ的なものになる。一方で、NATがデフォゲに指定されている方がプライベートサブネット、というくくりになる。&lt;/p&gt;

&lt;h2 id=&quot;bastion_serverec2&quot;&gt;Bastion Server(EC2)&lt;/h2&gt;

&lt;p&gt;EC2のマネジメントコンソールから新規にEC2インスタンスを作成する。 この際、踏み台サーバはPublicサブネットに配置する。というか踏み台サーバの事をBastion Host/Serverという事を今日始めて知りました。ばすちょん。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sans.org/security-resources/idfaq/bastion.php&quot;&gt;What is a bastion host?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作成が完了すると、pem形式のキーの名前を聞かれるので適当に命名。ダウンロードしたpem keyをローカルに配置し、以下のコマンドを実行してBastionサーバに接続できることを確認する。pem keyを何単位で分けるのが適切かは、セキュリティと運用の容易さのトレードオフで決めるのかな。今回は一つのpem keyで全てのサーバにアクセスできるようにしておく。本当は本番/ステージング別とか、プライベート/パブリックサブネット別とかに分けるのだろう。&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;    &lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;ssh -i tokyoPemKey.pem ubuntu@your-ec2-domain.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;ap_serverec2&quot;&gt;AP Server(EC2)&lt;/h2&gt;

&lt;p&gt;EC2のマネジメントコンソールから新規にEC2インスタンスを作成する。 この際、APサーバはPrivateサブネットに配置する。VPCをウィザードで作成すると、自動的に10.0.1.0/24がプライベートなサブネット（Default GawtewayがNATインスタンスになってるやつ）になっているっぽい。逆に、10.0.0.0/24がパブリックになっており、Default GatewayにはInternet Gatewayが指定されている。よって、Configuration Instance Detailsから以下の設定を実施する。それ以外はデフォルトで問題なし。プライベートなサブネットに配置するので、Public IPとかは設定しないでよし。ちなみに今回はUbuntu Server 13.10 - ami-b945ddb8を利用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network: 10.0.0.0/16&lt;/li&gt;

&lt;li&gt;Subnet: subnet-xxxxx(10.0.1.0/24)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;load_balancerec2_elb&quot;&gt;Load Balancer(EC2, ELB)&lt;/h2&gt;

&lt;p&gt;EC2ダッシュボードに行くと、左側のNETWORK&amp;amp;SECURITYタグの中にLoad Balancerという項目があるので、ここから新規作成する。&lt;/p&gt;

&lt;p&gt;適当な名前をつける。 Create LB Inside:の部分は新規に作成したVPCを選択。今回の場合は、10.0.0.0/16。 LBが通すプロトコルとポートを指定する。今回はデフォルトのHTTPとポート80番のみ。 ヘルスチェックはデフォルトのまま。&lt;/p&gt;

&lt;p&gt;ロードバランス「される」インスタンスが存在するサブネットを選択する。今回はAPサーバをPrivateサブネット（Internet Gatewayがついてない方のサブネット）に配置しているので、そちらを選択。デフォルトでは、10.0.1.0/24。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will need to select a Subnet for each Availability Zone where you wish to have load balanced instances. A Virtual Network Interface will be placed inside the Subnet and allow traffic to be routed into that Availability Zone. Only one subnet per Availability Zone may be selected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;セキュリティグループは一旦デフォルト。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;作成完了したら、EC2のマネジメントコンソール左ペインからLoad Balancerを選択して新規作成されたレコードを確認。Instancesに先ほど作成したAP Serverをひもづける。コレで以下の通信経路の基礎が完成。次回はSecurity Groupの設定を行い、APサーバに実際のWebアプリをデプロイする！&lt;/dt&gt;

&lt;dd&gt;
&lt;p&gt;:&lt;/p&gt;

&lt;p&gt;[client] -&amp;gt; [ELB] -&amp;gt; [Web/AP Server]&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;</description>
				<pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2013/11/04/aws-vpc-nat-elb-ec2.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2013/11/04/aws-vpc-nat-elb-ec2.html</guid>
			</item>
		
			<item>
				<title>Github Pages開始</title>
				<description>&lt;p&gt;心機一転、七転抜刀！&lt;/p&gt;

&lt;p&gt;Github Pages + jekyll + Pureで作りました。主にPythonやデータ分析界隈の話が書ければと思います。今は過去に書いていた記事をサルベージして移行中。それにしてもこのGithub Pageを軸にした組み合わせ神すぎる。若干の根性があれば広告なし、容量制限も気にせず、なんならバックアップも取得してもらえるブログサービスが作れてしまう。。。&lt;/p&gt;

&lt;p&gt;Github, jekyll, Pure本当にありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://purecss.io/&quot;&gt;Pure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2013/11/03/start-blog.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2013/11/03/start-blog.html</guid>
			</item>
		
			<item>
				<title>chcsvというツールがすごい</title>
				<description>&lt;p&gt;このツール超便利だ。Oracle DBを標準入出力で操れる。Linux/GNU最高。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.asahi-net.or.jp/~nq7t-kwbt/&quot;&gt;ORACLEの部屋&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tarボールをダウンロードしてきてmakeしてみたけど、そのままでは利用できなかったので、11gR2、Exaでも使えるmakeつくってみた。標準装備のmakeを分解してるだけ。&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;basemake&#39;&gt;&lt;span class=&#39;nv&#39;&gt;ORAHOME&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;${&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;ORACLE_HOME&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;OBJS&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; chcsv.o sqlda.o Option.o OutPut.o Signal.o

&lt;span class=&#39;nf&#39;&gt;build &lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;chcsv&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;chcsv &lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;$(OBJS)&lt;/span&gt;
  gcc -o chcsv &lt;span class=&#39;k&#39;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#39;k&#39;&gt;)&lt;/span&gt; -L&lt;span class=&#39;k&#39;&gt;$(&lt;/span&gt;ORAHOME&lt;span class=&#39;k&#39;&gt;)&lt;/span&gt;/lib/   -lclntsh -lclntst11 &lt;span class=&#39;sb&#39;&gt;`&lt;/span&gt;cat &lt;span class=&#39;k&#39;&gt;$(&lt;/span&gt;ORAHOME&lt;span class=&#39;k&#39;&gt;)&lt;/span&gt;/lib/ldflags&lt;span class=&#39;sb&#39;&gt;`&lt;/span&gt;   &lt;span class=&#39;sb&#39;&gt;`&lt;/span&gt;cat &lt;span class=&#39;k&#39;&gt;$(&lt;/span&gt;ORAHOME&lt;span class=&#39;k&#39;&gt;)&lt;/span&gt;lib/sysliblist&lt;span class=&#39;sb&#39;&gt;`&lt;/span&gt; -ldl -lm

&lt;span class=&#39;nf&#39;&gt;chcsv.c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;  &lt;span class=&#39;m&#39;&gt;chcsv.pc&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;chcsv.o&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;  &lt;span class=&#39;m&#39;&gt;chcsv.c&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;Option.c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;Option.pc&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;Option.o&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;Option.c&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;OutPut.c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;OutPut.pc&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;OutPut.o&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;OutPut.c&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;Signal.c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;Signal.pc&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;Signal.o&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;Signal.c&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;sqlda.c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;  &lt;span class=&#39;m&#39;&gt;sqlda.pc&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;sqlda.o&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;  &lt;span class=&#39;m&#39;&gt;sqlda.c&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;%.o&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;%.c &lt;/span&gt;
  gcc -O -c &lt;span class=&#39;nv&#39;&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class=&#39;nv&#39;&gt;$@&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;%.c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;%.pc&lt;/span&gt;
  proc &lt;span class=&#39;nv&#39;&gt;$&amp;lt;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;clean&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;
  /bin/rm -f *.o *.c *.lis chcsv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Sat, 04 Sep 2010 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2010/09/04/chcsv.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2010/09/04/chcsv.html</guid>
			</item>
		
			<item>
				<title>関数的であるということ</title>
				<description>&lt;p&gt;イマイチしっくりとこなかったんだけど、Pythonを使ってみて何となく、ほんのちょこっと関数的であるということが分かってきた気がする。今自分が実感できる「関数的」なことは大きく分けると二つ。1.抽象化する、2.手続きではなく定義を書く&lt;/p&gt;

&lt;p&gt;こっから先はプログラミング歴2年の、しかも仕事でプログラミングあんましてない趣味プログラマが書くことなので、色々間違い・勘違い等含まれていると思うので注意して読まれたし。&lt;/p&gt;

&lt;h3 id=&quot;&quot;&gt;抽象化する&lt;/h3&gt;

&lt;p&gt;以前にもkshで関数的に書くっていうエントリを書いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2009/07/08/pragmatic-functional-programming.html&quot;&gt;プラグマティック関数プログラミング&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;言いたい事はほぼ、このエントリの中にあるんだけど、もう一度まとめる。プログラムがおおきくなるにつれて、プログラムを変更、追加する必要がある場面が増える。そういった時に簡単に変更、追加を行えるようにプログラム同士はなるべく緩くつながっていて欲しいという需要がでてきた。緩くつながるってのはどういうことか。簡単に言うと「取り替えるのが簡単」ってことだ。オブジェクト指向はこの取り替えがなるべく簡単にできるように、クラス、オブジェクト、継承ってのを使ってアプローチしている。関数的なものは、言うに及ばず、関数を使ってこの「取り替えるのが簡単」っていうベネフィットにアプローチする。以下、上記エントリの引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;上のスクリプトが言っているのは「二つ目の引数で与えられたディレクトリ以下のファイルにほげほげしろ」ってこと。この「ほげほげ」って部分が第一引数になる。「二つ目の引数で与えられたディレクトリ以下のファイルにほげほげしろ」っていう指示は抽象的である。抽象的であるが故に「ほげほげ」の部分を自由に組み替えることができる。それはつまり、拡張性・再利用性が高いってことだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、「ほげほげ」の部分を空白にしておくことで、いろんな関数を取り替え可能にしておく事ができる。この様にして関数的なプログラミング言語は「取り替えるのが簡単」っていう利点を作り出している。&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;手続きではなく定義を書く&lt;/h3&gt;

&lt;p&gt;これは最近自分でしっくりきた感覚。感覚なので、なかなか伝えるのが難しいんだけど、トライしてみます。「手続き」っていうのは、「アレとコレを比べる。比べた結果、アレの方が大きかった場合、foo処理をする。比べた結果、コレの方が大きかった場合、bar処理をする。」っていう機械に語りかけるような、そんな感じのものだと認識している。関数的なものの場合、「foo処理とは、アレとコレを比べてアレの方が大きい場合の処理。bar処理とはアレとコレを比べてコレの方が大きい場合の処理。」ってな感じ。。。だんだん怪しくなってきた。。。たぶんどっちでやっても同じような事をするプログラムは書けるんだろうと思う。&lt;/p&gt;

&lt;p&gt;書いてたらわからんくなってきた。一時中断する。またなんかふといい説明方法が思いついたら書く！&lt;/p&gt;

&lt;p&gt;どなたかわかりやすげな説明できる方、よろしくお願いします！ひろくんとか！&lt;/p&gt;</description>
				<pubDate>Sat, 30 Jan 2010 00:00:00 +0000</pubDate>
				<link>http://achiku.github.io//2010/01/30/functional-programming.html</link>
				<guid isPermaLink="true">http://achiku.github.io//2010/01/30/functional-programming.html</guid>
			</item>
		
	</channel>
</rss>
